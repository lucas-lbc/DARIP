Repo,IssueNum,Title_Description,Fixers,Labels,Created_at,Closed_at,Creator,Commentators,Label_adders,Label_removers,Assigns,Unassigns,Closer,Links
microsoft/terminal,10003,"Crash in main when writing settings to disk twice ### Windows Terminal version (or Windows build number)

main

### Other Software

N/A

### Steps to reproduce

1. Open SUI
2. Navigate to any profile
3. Change any setting
4. Hit 'Save'
5. Hit 'Save' again
6. Crash

Alternatively:
1. Open SUI
2. Add a new profile
3. Hit 'Save'
4. Hit 'Save' again
5. Crash



### Expected Behavior

No crash

### Actual Behavior

Terminal crashes. The crash seems to happen in the `Model::DefaultTerminal::Current(_currentDefaultTerminal);` call in `CascadiaSettings::WriteSettingsToDisk()`, added in #9907 ",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Area-Settings UI,2021-04-30T04:17:19Z,2021-05-21T16:38:53Z,PankajBhojwani,DHowett;miniksa;zadjii-msft,PankajBhojwani,DHowett,DHowett;zadjii-msft,zadjii-msft,,
microsoft/terminal,10034,"Terminal crashes when running git log ### Windows Terminal version (or Windows build number)

Windows Build: 10.0.19042.964, Windows Terminal commit c3ca94cecaef5a9b22e94a7c34983b19cf77e252 built using Visual Studio 2019 16.9.3

### Other Software

PowerShell 7.1.3
oh-my-posh 3.133.1
posh-git 1.0.0
git 2.31.1.windows.1

### Steps to reproduce

- Start any shell with access to git (powershell, git bash, cmd)
- git clone the windows terminal repo
- git checkout master
- git log
- press space enough times to see this screen, one more space will kill it depending on the number of lines in the terminal


### Expected Behavior

git log shouldn't cause wtd to crash.

### Actual Behavior

![image](https://user-images.githubusercontent.com/802273/117086926-9e7e6700-ad13-11eb-8259-5d31c9b70f7b.png)

Press space after this screen and it wtd will crash leaving the following windows event log entry.

Fault bucket 1724119567131471671, type 5
Event Name: MoAppCrash
Response: Not available
Cab Id: 0

Problem signature:
P1: WindowsTerminalDev_0.0.1.0_x64__8wekyb3d8bbwe
P2: praid:App
P3: 0.0.0.0
P4: 6091d600
P5: DWrite.dll
P6: 10.0.19041.804
P7: 2f618cb5
P8: c0000005
P9: 00000000000cf34e
P10: 

Attached files:
\\?\WERD4E7.tmp.mdmp
\\?\WERD630.tmp.WERInternalMetadata.xml
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WERD641.tmp.xml
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WERD64F.tmp.csv
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WERD67E.tmp.txt

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportArchive\AppCrash_WindowsTerminalD_14915a2eb4f1c128f427ee9d7511ba25d013a0ff_a3463a88_f44a4158-0e6d-4109-867f-3e07b7600941

Analysis symbol: 
Rechecking for solution: 0
Report Id: b377ecbe-9dab-4a05-beea-55614e8d7bb0
Report Status: 268435456
Hashed bucket: c432aee12ffbe1ec97ed4d9c8d2bef37
Cab Guid: 0
 
[CrashDetails.zip](https://github.com/microsoft/terminal/files/6424622/CrashDetails.zip)

[settings.zip](https://github.com/microsoft/terminal/files/6424649/settings.zip)
",skyline75489,Area-Rendering;Issue-Bug;Severity-Crash;Needs-Triage;Product-Terminal;Priority-1,2021-05-05T01:04:24Z,2021-05-11T19:14:35Z,dougheeren,DHowett;skyline75489;LuanVSO;dougheeren,DHowett,,DHowett,,DHowett,
microsoft/terminal,10053,"Terminal crashes when setting --tabColor in command line arguments ### Windows Terminal version (or Windows build number)

10.0.19042.0, 1.7.1033.0

### Other Software

Not other software, but I notice your default Windows Terminal version listed above is higher than my terminal version. I obtained mine from the Windows Store yesterday, so maybe this is fixed in a later version and you have yet to release that to the store?

### Steps to reproduce

1. Open Windows Terminal command line.
2. Attempt to create a new split window (vertical or horizontal) and set --tabColor
3. When typing past 1 character of tabColor, the terminal window will crash.

### Expected Behavior

For me to be able to type out my color value and not crash.

### Actual Behavior

Window crashes.",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1;Area-CmdPal,2021-05-07T20:30:04Z,2021-05-17T02:51:51Z,MSEvanhi,zadjii-msft;MSEvanhi,zadjii-msft,zadjii-msft;DHowett,leonMSFT,,DHowett,
microsoft/terminal,10070,"The `nextTab` and `prevTab` actions do not work correctly when initiated via `wt.exe` or the command palette In short, `wt focus-tab --next` and `--previous` don't do anything at all on my system, while `Next tab` and `Previous tab` via the command palette behave oddly, although I can't imagine that the latter is often used by anyone.

### Windows Terminal version (or Windows build number)

1.8.1032.0

### Steps to reproduce

#### Case 1:
Run `wt -w new new-tab ; new-tab ; focus-tab --next` (or `--previous`).

#### Case 2:
Run `wt -w new new-tab ; new-tab`.

In the new window, run `wt -w 0 focus-tab --next` (or `--previous`).

#### Case 3:
Run `wt -w new new-tab ; new-tab ; new-tab`.

In the new window, open the command palette (by default using <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>) and type in `Next tab` (or `Previous tab`) <kbd>Enter</kbd>.

### Expected Behavior

#### Case 1:
The first tab is focused.

#### Case 2:
The first tab is focused.

#### Case 3:
The desired tab (according to the `tabSwitcherMode`) is focused.

### Actual Behavior

#### Case 1:
The `focus-tab` subcommand is ignored; the second tab remains focused.

#### Case 2:
The `focus-tab` subcommand is ignored; the second tab remains focused.

Note that in the two cases above, `wt focus-tab --target 0` works correctly.

#### Case 3:
This depends on the `tabSwitcherMode`:

 * `mru` 閳 the desired tab is focused for a split second, and then the originally-focused tab regains focus.
 * `inOrder` 閳 the desired tab is focused for a split second, and then tab index 0 gains focus.
 * `disabled` 閳 the desired tab is focused (there is no bug in this case).

----------

My apologies if I should have separated this into two issues.

Thanks!",leonMSFT;Don-Vito,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-Commandline,2021-05-10T17:50:14Z,2021-08-19T17:18:14Z,gurnec,zadjii-msft;DHowett;Don-Vito,zadjii-msft,DHowett,leonMSFT,,DHowett,
microsoft/terminal,10106,"[1.9] Crash opening Settings UI ### Windows Terminal version (or Windows build number)

10.0.18363.0

### Other Software

_No response_

### Steps to reproduce

1. Open Windows Terminal
2. Click the dropdown icon
3. Click settings

### Expected Behavior

Open SUI

### Actual Behavior

1. Freeze 1 second
2. Dropdown disappear
3. Freeze another 3 seconds
4. Terminal closes without any message",miniksa,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Needs-Triage;Product-Terminal;Priority-0;Area-Settings UI;Area-DefApp,2021-05-17T08:11:32Z,2021-05-27T17:53:01Z,M0nk3yH4cks,skyline75489;zadjii-msft;miniksa;psmolkin;j4james;M0nk3yH4cks;DHowett;GTechnology-biz,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,10181,"[defapp] The default terminal subtitle is is difficult to read in High Contrast mode ### Windows Terminal version (or Windows build number)

1.9.1391.0

### Other Software

n/a

### Steps to reproduce

Enable High Contrast mode
Open Terminal's Settings page > Startup tab
Try to change the default terminal application

### Expected Behavior

Probably all text should be either solid white or solid black.  It looks like it's currently unconditionally set to SystemBaseMediumColor, which is #99FFFFFF even in HC mode.

### Actual Behavior

Some text is grey, which does not contrast well with the High Contrast accent color:

![image](https://user-images.githubusercontent.com/10259764/119559414-7b196b80-bd57-11eb-8c04-302a29294b82.png)
",miniksa,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Needs-Triage;Product-Terminal;Priority-1,2021-05-25T20:00:14Z,2021-05-26T05:39:27Z,jtippet,zadjii-msft;miniksa,zadjii-msft,,miniksa,,,
microsoft/terminal,10190,"Win32 mouse coordinates wrong when viewport scrolled ### Windows Terminal version (or Windows build number)

1.9.1445.0

### Other Software

Using Yori's mouseover support, but anything else should work.  It's just unnatural to observe this with a TUI application like FAR manager (why scroll the viewport for a full screen TUI application?)  However, scrolling the viewport should show the same behavior for anything.

### Steps to reproduce

1. Fill the console with output until it scrolls.
2. Manually scroll the viewport up.
3. Generate mouse events and observe the coordinates that the event contains.

### Expected Behavior

Since I know Dustin doesn't like the idea of applications being able to address regions that have scrolled off the visible portion of the display at the bottom, I was expecting the application to observe coordinates corresponding to mouse location if that location is visible at the bottom of the viewport.  If the cell is not visible at the bottom of the viewport, I was expecting the reported location to be capped.

### Actual Behavior

The reported mouse coordinates assume that the window has not scrolled and report coordinates on the assumption that the visible viewport is the same as the bottom of the scroll region.  This causes the application to highlight/select the wrong text, several lines below where the mouse is positioned.

![terminal_mouseover](https://user-images.githubusercontent.com/17101641/119581871-4cf85380-bd78-11eb-93c5-830673d3c358.gif)
",PankajBhojwani,Resolution-Fix-Committed;Area-Input;Issue-Bug;Product-Terminal;Priority-2,2021-05-25T23:46:06Z,2021-09-22T19:41:02Z,malxau,DHowett;malxau;PankajBhojwani,zadjii-msft;DHowett,DHowett,DHowett,,,
microsoft/terminal,10194,"Windows terminal as default terminal application breaks WSL2 launch when WSL2 debugConsole is enabled ### Windows Terminal version (or Windows build number)

1.9.1445.0

### Other Software

1. WSL2
2. Windows 10 build 21387 or later, for the WSL2 `debugConsole` functionality

### Steps to reproduce

1. Install WSL2 + a distro and create the `%USERPROFILE%\.wslconfig` file with the following contents:

```
[wsl2]
debugConsole=true
```
2. Make sure that Terminal v1.9.1445.0 is installed, and that it's a) set as the default terminal b) has a profile for your WSL2 distro
3. Attempt to launch terminal in the WSL2 profile, either via the jump list or terminal's own profile menu

### Expected Behavior

1. WSL2 profile opens normally

### Actual Behavior

1. Windows terminal locks up and goes into a ""not responding"" state, with high system CPU usage from VM compute service
2. After the windows terminal process is killed, a legacy console window spawns with the expected WSL2 VM debug output
3. After the VM boots, another Windows terminal spawns without any tabs open, lacking any WSL profile, and doesn't respond to window close events
4. When the terminal instance from 3 is killed, and another one is spawned, this one will work normally",miniksa,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-1;Area-DefApp,2021-05-26T02:46:40Z,2021-06-16T19:23:38Z,reynoldsa,rescenic;DHowett;miniksa,zadjii-msft,DHowett,DHowett,,,
microsoft/terminal,10199,"Quake Mode has incorrect window size after toggling fullscreen mode ### Windows Terminal version (or Windows build number)

Windows: 10.0.19043.0, Terminal: 1.9.1445.0

### Other Software

I am using 125 % DPI scaling

### Steps to reproduce

1. Invoke Quake Mode overlay
2. Press F11
3. Press F11 again

https://user-images.githubusercontent.com/1827784/119619525-61822d80-be04-11eb-91c1-004cdaefc9b1.mp4



### Expected Behavior

After leaving fullscreen mode, the quake bar should have the same size as before

### Actual Behavior

The window is moved to the right, there is a very noticeable gap between the window and the border of the screen
![image](https://user-images.githubusercontent.com/1827784/119619872-b756d580-be04-11eb-842e-84fd107357b6.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-2,2021-05-26T07:28:33Z,2021-07-28T22:18:58Z,JensMertelmeyer,skyline75489;zadjii-msft,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,10210,"Action for quake mode should be called ""Quake mode"" in SUI ### Windows Terminal version (or Windows build number)

1.9.1445.0

### Other Software

_No response_

### Steps to reproduce

Navigate to the Actions page in the Settings UI and scroll down to commands starting with S.

### Expected Behavior

Quake mode should be listed as ""Quake mode"".

### Actual Behavior

Quake mode is listed as ""Summon the Terminal window, name: _quake"".",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-Settings UI,2021-05-26T14:56:20Z,2021-07-12T22:31:17Z,cinnamon-msft,zadjii-msft;DHowett,cinnamon-msft;zadjii-msft,zadjii-msft;miniksa,cinnamon-msft;zadjii-msft,zadjii-msft,,
microsoft/terminal,10229,"Set Windows Terminal preview as default terminal not working ### Windows Terminal version (or Windows build number)

Windows Terminal preview 1.9.1445.0

### Other Software

Microsoft Windows insider preview [version 10.0.21390.1]

### Steps to reproduce

- Open Windows Terminal preview settings
- Set Windows Terminal Preview as default terminal
- Save change
- Open cmd or PowerShell from the start menu

### Expected Behavior

The shell should be opened inside the Windows Terminal Preview

### Actual Behavior

The shell is open inside conhost

Here is the contents of my current registry corresponding to the console and terminal delegation to Windows Terminal Preview
``` reg
[HKEY_CURRENT_USER\Console\%%Startup]
""DelegationConsole""=""{06EC847C-C0A5-46B8-92CB-7C92F6E35CD5}""
""DelegationTerminal""=""{86633F1F-6454-40EC-89CE-DA4EBA977EE2}""
```
",miniksa,Needs-Repro;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-1;Area-DefApp,2021-05-27T08:12:36Z,2021-10-06T07:22:14Z,mveril,zadjii-msft;mveril;miniksa,zadjii-msft;DHowett,DHowett,DHowett,,mveril,
microsoft/terminal,10251,"[DefApp] PowerShell opened via Win+X errors 50% of the time ### Windows Terminal version (or Windows build number)

10.0.21390.1, 1.9.1445.0

### Other Software

_No response_

### Steps to reproduce

1. Set Windows Terminal Preview to be the default terminal app
2. Use Win+X to open the system menu, then click Windows PowerShell

### Expected Behavior

Windows Terminal opens, with Windows PowerShell as the active shell.

### Actual Behavior

Around 50% of the time it works fine, the other 50% of the time I get the error below:

```
---------------------------
powershell.exe - Application Error
---------------------------
The application was unable to start correctly (0xc0000142). Click OK to close the application. 
---------------------------
OK   
---------------------------
```

Video showing this behaviour:

https://user-images.githubusercontent.com/5821575/119975767-26bbf900-bfae-11eb-9ee7-553a9373d76d.mp4",miniksa,Resolution-Fix-Committed;Issue-Bug;Needs-Attention;Product-Terminal;Priority-1;Area-DefApp,2021-05-28T11:17:38Z,2021-07-22T12:51:31Z,ianjoneill,zadjii-msft;ianjoneill;miniksa,zadjii-msft,zadjii-msft,miniksa,,,
microsoft/terminal,10274,"Quake Mode multi monitor setup I've been toying with `quake` mode and noticed some odd behaviors when running on multiple monitors, where one is on a vertical orientation.  On first summon quake mode dropped down from my desired ""main"" monitor.  Consecutive summons have it split between two monitors but never on a single monitor.  I tried changing the `monitor` and `desktop` values of the command without luck.

In the attached image you can see that the window dropped down to my left most monitor (which is vertical).  
It appears the drop down is tracing location of mouse relative to left|right of center in regards to the entire resolution of the combined screens (?).


If my mouse is towards left of center it will render on left most monitor, with the right edge meeting center of main screen.
![image](https://user-images.githubusercontent.com/2653176/120077325-efb21a00-c077-11eb-8a1e-5e3f0a006f71.png)

If my mouse is to the right of center of main screen it renders on the right ""half"" of the resolution, with the left edge meeting center of main monitor.
![image](https://user-images.githubusercontent.com/2653176/120077333-f9d41880-c077-11eb-99f3-d6b6d3cffab4.png)

Last interesting thing to happen is -- if my mouse is on the left edge of my left most screen it renders off screen.
![image](https://user-images.githubusercontent.com/2653176/120077359-14a68d00-c078-11eb-9d0f-82952bae4290.png)
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-2,2021-05-29T16:19:34Z,2021-08-02T19:42:57Z,samirbanjanovic,TomaszGrzmilas;brentos99;nico-abram;zadjii-msft;b-hayes,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,10319,"Unable to select text correctly while new lines are printed and history buffer is full ### Windows Terminal version (or Windows build number)

10.0.19043.0, 1.8.1444.0

### Other Software

_No response_

### Steps to reproduce

1. Set `""historySize"": 100,` for the profile.
2. Run a script that echoes new lines
3. Try to select text

Example script to test the issue:
```powershell
Do {
	echo $(Get-Random)
	sleep 0.1
}
while ($true)
```

The history buffer must be full for this to trigger.

See attached video:


https://user-images.githubusercontent.com/613331/120690411-d9f48880-c4ad-11eb-8f84-e930b5783dfc.mp4



### Expected Behavior

Correctly select text. It works when the history buffer is full.

### Actual Behavior

The selection scrolls away from you, selecting different text.",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2021-06-03T17:55:00Z,2021-08-20T22:36:26Z,xPaw,,zadjii-msft;DHowett,DHowett,DHowett;PankajBhojwani,DHowett,,
microsoft/terminal,10329,"horizontal scroll gesture on trackpad scrolls viewport vertically ### Windows Terminal version (or Windows build number)

1.9.1523.0

### Other Software

_No response_

### Steps to reproduce

with some scroll back on the buffer do a horizontal 2-finger swipe on the trackpad

### Expected Behavior

do nothing

### Actual Behavior

vertical scroll is performed


very annoying if your vertical scroll gesture looks like this:
![image](https://user-images.githubusercontent.com/43626415/120743986-6c0d8880-c4d0-11eb-81cf-e9b4f12004bc.png)
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2021-06-04T04:03:13Z,2021-08-20T22:58:46Z,LuanVSO,zadjii-msft,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,10353,"awful font rendering quality ### Windows Terminal version (or Windows build number)

1.8.1521.0

### Other Software

_No response_

### Steps to reproduce

Use ""Liberation Mono"" font, size 8pt.
(<https://github.com/liberationfonts/liberation-fonts/files/2926169/liberation-fonts-ttf-2.00.5.tar.gz>)


### Expected Behavior

Proper font rendering like any other program.


### Actual Behavior

See screenshot (comparing with PuTTY and oldschool Console window).

![broken-font](https://user-images.githubusercontent.com/6185338/120990933-69858a00-c781-11eb-96f7-5ef28f949c2b.png)

The respective settings are:
 *  Putty: Liberation Mono 8pt
 *  Console: Liberation Mono 12px
 *  Windows Terminal: Liberation Mono 8 Normal

Setting `experimental.rendering.software` or changing font size or weight does not improve anything.
",lhecker,Resolution-Duplicate;Area-Fonts;Issue-Bug;Product-Terminal;Priority-3,2021-06-07T09:19:56Z,2022-08-16T18:23:53Z,manxorist,skyline75489;manxorist;lhecker;j4james;zadjii-msft;DHowett;miniksa,zadjii-msft,zadjii-msft,zadjii-msft;lhecker,,lhecker,
microsoft/terminal,10358,"Defterm launches into quake window ### Windows Terminal version (or Windows build number)

1.9.1445.0

### Other Software

_No response_

### Steps to reproduce

* Launch Windows Terminal Preview and ensure Terminal Preview is set as your default terminal
* Open a quake window
* Dismiss quake window with `Win+\``
* Close initial terminal window
* Launch a ps1 file from file explorer

Since the quake window is the only open Terminal window, defterm launches into that instead of creating a new terminal instance.

### Expected Behavior

A new terminal instance is created.

### Actual Behavior

The quake window is opened and attempts to run the selected file.",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-DefApp,2021-06-07T22:32:18Z,2021-08-05T17:05:22Z,cinnamon-msft,miniksa,cinnamon-msft,cinnamon-msft,zadjii-msft;leonMSFT,zadjii-msft,,
microsoft/terminal,10365,"Saving in the Settings UI breaks ""iterateOn"" ### Windows Terminal version (or Windows build number)

1.9.1523.0

### Other Software

_No response_

### Steps to reproduce

I have [written a blogpost](https://www.fesevur.com/2021/02/17/windows-terminal-command-palette/) on how to add the profiles to the command palette.

When I copy-paste the code mentioned on that page directly in `settings.json` everything works as expected.

When I open the Settings UI and press save the key `iterateOn` is deleted, even without changing anything.

For reference, this is a snippet:

```json
{
	""iterateOn"": ""profiles"",
	""icon"": ""${profile.icon}"",
	""name"": ""${profile.name}: New tab"",
	""command"": {
		""action"": ""newTab"",
		""profile"": ""${profile.name}""
	}
}
```

### Expected Behavior

Saving from the Settings UI doesn't remove anything.

### Actual Behavior

Saving from the UI removes the `iterateOn` key-values pair from `settings.json`.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Severity-Blocking;Priority-0,2021-06-08T14:49:50Z,2021-06-10T18:25:28Z,ffes,DHowett,DHowett,carlos-zamora,carlos-zamora,,,
microsoft/terminal,1037,"Two high-hit-rate crashes observed in TSF after ATL migration MSFT#21776133 caused by `NULL_POINTER_READ_c0000005_conhost.exe!CConsoleTSF::Initialize`
MSFT#21781836 caused by `FATAL_USER_CALLBACK_EXCEPTION_c000041d_conhost.exe!wil::com_ptr_t_ITfContext,wil::err_returncode_policy_::try_query_ITfSourceSingle_`",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Input;Issue-Bug;Severity-Crash,2019-05-28T18:26:15Z,2019-05-28T23:03:23Z,DHowett-MSFT,miniksa,DHowett-MSFT;miniksa,DHowett-MSFT;miniksa,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,1038,"Bug Report Cant select text in newly open tab occasionally <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18898.1000]
Windows Terminal version (if applicable):

Any other software?
```

# Steps to reproduce
1. Open new tab in flyout menu
2. Try to select text in the newly created tab

<!-- A description of how to trigger this bug. -->

# Expected behavior
Text should be selected as normal

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
Terminal doesn't response to mouse dragging occasionally

<!-- What's actually happening? -->
![Imgur](https://i.imgur.com/0LTBd84.gif)",carlos-zamora,Resolution-Duplicate;Help Wanted;Area-Interaction;Issue-Bug;Product-Terminal,2019-05-28T18:33:09Z,2020-01-28T22:56:50Z,Summon528,Summon528;DHowett-MSFT;carlos-zamora,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,10386,"[DefApp] Handoff to active window causes visibility to be toggled ### Windows Terminal version (or Windows build number)

1.9

### Other Software

_No response_

### Steps to reproduce

From an open Terminal window, `start cmd`

### Expected Behavior

It opens

### Actual Behavior

It minimizes!",miniksa,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-2;Area-DefApp,2021-06-09T22:04:58Z,2021-06-10T06:42:12Z,DHowett,zadjii-msft;miniksa,DHowett,DHowett;miniksa,DHowett,,,
microsoft/terminal,10406,"Pencil icon (Edit button) on Actions page is invisible with light theme ### Windows Terminal version (or Windows build number)

Windows Terminal Preview 1.9.1445.0 on Windows 10.0.19043.1052

### Other Software

N/A

### Steps to reproduce

1. Select the light theme in Windows settings (Personalization, Colors).
2. Start Windows Terminal Preview.
3. Open the Settings tab.
4. Close the session tab. (Only to exclude it from screen shots.)
5. Select the Actions page of the Settings tab.
6. Press the Tab key a few times, to select one of the actions listed.

### Expected Behavior

Should have a pencil icon at the right side of the description of the key binding.

The pencil icon would show up all right with a dark theme:

![image](https://user-images.githubusercontent.com/46201428/121649597-65b77780-caa1-11eb-99c2-0c635d4aa4ea.png)


### Actual Behavior

No pencil icon is visible, but if you press Tab once more, the focus rectangle moves to the invisible pencil icon anyway.

![image](https://user-images.githubusercontent.com/46201428/121649232-0bb6b200-caa1-11eb-94c0-425f5abef94c.png)

![image](https://user-images.githubusercontent.com/46201428/121649267-16714700-caa1-11eb-90a6-5e1dd4b2ea65.png)

",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Area-Settings UI,2021-06-11T07:41:00Z,2021-06-14T16:51:16Z,KalleOlaviNiemitalo,KalleOlaviNiemitalo;mdtauk;DHowett,carlos-zamora,carlos-zamora,carlos-zamora,,,
microsoft/terminal,10479,"Entire Terminal app is randomly crashing while closing tabs ### Windows Terminal version (or Windows build number)

1.8.1521.0

### Other Software

_No response_

### Steps to reproduce

1. Set WSL profile as default one
2. Open a lot of tabs with Ctrl+Shift+T
3. Start closing them with Ctrl+D

### Expected Behavior

Tabs should either close, or tab contents should end with `Process exited with code XXXXXX`

### Actual Behavior

Whole Terminal app is crashing, with all sessions that were running inside it. I'm seeing this behavior on two separate machines.

It is happening randomly, most of the time it works correctly, but I had a couple of situations where entire Terminal crashed while I was doing more important things :(

This is WSL profile I have on my laptop, the other one has no theme or font settings.
```
           {
                ""bellStyle"": ""none"",
                ""closeOnExit"": ""graceful"",
                ""colorScheme"": ""One Half Dark"",
                ""cursorShape"": ""filledBox"",
                ""fontFace"": ""Terminus (TTF) for Windows"",
                ""fontSize"": 9,
                ""guid"": ""{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}"",
                ""hidden"": false,
                ""historySize"": 50000,
                ""name"": ""Ubuntu-20.04"",
                ""source"": ""Windows.Terminal.Wsl"",
                ""startingDirectory"": ""\\\\wsl$\\Ubuntu-20.04\\home\\patryk"",
                ""useAcrylic"": false
            }
```",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Priority-1,2021-06-22T00:02:46Z,2021-07-06T21:59:45Z,pjakuszew,skyline75489;pjakuszew;j4james;lhecker,lhecker;DHowett,DHowett,lhecker,,,
microsoft/terminal,10539,"Fragments with ""hidden"" field are masked by our generated ""hidden"" field in the profile stub <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

I am working with the fragments and it is so handy.  One thing I would like to see is a way to allow us to set some of the fragments to hidden within the file.  This way we can easily swap in and out fragments without having to delete entries.

I have a bunch of projects on the go but not all of them are active so I would like to just update my fragment json file and hide them when not in use.

# Proposed technical implementation details (optional)
Just as we have with the regular ""Profiles"", allowing us to use a [ ""hidden"": false ] flag in our fragments.",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2021-06-30T17:45:41Z,2021-07-21T22:41:12Z,ZeroCoolGOS,PankajBhojwani;ZeroCoolGOS;DHowett;zadjii-msft,ZeroCoolGOS;PankajBhojwani;DHowett,DHowett;zadjii-msft,PankajBhojwani,,,
microsoft/terminal,1055,"Left side of text is cut off when maximizing windows terminal on non-primary monitor <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt]
Windows Terminal version (if applicable):

Any other software?
```
Microsoft Windows [Version 10.0.18892.1001] 

# Steps to reproduce

Press the maximize button when the terminal is on a non-primary monitor

# Expected behavior

All text should be visible

# Actual behavior

A portion of the leftmost column of cells is cut off. 

The text is fine when maximized on the primary monitor.
",miniksa;dsafa,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal,2019-05-29T19:58:50Z,2019-07-11T17:59:20Z,adiviness,Archomeda;dkter;gmckeown;DaviMedrade;miniksa;dsafa;rw3iss;mani2jeff;YihaoPeng;benjisoft;troybailey36,adiviness;DHowett-MSFT,DHowett-MSFT,cinnamon-msft,,DHowett-MSFT,
microsoft/terminal,10583,"""initialPosition"" doesn't respect window frame size ### Windows Terminal version (or Windows build number)

Version: 1.9.1523.0

### Other Software

_No response_

### Steps to reproduce

start wt with ""initialPosition"": ""-1920,0"", in the json.


### Expected Behavior

start wt with position on the left Screen of 4

### Actual Behavior

The Window appears ~8 Pixel left from the left side of the Screen

I have 4 Screens attached to my PC

1 2 3 4

3 is the main screen; the wt should appear on screen 2 Top Left.
If you reduce the value from -1920 to -1927, wt will be positioned on screen 1. the position -1927.0 is actually actually there. I have the feeling that the frame of the Windows is included in the calculation, but it is not there: ((
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2021-07-08T10:35:38Z,2021-08-09T18:27:20Z,SirHesti,zadjii-msft;ondrix;DHowett,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,10590,"[BLOCKING] 1.10 breaks fragment extensions ### Windows Terminal version (or Windows build number)

1.10.18x

### Other Software

Julia, Ubuntu Community Preview

### Steps to reproduce

Install any fragment extension-bearing application.

### Expected Behavior

_No response_

### Actual Behavior

The fragments are not loaded.",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-Extensibility;Product-Terminal;Severity-Blocking;Priority-0,2021-07-08T18:09:10Z,2021-07-09T20:43:35Z,DHowett,DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,10595,"Windows 11 Win+X Terminal entries don't work with Terminal Preview ### Windows Terminal version (or Windows build number)

10.0.22000.65 (happened also on 10.0.22000.51), 1.9.1523.0

### Other Software

_No response_

### Steps to reproduce

1) Update to Windows 11 22000.65
2) Uninstall Windows Terminal (stable) and install Windows Terminal Preview
3) Use Win+X entries to open Terminal Preview.

### Expected Behavior

If I have only Terminal Preview installed (and not stable Terminal) Win+X entries (""Windows Terminal"" and ""Windows Terminal (admin)"") should detect that stable Terminal is not installed and open Terminal Preview.

### Actual Behavior

If I have only Terminal Preview installed (and not stable Terminal) Win+X entries (""Windows Terminal"" and ""Windows Terminal (admin)"") don't do nothing.
Feedback Hub link: https://aka.ms/AAd5bx7",DHowett,Resolution-Fix-Available;Resolution-External;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Tracking-External,2021-07-09T03:16:00Z,2021-11-10T16:53:29Z,obrobrio2000,DHowett;MartinGC94;Dhyfer1;zadjii-msft;obrobrio2000;dylumian;maicol07,DHowett;zadjii-msft,DHowett,DHowett,,zadjii-msft,
microsoft/terminal,10658,"Mouse mode RIS changes break return value I commented on the fix you might want to revisit that.

__Originally posted by @amie42 in https://github.com/microsoft/terminal/issues/8613#issuecomment-879860617__",PankajBhojwani,Product-Conhost;Resolution-Fix-Committed;Area-VT;Issue-Bug;Product-Terminal;Area-CodeHealth;Priority-2,2021-07-14T12:55:29Z,2021-07-14T16:46:35Z,DHowett,,DHowett,DHowett;zadjii-msft,DHowett,,,microsoft/terminal#8613;
microsoft/terminal,1073,"Copy and paste from the Windows Terminal doesn't include line breaks # Environment

```none
Windows build number: 10.0.18362.116
Windows Terminal version (if applicable): 71e19cd + changing toolset to v142 and SDK version
```

# Steps to reproduce

1. Clone, build, package, install and launch _Windows Terminal (DevBuild)_.
2. Execute `docker run --rm -it mcr.microsoft.com/windows/nanoserver:1903`
3. Select multiple lines and right click.
4. Paste in any text editor. I used VSCode.

# Expected behavior

I expected to see the same thing I saw in the terminal - specifically multiple lines.

# Actual behavior

One line with lots of space.

# Notes

This is different from #65 since it was about conhost and I'm talking about the new terminal, and I didn't have Shift pressed.
",carlos-zamora;d-bingham,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix,2019-05-30T21:58:22Z,2019-10-18T00:13:54Z,conioh,zadjii-msft;d-bingham;apenney;BartTaylor;hdformat;illera88;vallamost;EdLy3;mariomarkus;Deathshiver;subhanshu-shukla;DHowett-MSFT;carlos-zamora;carlosrmendes;willemdh;pkoscisz;Ge0rges;CosmicCatnap;postwait;conioh;ljani;andrp92;mikepurvis;hanubeki;erwa,zadjii-msft;DHowett-MSFT,zadjii-msft;DHowett-MSFT,,,DHowett-MSFT,
microsoft/terminal,10740,"Single-instance mode is not working in some cases ### Windows Terminal version (or Windows build number)

10.0.19042.1110 1.8.1521.0

### Other Software

Visual Studio Code

Version: 1.58.2 (system setup)
Commit: c3f126316369cd610563c75b1b1725e0679adfb3
Date: 2021-07-14T22:10:15.214Z
Electron: 12.0.13
Chrome: 89.0.4389.128
Node.js: 14.16.0
V8: 8.9.255.25-electron.0
OS: Windows_NT x64 10.0.19042

### Steps to reproduce

1. Open `Windows Terminal` via the shortcut in `Start 閳 All apps 閳 Windows Terminal`
2. Set `""windowingBehavior""` to `""useExisting""` or `""useAnyExisting""`
3. Open Visual Studio Code
4. Change next VSC settings
	```js
	""terminal.explorerKind"": ""external"",
	""terminal.external.windowsExec"": ""wt.exe"",
	```
5. Open folder in VSC
6. Right-click on folder item in VSC Explorer
7. Then context menu item `Open in Windows Terminal`
8. New Windows Terminal window is opened instead of using the first one

Thanks! Let me know if you need more details.

### Expected Behavior

The single-instance mode should work in all cases.

### Actual Behavior

I'm getting a new window when opening the folder via the Visual Studio Code context menu.",zadjii-msft,Needs-Repro;Issue-Bug;Needs-Attention;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-Remoting,2021-07-21T09:11:39Z,2022-08-11T15:55:22Z,ghost,DHowett;ghost;zadjii-msft,zadjii-msft;DHowett,DHowett,DHowett,,zadjii-msft,
microsoft/terminal,10805,"Quake window location with Windows Magnifier ### Windows Terminal version (or Windows build number)

Windows 10.0.19043.0 Terminal Previw 1.10.1933.0

### Other Software

_No response_

### Steps to reproduce

1. Make sure quake mode is running (but minimized)
2. Launch Windows Magnifier (Win+Plus)
3. Change view to docked (Ctrl+Alt+D or Settings->Ease of Access->Magnifier->Change Magnifier View)
4. Close Magnifier
5. Show quake window

### Expected Behavior

Quake window shows normally at the top of the screen.

### Actual Behavior

Quake window shows below the previously closed Magnifier view. Closing and opening a new quake instance fixes the issue.

![0610](https://user-images.githubusercontent.com/11558535/127128476-d874b583-5bf9-4cb6-94c0-38566e0d698c.png)
",zadjii-msft,Resolution-Duplicate;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2021-07-27T09:09:36Z,2021-08-05T15:47:34Z,Dimension4,WSLUser;zadjii-msft;Dimension4,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,10819,"UIA: incorrect word boundary across wrapped lines ### Windows Terminal version (or Windows build number)

Latest main

### Other Software

_No response_

### Steps to reproduce

1. view test case file (cat, type, etc; sent privately) in a conhost.
2. Move the NVDA review cursor up by line until you reach鑱絫he start of the file.
3. Navigate forward鑱絙y word through the end of the file.

### Expected Behavior

Each word is read separately through the end of the file.

### Actual Behavior

You'll eventually hit a word that includes an entire line!",carlos-zamora,Product-Conhost;Issue-Bug;Area-Accessibility;Needs-Tag-Fix;Priority-1,2021-07-29T17:29:20Z,2021-08-27T21:08:29Z,codeofdusk,zadjii-msft;carlos-zamora;codeofdusk,zadjii-msft;carlos-zamora,zadjii-msft;carlos-zamora,zadjii-msft,,codeofdusk,
microsoft/terminal,10827,"Vim cursor skips forward on single-letter replace ### Windows Terminal version (or Windows build number)

WT v1.9.1942.0; MS Windows v10.0.19043.1110

### Other Software

VIM - Vi IMproved 8.2 (2019 Dec 12, compiled May  2 2021 22:02:47)
64-bit console version for Windows, downloaded from https://github.com/vim/vim-win32-installer/releases/tag/v8.2.2825#:~:text=Signed%2064-bit%20installer. Patch version 2825.

Powerline v2.7 (Python3). `powerline-status` module, installed via `pip`.
This is not likely to be related to the issue, but I thought I'd include it nonetheless.

### Steps to reproduce

- Open vim. Of the following, set `t_EI` and either of the `t_S*` variables:
```vim
let &t_EI .= ""\<Esc>[1 q""
let &t_SR .= ""\<Esc>[3 q""
let &t_SI .= ""\<Esc>[5 q""
```
- Trigger single-letter replacement mode by pressing `r`.
- The cursor jumps forward, by five characters in my case.

### Expected Behavior

The cursor should not jump forward when single-letter replacement mode is triggered.

### Actual Behavior

The cursor jumps forward, as noted above.

Note that I've tested this same combination of factors in WSL Vim, and the jump does not occur.",DHowett,Resolution-External;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2021-07-30T03:47:44Z,2021-08-05T21:40:40Z,LRitzdorf,zadjii-msft;DHowett;LRitzdorf;alexeicolin,zadjii-msft,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,10852,"Setting `wght` axis results in weight flickering when text is/is not ""Simple"" ### Windows Terminal version (or Windows build number)

1.11

### Other Software

_No response_

### Steps to reproduce

```json
""font"": 
{
    ""face"": ""Cascadia Code PL"",
    ""axes"": {
        ""wght"": 300,
    },
    ""size"": 14,
}
```


### Expected Behavior

_No response_

### Actual Behavior

![image](https://user-images.githubusercontent.com/189190/127901993-cc49e7b5-5330-4d0a-87e0-a5f0bfa32d21.png)
",PankajBhojwani,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Area-Settings;Product-Terminal;Priority-1,2021-08-02T17:41:06Z,2021-08-25T01:19:41Z,DHowett,,DHowett,zadjii-msft,DHowett,,,
microsoft/terminal,10853,"Setting `wght` axis breaks bold fonts ### Windows Terminal version (or Windows build number)

1.11

### Other Software

_No response_

### Steps to reproduce

```json
""font"": 
{
    ""face"": ""Cascadia Code PL"",
    ""axes"": {
        ""wght"": 300,
    },
    ""size"": 14,
}
```

### Expected Behavior

Bold text from SGR 1 should be bold (weight 700).

This sample was made by setting `weight` instead of `axes.wght`:

![image](https://user-images.githubusercontent.com/189190/127902471-9401b351-93d4-4cf4-8b53-ec0cd2dad16a.png)


### Actual Behavior

It is not bold.

![image](https://user-images.githubusercontent.com/189190/127902390-7fccb846-c4d5-404c-bffa-7428424a281b.png)

This is impacted by #10852. If the run is considered ""simple"" (I added `j` to make it complex), bold works fine (but note that the base weight of 300 is lost due to #10852.)

![image](https://user-images.githubusercontent.com/189190/127902404-6bda537c-b72f-4518-bddf-dc4136fc1e0e.png)
",PankajBhojwani,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Area-Settings;Product-Terminal;Priority-1,2021-08-02T17:44:26Z,2021-08-25T01:19:41Z,DHowett,,DHowett,zadjii-msft,DHowett,,,
microsoft/terminal,10875,"[1.11 blocking] Overloading win+` doesn't work anymore (discussed on Teams at length, but filing to make sure we're tracking)

Regressed in #10666.

Repro settings:

```json
{ ""keys"": ""win+`"", ""command"": { ""action"": ""globalSummon"", ""monitor"": ""any"" } }
{ ""keys"": ""ctrl+shift+`"", ""command"": { ""action"": ""quakeMode"" } }
```

The <kbd>win+\`</kbd> one will fail to override the <kbd>win+sc(43)</kbd> one in the defaults. When it gets time to `RegisterHotkey`, the one from the defaults will claim the hotkey first.

WIP over at [`dev/migrie/b/broken-globalsummon-overloading`](https://github.com/microsoft/terminal/compare/dev/migrie/b/broken-globalsummon-overloading). 

Also related to #10729. That might be the ultimate solution here, but if we can't get that for 1.11 then we'll need another workaround, or back out the `sc()` one.

",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Severity-Blocking;Area-Windowing,2021-08-04T21:28:51Z,2021-08-11T23:09:26Z,zadjii-msft,,zadjii-msft,zadjii-msft,lhecker,,,
microsoft/terminal,10933,"VKey assertion failure ### Windows Terminal version (or Windows build number)

dev origin/main

### Other Software

I use the colemak keyboard layout primarily, but it also seems to happen with regular qwerty too.

### Steps to reproduce

Launch the application, assert at line https://github.com/microsoft/terminal/pull/10917/files#diff-ac308dd6d23797c02f8be4591060500c2474856a7c3f483ac5cff219b3fc16a2R720 fails

### Expected Behavior

terminal actually loads

### Actual Behavior

exception thrown.",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Severity-Blocking,2021-08-12T17:18:48Z,2021-08-20T00:21:33Z,Rosefield,Rosefield;DHowett;lhecker,lhecker,DHowett,lhecker,,,
microsoft/terminal,10935,"alt+space displays system menu *and* sends key binding to Terminal ### Windows Terminal version (or Windows build number)

1.11

### Other Software

_No response_

### Steps to reproduce

Press alt-space!

### Expected Behavior

_No response_

### Actual Behavior

![image](https://user-images.githubusercontent.com/189190/129275589-56034f87-b95a-4158-9450-bddb0fb89c02.png)

/cc @FWest98 possible fallout from #10799?",PankajBhojwani,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Severity-Blocking;Priority-1,2021-08-12T22:02:01Z,2021-08-24T14:07:45Z,DHowett,FWest98,DHowett;zadjii-msft,zadjii-msft,PankajBhojwani,,,
microsoft/terminal,10936,"right-clicking the tray icon focuses terminal *and* opens menu ### Windows Terminal version (or Windows build number)

1.11

### Other Software

_No response_

### Steps to reproduce

as in title

### Expected Behavior

_No response_

### Actual Behavior

as in title",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Needs-Triage;Product-Terminal,2021-08-12T22:06:20Z,2021-08-20T23:24:13Z,DHowett,leonMSFT;DHowett;zadjii-msft,DHowett,,DHowett,,,
microsoft/terminal,10957,"Repeated Bell (eg. end of line in Vim) Causes Reproducible Crash ### Windows Terminal version (or Windows build number)

1.10.1933.0

### Other Software

Windows 10 (19043.1165)
vim 8.1.2269 inside WSL
Ubuntu 20.04.2 LTS (GNU/Linux 5.10.16.3-microsoft-standard-WSL2 x86_64)
Solarized Dark Theme applied

(Note: have reproduced on non-preview version also)



### Steps to reproduce

Start vim, repeatedly press arrow keys to trigger bell, crash varies on which bell but usually takes less than 5/6 tries. This is not specific to Vim, just an easy way to reproduce, I have seen crashes from the bell with bash completion for example also.

### Expected Behavior

Not crashing when bell occurs
![terminal-crash-bell-1](https://user-images.githubusercontent.com/445308/129601377-30565c58-8cc1-4479-94a9-bc9e8e22e2c9.gif)


### Actual Behavior

Crash, reported as in MMDevAPI.DLL per the event viewer:

```
Faulting application name: WindowsTerminal.exe, version: 1.10.2107.12003, time stamp: 0x60ecd68c
Faulting module name: MMDevAPI.DLL, version: 10.0.19041.1023, time stamp: 0x00c1ffe2
Exception code: 0xc0000005
Fault offset: 0x000000000001b33b
Faulting process ID: 0x2b0c
Faulting application start time: 0x01d79298aae18b20
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminalPreview_1.10.1933.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\WINDOWS\SYSTEM32\MMDevAPI.DLL
Report ID: e2bccc73-42d1-412c-8e97-45c3e19e5303
Faulting package full name: Microsoft.WindowsTerminalPreview_1.10.1933.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App
```
Attaching a gif showing this happening, and what it looks like in the event viewer
",miniksa,Resolution-External;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Priority-1,2021-08-16T17:00:35Z,2021-08-26T21:36:07Z,comerford,comerford;zadjii-msft;shanselman;miniksa;DHowett;j4james,zadjii-msft,,,,miniksa,
microsoft/terminal,10974,"Windows Terminal Preview does not work with Visual Studio 2019. ### Windows Terminal version (or Windows build number)

1.10.1933.0

### Other Software

Microsoft Visual Studio Enterprise 2019 16.10.3

### Steps to reproduce

Create a new VS C++ Console project. 
![image](https://user-images.githubusercontent.com/44722363/129904100-b49b8090-afca-4ec1-a5e9-7b553704875e.png) Click the Local Windows Debugger Button.
![image](https://user-images.githubusercontent.com/44722363/129906620-543db5d5-4d5a-4e05-87a2-3e496cfbacfd.png)
Close the tab with the X.
![image](https://user-images.githubusercontent.com/44722363/129906717-f5578656-fe42-43b2-bd43-6244631bbe09.png)
Click the Local Windows Debugger Button again.
Then VS will show this message box.
![image](https://user-images.githubusercontent.com/44722363/129906834-0c2efc5f-80cf-43d8-864a-c7430b056e5d.png)
In the output field, it says.
瀹告煡閸戠尨绱濇潻鏂挎礀閸婇棿璐 -1073741502 (0xc0000142) 'DLL Initialization Failed'閵
If I click the Local Windows Debugger Button again, this message keeps showing.

### Expected Behavior

Normally run the app again.

### Actual Behavior

An alert message box was shown.",miniksa,Resolution-Fix-Available;Resolution-External;Issue-Bug;Product-Terminal;Priority-2;Area-DefApp,2021-08-18T13:33:07Z,2022-01-31T22:59:02Z,TomsProject,arsdever;Dimension4;egortech;zadjii-msft;deiruch;miniksa,zadjii-msft,DHowett,zadjii-msft,,zadjii-msft,
microsoft/terminal,11032,"Weird fonts on Windows Server 2022 ### Windows Terminal version (or Windows build number)

1.10.1933.0

### Other Software

Fresh install of Windows Server 2022 Evaluation, straight from https://www.microsoft.com/en-us/evalcenter/. Did not yet check for updates.

### Steps to reproduce

Install latest preview appxbundle using Add-AppxPackage.
Running Windows Server on VMWare Workstation 16.1.2 build-17966106.

### Expected Behavior

![Capture](https://user-images.githubusercontent.com/5386539/130711009-6386559b-4483-464b-b29a-cc1f7aa3e98f.PNG)

This is how cascadia code normally looks.

### Actual Behavior

This is what I got. Doesn't quite seem right.

![Capture-bad](https://user-images.githubusercontent.com/5386539/130711034-f689df41-172c-43c1-ae8c-3ade7a1e0649.PNG)
",DHowett;lhecker;miniksa,Resolution-Fix-Committed;Help Wanted;Area-Fonts;Issue-Bug;Product-Terminal;Priority-3;Culprit-Centennial,2021-08-25T01:26:36Z,2021-11-16T23:22:03Z,faxx1080,j4james;zadjii-msft;DHowett;rmbolger;ianjoneill;faxx1080;miniksa;fdwr,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11037,"move-pane -t (existing tab) now crashes This may have regressed with #10982 or other Pane changes, since I don't believe the original code from @Rosefield was broken.",zadjii-msft;Rosefield,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Severity-Blocking;Priority-1,2021-08-25T18:14:28Z,2021-08-25T21:50:25Z,DHowett,DHowett;Rosefield,DHowett;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,11055,"1.11: scrolling at all breaks the URL pattern buffer (no URLs work) ### Windows Terminal version (or Windows build number)

1.11

### Other Software

_No response_

### Steps to reproduce

Emit a URL
Scroll -- even downwards off the bottom of the screen where you can't scroll

### Expected Behavior

_No response_

### Actual Behavior

URLs stop hovering!",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Severity-Blocking,2021-08-26T16:24:25Z,2021-08-26T18:57:50Z,DHowett,zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,11067,"Color scheme preview via command palette and settings reload resets zoom level ### Windows Terminal version (or Windows build number)

Terminal 1.9.1942.0, Windows 10.0.19043.1165

### Other Software

_No response_

### Steps to reproduce

- Open Terminal
- Increase the font size with `Ctrl-+`
- Open the command palette with `Ctrl-Shift-P`
- Find ""Select color scheme"" and hit `Enter` to show the scheme list

As soon as the first color scheme is previewed, the zoom level is reset.

### Expected Behavior

I would expect the zoom level to be indipendent from color schemes. Previewing or applying a new scheme should not reduce or increase the font size.

### Actual Behavior

The color scheme preview affects the zoom level. Backing out of the menu will not revert this change.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Priority-3,2021-08-27T20:48:11Z,2021-12-01T19:33:53Z,fran-f,DHowett;fran-f;zadjii-msft,DHowett;zadjii-msft,DHowett;zadjii-msft,zadjii-msft,,,
microsoft/terminal,11076,"vkey assertion failure 2, with dragging tabs ### Windows Terminal version (or Windows build number)

dev/main @e4c5e8bd

### Other Software

_No response_

### Steps to reproduce

I am not able to trigger this consistently despite my best efforts, but it has happened 4 times so far when attempting to drag a tab the application crashes on a vkey || scanCode assertion. I have had this happen both on windows with only one tab, and windows with more than one tab. When it does happen it occurs pretty soon after the drag starts, not on drop. I don't believe there was any keypress besides a left mouse down, and attempting to mash my keyboard while dragging did not result in any crashes.

My settings are unchanged after the last fix, but just in case https://gist.github.com/Rosefield/789cc469f1b9e605ada014add66eed9d

This also happened on my save window layout branch, which was branched off of main from this commit: https://github.com/microsoft/terminal/commit/68294f863d2adfafd6937324486b499fea73b8ab but when it happened there it was the old assert removed in the last fix (https://github.com/microsoft/terminal/commit/70d44c84c84ec22f2c56fce72c617fea7f9816f4#diff-ac308dd6d23797c02f8be4591060500c2474856a7c3f483ac5cff219b3fc16a2L720)

### Expected Behavior

no crash

### Actual Behavior

Potentially 2 bugs

1. Assertion failure right after start drag on tab

![image](https://user-images.githubusercontent.com/6185249/131231416-cb6cd6d6-6d6c-4cf5-858a-05f25c5271f1.png)

stack trace in https://github.com/microsoft/terminal/issues/11076#issuecomment-907695937

<details>
<summary>2. I managed to get a stack trace once at least. although this doesn't seem to be the error I initially saw? Can trigger consistently by holding shift while dragging a tab.
</summary>

```
KernelBase.dll!00007ff81cbfbd3e()
combase.dll!00007ff81f07d76a()
Windows.UI.Xaml.dll!00007ff8057f01c2()
Windows.UI.Xaml.dll!00007ff8054a16e9()
Windows.UI.Xaml.dll!00007ff8054a370b()
Windows.UI.Xaml.dll!00007ff8054a35fc()
CoreMessaging.dll!00007ff819cd53db()
CoreMessaging.dll!00007ff819cfc85b()
CoreMessaging.dll!00007ff819cd996b()
CoreMessaging.dll!00007ff819cd8e26()
CoreMessaging.dll!00007ff819cd7061()
CoreMessaging.dll!00007ff819cd6e83()
user32.dll!00007ff81eaae858()
user32.dll!00007ff81eaae3dc()
user32.dll!00007ff81eac0bc3()
ntdll.dll!00007ff81f2d0c54()
win32u.dll!00007ff81cac1064()
user32.dll!00007ff81eaaa5c3()
user32.dll!00007ff81eaaa523()
combase.dll!00007ff81eeee71b()
combase.dll!00007ff81eeee685()
combase.dll!00007ff81eeecec1()
combase.dll!00007ff81eeecbbb()
combase.dll!00007ff81eec4956()
combase.dll!00007ff81eeed143()
combase.dll!00007ff81ef0099b()
combase.dll!00007ff81eeec494()
combase.dll!00007ff81ef3996e()
rpcrt4.dll!00007ff81d46fd84()
combase.dll!00007ff81ef35438()
combase.dll!00007ff81efab8e2()
DataExchange.dll!00007ffff5208d42()
Windows.UI.Xaml.dll!00007ff805ab5be9()
Windows.UI.Xaml.dll!00007ff805cbd6c4()
Microsoft.Terminal.Control.dll!winrt::impl::consume_Windows_UI_Xaml_IDragEventArgs2<winrt::Windows::UI::Xaml::DragEventArgs>::DataView() Line 1034
	at C:\Users\Schuyler\Desktop\Development\terminal\src\cascadia\TerminalControl\Generated Files\winrt\Windows.UI.Xaml.h(1034)
Microsoft.Terminal.Control.dll!winrt::Microsoft::Terminal::Control::implementation::TermControl::_DragOverHandler(const winrt::Windows::Foundation::IInspectable & __formal, const winrt::Windows::UI::Xaml::DragEventArgs & e) Line 2292
	at C:\Users\Schuyler\Desktop\Development\terminal\src\cascadia\TerminalControl\TermControl.cpp(2292)
[External Code]
Microsoft.Terminal.Control.dll!winrt::impl::delegate<winrt::Windows::UI::Xaml::DragEventHandler,void <lambda>(const winrt::Windows::Foundation::IInspectable &, const winrt::Windows::UI::Xaml::DragEventArgs &)>::Invoke(void * sender, void * e) Line 4616
	at C:\Users\Schuyler\Desktop\Development\terminal\src\cascadia\TerminalControl\Generated Files\winrt\Windows.UI.Xaml.h(4616)
[External Code]
WindowsTerminal.exe!wWinMain(HINSTANCE__ * __formal, HINSTANCE__ * __formal, wchar_t * __formal, int __formal) Line 201
	at C:\Users\Schuyler\Desktop\Development\terminal\src\cascadia\WindowsTerminal\main.cpp(201)
[External Code]
```
</details>",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal,2021-08-28T21:39:17Z,2021-09-22T19:39:35Z,Rosefield,lhecker;Rosefield,lhecker,,lhecker,,,
microsoft/terminal,11119,"Profiles missing after resetting config ### Windows Terminal version (or Windows build number)

1.10.2383.0

### Other Software

_No response_

### Steps to reproduce

1. have terminal ver 1.9 with default profiles including powershell/WSL/Azure shell
2. upgrade to v1.10
3. open settings.json
4. delete contents of file and save
5. reload terminal

as per notes at top of config file, i wanted to ensure that i had any new defaults now that v1.10 has been released
  ""..It should still be usable in newer versions, but newer versions might have additional
  settings, help text, or changes that you will not see unless you clear this file
  and let us generate a new one for you.""


### Expected Behavior

expected that all default profiles get regenerated

### Actual Behavior

only ""windows powershell"" and ""Command prompt"" appear. 

Also note that terminal did infact launch ""powershell"" (v7.1.4) and had an empty dropdown in the ""default profile"" box in settings as what was launched did not have any profile.

I had to reset the app to restore all my profiles",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Product-Terminal,2021-09-02T08:38:59Z,2021-10-11T15:51:48Z,ktremain,zadjii-msft;lhecker;carlos-zamora,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,11135,"Terminal hangs when opening new windows or new tabs on Windows Server 2022 After installing either Terminal 1.10 or Terminal Preview 1.11 (after its dependencies and winget), opening it the first time (or subsequent times) causes the window to hang indefinitely (the process shows as 'Not Responding' in Task Manager).  A similar problem happens when clicking the + to open a new tab.

The problem happens regardless if the default terminal is either Powershell or others (like Command Prompt).

A partial workaround is to launch a second copy of the app while the instance is hung, then use Task Manager to kill the hung app.  Once the hung process closes, the application opens as expected.  The workaround does not address the new tab problem, but just the initial window opening.

If there is any logging or debug that can be enabled, please let me know.
",carlos-zamora;miniksa,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Severity-Blocking;Priority-0,2021-09-03T17:43:09Z,2021-09-23T22:14:04Z,wkbrd,zadjii-msft;wkbrd;Falco20019;Sankgreall;frugecn;miniksa;negf,zadjii-msft,zadjii-msft,,,carlos-zamora,
microsoft/terminal,11155,"[Settings]: The Name property of a focusable element must not be null. ### Windows Terminal version (or Windows build number)

1.10.2383.0

### Other Software

**Test Environment:**
OS: Windows 11 Version 21H2 (OS Build 22000.168)
Screen Reader: Narrator
Tool: Accessibility Insights for Windows Version 1.1.1689.01

### Steps to reproduce

**Repro Steps:**
1. Open Windows Terminal.
2. Open Settings page using ""Ctrl + ',' "".
3. Run Accessibility insights for Window on Settings 'Startup', 'General', 'Appearance' and 'Advance' tab page and observe the issue for Columns, Rows, Command line, Starting directory, Icon, Font face and Font size controls

**User Experience: -> Priority 1**
Screen Reader user are impacted here as name is announced for control as result, they will not be able to know the purpose of control.

**Guideline Reference:**
https://www.w3.org/WAI/WCAG21/Understanding/name-role-value

**Attachments:**
[The Name property of a focusable element must not be null..zip](https://github.com/microsoft/terminal/files/7119989/The.Name.property.of.a.focusable.element.must.not.be.null.zip)



### Expected Behavior

The Name property of a focusable element must not be null.

### Actual Behavior

The Name property of a Columns, Rows, Command line, Starting directory, Icon, Font face, Font size and History size focusable element must not be null.",zadjii-msft,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;In-PR;Priority-1;HCL-E+D;Area-Settings UI;A11yWCAG;HCL-WindowsTerminal;A11ySev1,2021-09-06T11:23:33Z,2021-12-21T06:11:49Z,v-rpundir,zadjii-msft;v-rpundir;DHowett,zadjii-msft;Priyanka-Chauhan123,DHowett,zadjii-msft,,v-rpundir,microsoft/terminal#11996;
microsoft/terminal,11170,"TermControl does not receive enough `_CursorPositionChanged` events ### Windows Terminal version (or Windows build number)

1.12

### Other Software

_No response_

### Steps to reproduce

1. Start Terminal in debug mode
2. Set a breakpoint at `TermControl::_CursorPositionChanged`
3. Enter some input (without any newlines)

### Expected Behavior

The breakpoint at `TermControl::_CursorPositionChanged` should get hit

### Actual Behavior

The breakpoint does not get hit, it only gets hit when the input contains a newline",zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Product-Terminal;zStable-Service-Queued-1.12;zPreview-Service-Queued-1.13,2021-09-07T18:50:55Z,2022-01-25T18:49:14Z,PankajBhojwani,PankajBhojwani;DHowett;zadjii-msft,PankajBhojwani;zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,11172,"New Tab Profile Index 0, 1 doesn't work ### Windows Terminal version (or Windows build number)

1.10.2383.0

### Other Software

_No response_

### Steps to reproduce

Open Windows Terminal
Press Ctrl Shift 1 or Ctrl Shift 2

### Expected Behavior

Ctrl Shift 1 -> Power Shell Tab
Ctrl Shift 2 -> Command Prompt Tab


### Actual Behavior

These two shortcuts do not work. 
Ctrl Shift 3/4/5/6/7/8/9 work as intended. ",lhecker,Issue-Bug;Needs-Author-Feedback;Needs-Triage;No-Recent-Activity;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2021-09-07T21:50:12Z,2021-09-27T19:01:01Z,i-zanis,zadjii-msft;elsaco;i-zanis;lhecker,zadjii-msft,zadjii-msft,lhecker,,,
microsoft/terminal,1119,"Bug: ctrl+break is not ctrl+c # Steps to reproduce

1. open windows terminal for cmd.exe
1. execute command `ping 8.8.8.8 -t`
1. press `ctrl`+`break`

# Expected behavior

windows terminal show ctrl+break

# Actual behavior

windows terminal show ctrl+c
",zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Product-Terminal;Priority-2,2019-06-03T14:57:16Z,2020-06-08T22:31:29Z,Cologler,Cologler;MrAusnadian;szalapski;int19h;zadjii-msft;lempax,DHowett-MSFT;cinnamon-msft,DHowett-MSFT;cinnamon-msft,zadjii-msft,zadjii-msft,,
microsoft/terminal,11197,"Incorrect contextual menu text (as if you had the Preview version installed) in Spanish. ### Windows Terminal version (or Windows build number)

1.10.2383.0

### Other Software

_No response_

### Steps to reproduce

Right click on the desktop.

### Expected Behavior

_No response_

### Actual Behavior

I have installed the Windows Terminal (No Preview), Embark the text of the contextual menu when the system has the SPANISH LANGUAGE Set out: ""Abrir en Terminal Windows en vista previa"".

But when I change the language of my system to English, it comes out correctly: ""Open in Windows Terminal""

- When my language is in Spanish.
![](https://i.imgur.com/ZPfhP3h.png)

- When my language is in English.
![](https://i.imgur.com/gdgegQT.png)

",lhecker,Resolution-Fix-Available;Issue-Bug;Product-Terminal;Priority-3;Area-Localization;Area-ShellExtension,2021-09-10T22:16:39Z,2022-07-22T15:09:56Z,franzarmas,zadjii-msft;lhecker;rubenalamina,zadjii-msft;lhecker,DHowett;lhecker,lhecker,,zadjii-msft,
microsoft/terminal,11210,"Wrong pt-Br translation to ""Close Tab"" ### Windows Terminal version (or Windows build number)

 1.10.2383.0

### Other Software

_No response_

### Steps to reproduce

Right click on a tab

### Expected Behavior

A better translation would be ""Fechar guia""
Resource Key:  `TabClose` from `cascadia/TerminalApp`

That same phrase in ""actions"" in the settings menu was correctly translated to 'Fechar guia' (key `CloseTabCommandKey` from `cascadia/TerminalSettingsModel`)

![image](https://user-images.githubusercontent.com/30511004/133035663-6acf88dc-3d18-40a9-bef4-25371da51637.png)


### Actual Behavior

![image](https://user-images.githubusercontent.com/30511004/133032986-913b06f9-0d32-4a21-b554-236ee23af8d3.png)
""Close Tab"" was translated ""Aba Fechada""
The options in this menu ""Tab"" was translated to ""Guia"", but only in the last one was translated to ""Aba"", which is inconsistent. And ""Fechada"" is something that has already closed.",lhecker,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Tracking-External;Area-Localization,2021-09-13T06:47:46Z,2022-02-18T13:21:53Z,RodrigoJuliano,zadjii-msft;RodrigoJuliano;fitojb;AdrianoCahete;lhecker,zadjii-msft;lhecker;DHowett,DHowett,lhecker,,lhecker,
microsoft/terminal,11215,"Mysterious hang in Monarch::_getMostRecentPeasantID version **1.12.2521.0**. 
Unsure how I got into this state. Probably 
* open windows 1, 2, 3. 1 is not the MRU window.
* Close 2 and 3. 
* Try `globalSummon` the window. Terminal is in an infinite loop now inside `Monarch::_getMostRecentPeasantID`

but my repo's in the middle of a weird merge ATM so I can't verify on `main`

The symbols for this build don't include accurate source info, or at least my windbg is fucky. But what seems to be happening is `_getMostRecentPeasantID` is in the `while (_mruPeasants.cbegin() + positionInList < _mruPeasants.cend())` loop. We're looking for ID=3, which we don't find in the list of peasants, so `_getPeasant` ends up returning null. We determine that we _should_ have cleaned out that peasant ID from the MRU entries at that point, so we try again. However, we didn't. The MRU list still contains 3 at index 0, so we go looking for it again.

`auto maybeThePeasant = peasantSearch == _peasants.end() ? nullptr : peasantSearch->second;` in `Monarch::_getPeasant` ends up setting `maybeThePeasant` to `null`, which we then happily return (without cleaning up any MRU entries for it).


absolutely baseless list of possible commits to investigate:
* #11143
* #11043
* #10972

I did not have the tray icon enabled.

Filing on myself so I don't lose this, but I don't think I'm getting anything more out of this debugger

There's no valuable logs other than a million `Monarch_Collect_WasDead(Id=3, Desktop={guid})`",Rosefield,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Priority-1;Area-Remoting,2021-09-13T17:34:12Z,2021-09-14T14:53:14Z,zadjii-msft,zadjii-msft;Rosefield,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11256,"Rendering Slowness when Terminal is active window and hardware rendering is used ### Windows Terminal version (or Windows build number)

22458.1000, 1.11.2421.0

### Other Software

_No response_

### Steps to reproduce

Open the Windows Terminal, move mouse around or drag the window around.

### Expected Behavior

Expected behavior is that both the mouse cursor and dragging the terminal window is as smooth as other open windows.

### Actual Behavior

Terminal rendering performance is slow. When Terminal is the active window, my mouse cursor appears to stutter when moving it. When I select any other active window, everything moves smoothly as expected. This also manifests when the terminal is dragged around via its title bar.

This does not occur when Software Rendering is enabled. To make some basics easier, I've included my msinfo32 info to help show what kind of system I've got.

I'm running 2x 4K screens. One is 120Hz, the other is 60Hz. I've attempted to drop the 120Hz to 60Hz to see if maybe the refresh mismatch on the dual monitors was the issue--that didn't fix it. This occurred on the public released Nvidia drivers as well, and is not limited to the current beta 510 series driver.


[msinfo32.txt](https://github.com/microsoft/terminal/files/7183236/msinfo32.txt)
",miniksa,Resolution-Duplicate;Area-Rendering;Issue-Bug;Product-Terminal,2021-09-17T06:47:32Z,2021-09-17T16:15:00Z,miketheitguy,miketheitguy;dougestey;miniksa,miniksa,miniksa,miniksa,,miniksa,
microsoft/terminal,1126,"Copying text from the command window behaves differently than previous versions Ported from internal bug
>When I select some text from a window using Vim.exe and paste to another window, the text is badly formatted.
>Also, if double-click text from a command window, it copies/pastes the extra white-space at the end which was not the case in earlier releases.
>I also see the problem when copy/pasting to an excel spreadsheel

Tried to repro: space bug does not repro, vim bug does since 19H1",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Area-Interaction;Issue-Bug;Priority-2,2019-06-03T21:06:49Z,2019-10-01T01:16:31Z,DHowett-MSFT,DHowett-MSFT;JeremyTBradshaw;nyuszika7h,DHowett-MSFT,DHowett-MSFT;carlos-zamora,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,11278,"Japanese Localization issue in Font face, Appearance ### Windows Terminal version (or Windows build number)

1.10.2383.0

### Other Software

_No response_

### Steps to reproduce

1. Change to Japanese
2. Open Font face on Appearance

### Expected Behavior

_No response_

### Actual Behavior

娴犻幆 (original: Thin) means virtual.
Normal and Medium are same text (娑).
姒 (Black) means black of color, not weight.

![Japanese](https://user-images.githubusercontent.com/77012577/133938717-1600af6e-164f-4166-bb06-8c2965807b2b.PNG)
![English](https://user-images.githubusercontent.com/77012577/133938719-4ecff905-2a49-4d4f-9f32-ad9bd0091b54.PNG)
",lhecker,Issue-Bug;Needs-Triage;Product-Terminal;Priority-3;Tracking-External;Area-Localization,2021-09-19T18:35:08Z,2022-02-18T13:21:12Z,akihironagai,zadjii-msft;lhecker,zadjii-msft,,lhecker,,lhecker,
microsoft/terminal,11285,"[1.12] Ctrl+Shift+Wheel no longer works on Windows 10 This is because we now prefer vintage opacity.

Regressed in #11180.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Severity-Blocking;Priority-2,2021-09-20T18:23:27Z,2021-10-07T11:39:21Z,DHowett,,DHowett;zadjii-msft,zadjii-msft,DHowett,,,
microsoft/terminal,11287,"Font Features is inconsistent ### Windows Terminal version (or Windows build number)

10.0.19043.1237, 1.11.2421.0

### Other Software

_No response_

### Steps to reproduce

I'm using the Nerd-Font port of FiraCode as my font for Windows Terminal. Using the new Font Features options, I've configured WT to use the alternate zero glyph which replaces the slash in the middle of the character with a dot. There have been a couple instances in which I've launched a terminal only for the zero glyph to have reverted back to the old style, though launching a new terminal does fix the issue.

Here is my settings config:
```
""font"": 
{
  ""face"": ""FiraCode NF"",
  ""features"": 
  {
    ""calt"": 0,
    ""ss04"": 1,
    ""zero"": 1
  },
  ""size"": 12
},
```

~~I think I've found a way to reproduce this. It seems like it happens when you first launch windows terminal from a full restart.~~
Ignore that last one, it doesn't happen all the time. I can trigger the effect by dragging my window from a display at 100% scaling to one with 125% scaling.

### Expected Behavior

The font should display with the correct `0` symbol

### Actual Behavior

The zero symbol is incorrect.",PankajBhojwani,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-3,2021-09-20T20:26:45Z,2022-02-16T00:07:45Z,Nosamdaman,Nosamdaman;DHowett,zadjii-msft;DHowett,DHowett,PankajBhojwani,,,
microsoft/terminal,11294,"MUX 2.7: TerminalTab tabs don't respond to clicks on background (WHAT)

I noticed that I couldn't click on my PowerShell tab as effectively as I used to, and it looked like I had to mouse over the text or the icon.

I was about to file a bug upstream, but then this GIF showed that the settings tab _does_ respond to clicks on the background. 

![wt-1 12-bug-tab-view](https://user-images.githubusercontent.com/189190/134203090-58619caa-0337-422e-9eea-bbd7d565620d.gif)

Perhaps there's something about how we're setting the background?

",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Needs-Triage;Product-Terminal;Severity-Blocking,2021-09-21T15:44:57Z,2021-09-29T21:57:58Z,DHowett,serd2011;DHowett;ghost;zadjii-msft,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11317,"Text display area does not scale correctly ### Windows Terminal version (or Windows build number)

Windows Terminal version 1.10.2383.0

### Other Software

_No response_

### Steps to reproduce

1. Open Windows terminal (spawns on primary/1080p monitor)
2. Execute commands till text reaches the bottom of the window
3. Move window to secondary monitor (4k, 125% scaling)
4. Text at bottom and right is cut off, and scrolling does not update the bottom of the window
5. Input is also cut off at the bottom, so I can't see what I'm typing

### Expected Behavior

The text display area should scale correctly 

### Actual Behavior

Window on 1080p monitor:
![image](https://user-images.githubusercontent.com/22267435/134522778-3e56b99c-2a47-4b93-b7a0-3b892d28db36.png)

Window on 4k monitor:
![image](https://user-images.githubusercontent.com/22267435/134522820-7496b03d-42c7-4e86-a1d2-93cfefdaca12.png)

Scrolling also seems to only affect the top 3 lines while on the 4k display?
![image](https://user-images.githubusercontent.com/22267435/134523101-64418b9b-7cc0-46ec-af7a-5d861622806c.png)

And there's also something about cutting off the output of commands above the fold, which seems to apply regardless of monitor:
![image](https://user-images.githubusercontent.com/22267435/134523538-a066b8b4-9dda-486e-8789-94eb5d2217f8.png)




I also just accidentally discovered that resizing the window fixes both the text display area and the scrolling issue on the 4k monitor",lhecker,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1;zAskModeBug,2021-09-23T14:18:49Z,2022-03-24T17:56:12Z,zdavidsen,zadjii-msft;flcdrg;lhecker;oising;zdavidsen;itsamemarkus,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,11323,"Fragments cause the error 'Found multiple profiles with the same GUID in your settings file' ### Windows Terminal version (or Windows build number)

Current main build

### Other Software

_No response_

### Steps to reproduce

1. Put a json fragment that creates a new profile in `AppData\Local\Microsoft\Windows Terminal\Fragments\{any-name-here}`
2. Start WT (check dropdown to make sure the fragment profile is there for sanity)
3. Close WT
4. Start WT again

### Expected Behavior

No error 

### Actual Behavior

1. Receive the error: `Found multiple profiles with the same GUID in your settings file - ignoring duplicates. Make sure each profile's GUID is unique.`
2. Added profile is no longer in the dropdown

",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Product-Terminal,2021-09-23T18:23:47Z,2021-09-24T16:21:28Z,PankajBhojwani,,PankajBhojwani,,lhecker,,,
microsoft/terminal,11330,"One broken stub in a fragment file causes the whole file to not load ### Windows Terminal version (or Windows build number)

Current main build

### Other Software

_No response_

### Steps to reproduce

Put the following fragment file in `AppData\Local\Microsoft\Windows Terminal\Fragments\{any-name-here}`:

```
{
  ""profiles"": [
    {
      ""name"": ""broken profile"",
      ""font"": ""thisFontDoesntExist""
    },
    {
      ""name"": ""Cool Profile""
    }
  ]
}
```

Then start WT

### Expected Behavior

""Cool Profile"" should show up in the dropdown

### Actual Behavior

""Cool Profile"" does not show up, the presence of the broken profile causes the non-broken profile to not load",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2021-09-24T21:24:38Z,2021-10-01T22:54:23Z,PankajBhojwani,lhecker;PankajBhojwani,PankajBhojwani;lhecker,zadjii-msft;lhecker,lhecker,,,
microsoft/terminal,11331,"Fragments that update profiles don't work ### Windows Terminal version (or Windows build number)

Current main build

### Other Software

_No response_

### Steps to reproduce

1. Have a fragment that updates an existing profile in `AppData\Local\Microsoft\Windows Terminal\Fragments\{any-name-here}`
2. Start WT, open the updated profile

### Expected Behavior

The profile should have the updated settings

### Actual Behavior

The profile does not have the updated settings",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2021-09-24T21:28:25Z,2021-09-27T17:09:53Z,PankajBhojwani,,PankajBhojwani,zadjii-msft,lhecker,,,
microsoft/terminal,11339,"Multiple failing unit tests ### Windows Terminal version (or Windows build number)

10.0.18363.1500, Commit 2be394f421b9b23a15e5573fb02b9c7a25768941

### Other Software

_No response_

### Steps to reproduce

1. Checkout a recent version of the Terminal.
2. Build the code.
3. Execute `runut` in the tools directory.


### Expected Behavior

The unit tests should all pass.

### Actual Behavior

I'm getting quite a lot of failures.

    TerminalAppLocalTests::CommandlineTest::ParseFocusTabArgs#metadataSet0 [Failed]
    TerminalAppLocalTests::CommandlineTest::ParseFocusTabArgs#metadataSet1 [Failed]
    TerminalAppLocalTests::SettingsTests::TestIterateCommands [Failed]
    TerminalAppLocalTests::SettingsTests::TestIterateOnGeneratedNamedCommands [Failed]
    TerminalAppLocalTests::SettingsTests::TestIterateOnBadJson [Failed]
    TerminalAppLocalTests::SettingsTests::TestNestedCommands [Failed]
    TerminalAppLocalTests::SettingsTests::TestNestedInNestedCommand [Failed]
    TerminalAppLocalTests::SettingsTests::TestNestedInIterableCommand [Failed]
    TerminalAppLocalTests::SettingsTests::TestIterableInNestedCommand [Failed]
    TerminalAppLocalTests::SettingsTests::TestMixedNestedAndIterableCommand [Failed]
    TerminalAppLocalTests::SettingsTests::TestIterableColorSchemeCommands [Failed]
    TerminalAppLocalTests::TabTests::MoveFocusFromZoomedPane [Failed]
    SettingsModelLocalTests::ProfileTests::TestGenGuidsForProfiles [Failed]
    SettingsModelLocalTests::DeserializationTests::TestLayerUserDefaultsOnDynamics [Failed]
    SettingsModelLocalTests::SerializationTests::Profile [Failed]

I haven't actually looked to see what's going wrong, so it's possible it's just me.",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Product-Meta,2021-09-26T17:36:37Z,2021-10-05T18:21:04Z,j4james,zadjii-msft;lhecker;Rosefield,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11367,"The titlebar is visible when using vintage opacity with a HIGH DPI display _discovered in the 1.12 bug bash on 9/28_


![image](https://user-images.githubusercontent.com/18356694/135273925-4fea4eb4-d3b0-40df-943d-f7988ead0d10.png)

regressed in #11180 ",carlos-zamora,Resolution-Fix-Committed;Needs-Repro;Issue-Bug;Needs-Triage;Product-Terminal;Severity-Blocking;Priority-3;Area-Windowing,2021-09-29T13:06:47Z,2021-10-06T11:34:53Z,zadjii-msft,zadjii-msft;carlos-zamora,zadjii-msft,,zadjii-msft,zadjii-msft,,
microsoft/terminal,11385,"Open narrator, select some text in the Terminal ---> experience a hang as in title. 1.12.whatever-the-selfhost-build-is

no repro on 1.10.2383.0
Repro on 1.12.2712.0

Other than the like 80 nvidia threads:

```
0:209> ~*k

   0  Id: c528.7b5c Suspend: 1 Teb: 000000b4`cbaa8000 Unfrozen
 # Child-SP          RetAddr               Call Site
00 000000b4`cb97d988 00007ffe`43ece753     ntdll!ZwWaitForAlertByThreadId+0x14 [minkernel\ntdll\daytona\objfre\amd64\usrstubs.asm @ 4051] 
01 000000b4`cb97d990 00007ffe`43ece8a0     ntdll!RtlpWaitOnAddressWithTimeout+0x9f [minkernel\ntos\rtl\waitaddr.c @ 851] 
02 000000b4`cb97d9c0 00007ffe`43ecd733     ntdll!RtlpWaitOnAddress+0xd8 [minkernel\ntos\rtl\waitaddr.c @ 1094] 
03 000000b4`cb97da30 00007ffe`4137503f     ntdll!RtlWaitOnAddress+0x13 [minkernel\ntos\rtl\waitaddr.c @ 946] 
04 000000b4`cb97da70 00007ffd`7a49d12a     KERNELBASE!WaitOnAddress+0x2f [minkernel\kernelbase\synch.c @ 2258] 
05 000000b4`cb97dab0 00007ffd`7a4a35a0     Microsoft_Terminal_Control!til::atomic_wait<unsigned int>+0x3a [D:\dev\public\terminal\src\inc\til\atomic.h @ 14] 
06 000000b4`cb97dae0 00007ffd`7a4a40d9     Microsoft_Terminal_Control!til::ticket_lock::lock+0xb0 [D:\dev\public\terminal\src\inc\til\ticket_lock.h @ 35] 
07 000000b4`cb97db60 00007ffd`7a377804     Microsoft_Terminal_Control!Microsoft::Terminal::Core::Terminal::LockConsole+0x29 [D:\dev\public\terminal\src\cascadia\TerminalCore\TerminalRenderData.cpp @ 236] 
08 000000b4`cb97db90 00007ffd`7a371da0     Microsoft_Terminal_Control!Microsoft::Terminal::TermControlUiaProvider::GetSelectionRange+0x104 [D:\dev\public\terminal\src\types\TermControlUiaProvider.cpp @ 118] 
09 000000b4`cb97dd30 00007ffd`7a299bed     Microsoft_Terminal_Control!Microsoft::Console::Types::ScreenInfoUiaProviderBase::GetSelection+0x540 [D:\dev\public\terminal\src\types\ScreenInfoUiaProviderBase.cpp @ 247] 
0a 000000b4`cb97df30 00007ffd`7a2aaf25     Microsoft_Terminal_Control!winrt::Microsoft::Terminal::Control::implementation::InteractivityAutomationPeer::GetSelection+0x9d [D:\dev\public\terminal\src\cascadia\TerminalControl\InteractivityAutomationPeer.cpp @ 96] 
0b 000000b4`cb97dfc0 00007ffd`7a2e57d0     Microsoft_Terminal_Control!winrt::impl::produce<winrt::Microsoft::Terminal::Control::implementation::InteractivityAutomationPeer,winrt::Windows::UI::Xaml::Automation::Provider::ITextProvider>::GetSelection+0xa5 [D:\dev\public\terminal\src\cascadia\TerminalControl\Generated Files\winrt\Windows.UI.Xaml.Automation.Provider.h @ 1471] 
0c 000000b4`cb97e080 00007ffd`7a2dd540     Microsoft_Terminal_Control!winrt::impl::consume_Windows_UI_Xaml_Automation_Provider_ITextProvider<winrt::Microsoft::Terminal::Control::InteractivityAutomationPeer>::GetSelection+0xc0 [D:\dev\public\terminal\src\cascadia\TerminalControl\Generated Files\winrt\Windows.UI.Xaml.Automation.Provider.h @ 486] 
0d 000000b4`cb97e130 00007ffd`7a2e5905     Microsoft_Terminal_Control!winrt::Microsoft::Terminal::Control::implementation::TermControlAutomationPeer::GetSelection+0x40 [D:\dev\public\terminal\src\cascadia\TerminalControl\TermControlAutomationPeer.cpp @ 200] 
0e 000000b4`cb97e170 00007ffe`155b563e     Microsoft_Terminal_Control!winrt::impl::produce<winrt::Microsoft::Terminal::Control::implementation::TermControlAutomationPeer,winrt::Windows::UI::Xaml::Automation::Provider::ITextProvider>::GetSelection+0xa5 [D:\dev\public\terminal\src\cascadia\TerminalControl\Generated Files\winrt\Windows.UI.Xaml.Automation.Provider.h @ 1471] 
0f 000000b4`cb97e230 00007ffe`15b65658     Windows_UI_Xaml!DirectUI::AutomationPeer::UIAPatternInvoke+0x2942 [onecoreuap\windows\dxaml\xcp\dxaml\lib\automationpeer_partial.cpp @ 3102] 
10 (Inline Function) --------`--------     Windows_UI_Xaml!CFxCallbacks::AutomationPeer_UIAPatternInvoke+0x33 [onecoreuap\windows\dxaml\xcp\dxaml\lib\fxcallbacks.cpp @ 1250] 
11 000000b4`cb97e4e0 00007ffe`15c9b570     Windows_UI_Xaml!CManagedTextProvider::GetSelection+0x58 [onecoreuap\windows\dxaml\xcp\core\core\elements\uiapatternprovider.cpp @ 1251] 
12 000000b4`cb97e560 00007ffe`15c9b297     Windows_UI_Xaml!CUIATextProviderWrapper::GetSelectionImpl+0x58 [onecoreuap\windows\dxaml\xcp\win\shared\uiapatternproviderwrapper.cpp @ 3846] 
13 000000b4`cb97e590 00007ffe`13f84d0d     Windows_UI_Xaml!CUIATextProviderWrapper::GetSelection+0x57 [onecoreuap\windows\dxaml\xcp\win\shared\uiapatternproviderwrapper.cpp @ 3793] 
14 000000b4`cb97e610 00007ffe`13f51027     uiautomationcore!ProviderCallouts::GetSelection+0x49 [onecore\windows\accessibletech\uiautomationcore\ProviderCallouts.h @ 1236] 
15 000000b4`cb97e650 00007ffe`13ef6ab6     uiautomationcore!RemotePatternStub::Text_GetSelection+0x67 [onecore\windows\accessibletech\uiautomationcore\remotepatternstub.cpp @ 836] 
16 000000b4`cb97e690 00007ffe`13ef5563     uiautomationcore!RemotePatternStub::OnMessage+0x66 [onecore\windows\accessibletech\uiautomationcore\remotepatternstub.cpp @ 125] 
17 000000b4`cb97e6e0 00007ffe`2bd3144a     uiautomationcore!InvokePatternMethodOnCorrectContext_Callback+0xe3 [onecore\windows\accessibletech\uiautomationcore\serverconnection.cpp @ 1762] 
18 (Inline Function) --------`--------     OneCoreCommonProxyStub!IServiceProvider_QueryService_Stub+0x1e [onecore\merged\commonproxystub\dll\call_as.c @ 25] 
19 000000b4`cb97e760 00007ffe`41eea68e     OneCoreCommonProxyStub!IServiceProvider_RemoteQueryService_Thunk+0x3a [onecore\inetcore\published\sdk\inc\objfre\amd64\servprov_p.c @ 175] 
1a 000000b4`cb97e7a0 00007ffe`41e29192     RPCRT4!Ndr64StubWorker+0xd0e [minio\rpc\ndr64\srvcall.cxx @ 353] 
1b 000000b4`cb97ee50 00007ffe`433df47a     RPCRT4!NdrStubCall3+0xd2 [minio\rpc\ndr64\srvwrap.cxx @ 166] 
1c 000000b4`cb97eeb0 00007ffe`41e66d55     combase!CStdStubBuffer_Invoke+0xca [onecore\com\combase\ndr\ndrole\stub.cxx @ 1583] 
1d 000000b4`cb97eef0 00007ffe`433aa27d     RPCRT4!CStdStubBuffer_Invoke+0x45 [minio\rpc\ndr20\ndrfwds.cxx @ 182] 
1e (Inline Function) --------`--------     combase!InvokeStubWithExceptionPolicyAndTracing::__l6::<lambda_c9f3956a20c9da92a64affc24fdd69ec>::operator()+0x22 [onecore\com\combase\dcomrem\channelb.cxx @ 1160] 
1f 000000b4`cb97ef20 00007ffe`433aa017     combase!ObjectMethodExceptionHandlingAction<<lambda_c9f3956a20c9da92a64affc24fdd69ec> >+0x4d [onecore\com\combase\dcomrem\excepn.hxx @ 94] 
20 (Inline Function) --------`--------     combase!InvokeStubWithExceptionPolicyAndTracing+0xda [onecore\com\combase\dcomrem\channelb.cxx @ 1158] 
21 000000b4`cb97ef80 00007ffe`433e1978     combase!DefaultStubInvoke+0x257 [onecore\com\combase\dcomrem\channelb.cxx @ 1227] 
22 000000b4`cb97f0d0 00007ffe`4337877b     combase!SyncServerCall::StubInvoke+0x38 [onecore\com\combase\dcomrem\ServerCall.hpp @ 799] 
23 (Inline Function) --------`--------     combase!StubInvoke+0x2d8 [onecore\com\combase\dcomrem\channelb.cxx @ 1509] 
24 000000b4`cb97f110 00007ffe`4339c3bf     combase!ServerCall::ContextInvoke+0x46b [onecore\com\combase\dcomrem\ctxchnl.cxx @ 1425] 
25 (Inline Function) --------`--------     combase!CServerChannel::ContextInvoke+0x16b [onecore\com\combase\dcomrem\ctxchnl.cxx @ 1332] 
26 (Inline Function) --------`--------     combase!DefaultInvokeInApartment+0x16b [onecore\com\combase\dcomrem\callctrl.cxx @ 3297] 
27 000000b4`cb97f3f0 00007ffe`4336e114     combase!ReentrantSTAInvokeInApartment+0x1df [onecore\com\combase\dcomrem\reentrantsta.cpp @ 113] 
28 000000b4`cb97f470 00007ffe`4334634c     combase!ComInvokeWithLockAndIPID+0xa14 [onecore\com\combase\dcomrem\channelb.cxx @ 2246] 
29 000000b4`cb97f750 00007ffe`43344be9     combase!ThreadDispatch+0x43c [onecore\com\combase\dcomrem\channelb.cxx @ 1668] 
2a 000000b4`cb97f870 00007ffe`437e9b48     combase!ThreadWndProc+0x109 [onecore\com\combase\dcomrem\chancont.cxx @ 720] 
2b 000000b4`cb97f8e0 00007ffe`437e8299     user32!UserCallWinProcCheckWow+0x338 [clientcore\windows\core\ntuser\client\clmsg.cxx @ 282] 
2c 000000b4`cb97fa50 00007ff6`f652fb9f     user32!DispatchMessageWorker+0x1c9 [clientcore\windows\core\ntuser\client\clmsg.cxx @ 3167] 
2d 000000b4`cb97fad0 00007ff6`f6633d72     WindowsTerminal!wWinMain+0x25f [D:\dev\public\terminal\src\cascadia\WindowsTerminal\main.cpp @ 198] 
2e 000000b4`cb97fc90 00007ff6`f6633c9e     WindowsTerminal!invoke_main+0x32 [d:\a01\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 123] 
2f 000000b4`cb97fcd0 00007ff6`f6633b5e     WindowsTerminal!__scrt_common_main_seh+0x12e [d:\a01\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 288] 
30 000000b4`cb97fd40 00007ff6`f6633dee     WindowsTerminal!__scrt_common_main+0xe [d:\a01\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 331] 
31 000000b4`cb97fd70 00007ffe`42e86ab0     WindowsTerminal!wWinMainCRTStartup+0xe [d:\a01\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_wwinmain.cpp @ 17] 
32 000000b4`cb97fda0 00007ffe`43edc44b     KERNEL32!BaseThreadInitThunk+0x10 [clientcore\base\win32\client\thread.c @ 75] 
33 000000b4`cb97fdd0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\ntdll\rtlstrt.c @ 1152] 

   1  Id: c528.922c Suspend: 1 Teb: 000000b4`cbaac000 Unfrozen
 # Child-SP          RetAddr               Call Site
00 000000b4`cbdffb28 00007ffe`43ed79ef     ntdll!ZwWaitForWorkViaWorkerFactory+0x14 [minkernel\ntdll\daytona\objfre\amd64\usrstubs.asm @ 4075] 
01 000000b4`cbdffb30 00007ffe`42e86ab0     ntdll!TppWorkerThread+0x2df [minkernel\threadpool\ntdll\worker.c @ 910] 
02 000000b4`cbdffe20 00007ffe`43edc44b     KERNEL32!BaseThreadInitThunk+0x10 [clientcore\base\win32\client\thread.c @ 75] 
03 000000b4`cbdffe50 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\ntdll\rtlstrt.c @ 1152] 

   2  Id: c528.97a8 Suspend: 1 Teb: 000000b4`cbab0000 Unfrozen
 # Child-SP          RetAddr               Call Site
00 000000b4`cbffe6e8 00007ffe`4133590e     ntdll!ZwWaitForSingleObject+0x14 [minkernel\ntdll\daytona\objfre\amd64\usrstubs.asm @ 251] 
01 000000b4`cbffe6f0 00007ffd`a053408d     KERNELBASE!WaitForSingleObjectEx+0x8e [minkernel\kernelbase\synch.c @ 1328] 
02 000000b4`cbffe790 00007ffd`a053412c     Microsoft_Terminal_Remoting!winrt::impl::wait_for_completed<winrt::Windows::Foundation::IAsyncOperation<winrt::hstring> >+0xed [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Windows.Foundation.h @ 3294] 
03 000000b4`cbffe820 00007ffd`a053fa32     Microsoft_Terminal_Remoting!winrt::impl::wait_get<winrt::Windows::Foundation::IAsyncOperation<winrt::hstring> >+0x4c [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Windows.Foundation.h @ 3322] 
04 000000b4`cbffe860 00007ffd`a052dff5     Microsoft_Terminal_Remoting!winrt::impl::consume_Windows_Foundation_IAsyncOperation<winrt::Windows::Foundation::IAsyncOperation<winrt::hstring>,winrt::hstring>::get+0x32 [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Windows.Foundation.h @ 3425] 
05 000000b4`cbffe8a0 00007ffd`a0539fb4     Microsoft_Terminal_Remoting!winrt::Microsoft::Terminal::Remoting::implementation::Peasant::GetWindowLayout+0xf5 [d:\dev\public\terminal\src\cascadia\Remoting\Peasant.cpp @ 309] 
06 000000b4`cbffe970 00007ffd`a0508fba     Microsoft_Terminal_Remoting!winrt::impl::produce<winrt::Microsoft::Terminal::Remoting::implementation::Peasant,winrt::Microsoft::Terminal::Remoting::IPeasant>::GetWindowLayout+0x94 [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Microsoft.Terminal.Remoting.h @ 1247] 
07 000000b4`cbffea00 00007ffd`a04df5fc     Microsoft_Terminal_Remoting!winrt::impl::consume_Microsoft_Terminal_Remoting_IPeasant<winrt::Microsoft::Terminal::Remoting::IPeasant>::GetWindowLayout+0xaa [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Microsoft.Terminal.Remoting.h @ 310] 
08 000000b4`cbffea90 00007ffd`a04e6034     Microsoft_Terminal_Remoting!<lambda_fc1a410c0531896355b3e1a4af608fe1>::operator()<unsigned __int64,winrt::Microsoft::Terminal::Remoting::IPeasant>+0x3c [d:\dev\public\terminal\src\cascadia\Remoting\Monarch.cpp @ 1015] 
09 000000b4`cbffeaf0 00007ffd`a04d8c7b     Microsoft_Terminal_Remoting!winrt::Microsoft::Terminal::Remoting::implementation::Monarch::_forEachPeasant<<lambda_fc1a410c0531896355b3e1a4af608fe1> &,<lambda_f304ae241c39a80e0e0fe73a1c609478> &>+0x184 [d:\dev\public\terminal\src\cascadia\Remoting\Monarch.h @ 142] 
0a 000000b4`cbffed10 00007ffd`a0505154     Microsoft_Terminal_Remoting!winrt::Microsoft::Terminal::Remoting::implementation::Monarch::GetAllWindowLayouts+0xab [d:\dev\public\terminal\src\cascadia\Remoting\Monarch.cpp @ 1026] 
0b 000000b4`cbffedd0 00007ffd`a055fe0a     Microsoft_Terminal_Remoting!winrt::impl::produce<winrt::Microsoft::Terminal::Remoting::implementation::Monarch,winrt::Microsoft::Terminal::Remoting::IMonarch>::GetAllWindowLayouts+0x94 [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Microsoft.Terminal.Remoting.h @ 1028] 
0c 000000b4`cbffee60 00007ffd`a055525c     Microsoft_Terminal_Remoting!winrt::impl::consume_Microsoft_Terminal_Remoting_IMonarch<winrt::Microsoft::Terminal::Remoting::IMonarch>::GetAllWindowLayouts+0xaa [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Microsoft.Terminal.Remoting.h @ 138] 
0d 000000b4`cbffeef0 00007ffd`a055ff14     Microsoft_Terminal_Remoting!winrt::Microsoft::Terminal::Remoting::implementation::WindowManager::GetAllWindowLayouts+0x5c [d:\dev\public\terminal\src\cascadia\Remoting\WindowManager.cpp @ 622] 
0e 000000b4`cbffef40 00007ff6`f65986c7     Microsoft_Terminal_Remoting!winrt::impl::produce<winrt::Microsoft::Terminal::Remoting::implementation::WindowManager,winrt::Microsoft::Terminal::Remoting::IWindowManager>::GetAllWindowLayouts+0x94 [d:\dev\public\terminal\src\cascadia\Remoting\Generated Files\winrt\Microsoft.Terminal.Remoting.h @ 1767] 
0f 000000b4`cbffefd0 00007ff6`f65446e1     WindowsTerminal!winrt::impl::consume_Microsoft_Terminal_Remoting_IWindowManager<winrt::Microsoft::Terminal::Remoting::IWindowManager>::GetAllWindowLayouts+0xa7 [D:\dev\public\terminal\src\cascadia\WindowsTerminal\Generated Files\winrt\Microsoft.Terminal.Remoting.h @ 694] 
10 000000b4`cbfff060 00007ff6`f65b6e6d     WindowsTerminal!AppHost::_SaveWindowLayouts$_ResumeCoro$1+0x5b1 [D:\dev\public\terminal\src\cascadia\WindowsTerminal\AppHost.cpp @ 829] 
11 000000b4`cbfff490 00007ff6`f6591b70     WindowsTerminal!std::experimental::coroutine_handle<void>::resume+0x4d [C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.30.30528\include\experimental\coroutine @ 106] 
12 000000b4`cbfff4e0 00007ff6`f65b7302     WindowsTerminal!std::experimental::coroutine_handle<void>::operator()+0x20 [C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.30.30528\include\experimental\coroutine @ 98] 
13 000000b4`cbfff510 00007ffe`43ed1873     WindowsTerminal!winrt::impl::resume_background_callback+0x32 [D:\dev\public\terminal\src\cascadia\WindowsTerminal\Generated Files\winrt\base.h @ 8622] 
14 000000b4`cbfff550 00007ffe`43ed7d96     ntdll!TppSimplepExecuteCallback+0xa3 [minkernel\threadpool\ntdll\simple.c @ 376] 
15 000000b4`cbfff5a0 00007ffe`42e86ab0     ntdll!TppWorkerThread+0x686 [minkernel\threadpool\ntdll\worker.c @ 1109] 
16 000000b4`cbfff890 00007ffe`43edc44b     KERNEL32!BaseThreadInitThunk+0x10 [clientcore\base\win32\client\thread.c @ 75] 
17 000000b4`cbfff8c0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\ntdll\rtlstrt.c @ 1152] 

   3  Id: c528.5010 Suspend: 1 Teb: 000000b4`cbab2000 Unfrozen
 # Child-SP          RetAddr               Call Site
00 000000b4`cc0ff538 00007ffe`4134f0b0     ntdll!ZwWaitForMultipleObjects+0x14 [minkernel\ntdll\daytona\objfre\amd64\usrstubs.asm @ 947] 
01 000000b4`cc0ff540 00007ffe`433b7bec     KERNELBASE!WaitForMultipleObjectsEx+0xf0 [minkernel\kernelbase\synch.c @ 1551] 
02 000000b4`cc0ff830 00007ffe`433b7a4a     combase!WaitCoalesced+0xb8 [onecore\com\published\comutils\coalescedwait.cxx @ 72] 
03 000000b4`cc0ffac0 00007ffe`433b784c     combase!CROIDTable::WorkerThreadLoop+0x5a [onecore\com\combase\dcomrem\refcache.cxx @ 1682] 
04 000000b4`cc0ffb10 00007ffe`433b77c9     combase!CRpcThread::WorkerLoop+0x58 [onecore\com\combase\dcomrem\threads.cxx @ 283] 
05 000000b4`cc0ffb80 00007ffe`42e86ab0     combase!CRpcThreadCache::RpcWorkerThreadEntry+0x29 [onecore\com\combase\dcomrem\threads.cxx @ 77] 
06 000000b4`cc0ffbb0 00007ffe`43edc44b     KERNEL32!BaseThreadInitThunk+0x10 [clientcore\base\win32\client\thread.c @ 75] 
07 000000b4`cc0ffbe0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\ntdll\rtlstrt.c @ 1152] 

   4  Id: c528.1cb8 Suspend: 1 Teb: 000000b4`cbab4000 Unfrozen
 # Child-SP          RetAddr               Call Site
00 000000b4`cc1fe4c8 00007ffe`4134f0b0     ntdll!ZwWaitForMultipleObjects+0x14 [minkernel\ntdll\daytona\objfre\amd64\usrstubs.asm @ 947] 
01 000000b4`cc1fe4d0 00007ffe`433466d2     KERNELBASE!WaitForMultipleObjectsEx+0xf0 [minkernel\kernelbase\synch.c @ 1551] 
02 000000b4`cc1fe7c0 00007ffe`43345db5     combase!MTAThreadWaitForCall+0x102 [onecore\com\combase\dcomrem\channelb.cxx @ 7398] 
03 000000b4`cc1fe870 00007ffe`4339d2f6     combase!MTAThreadDispatchCrossApartmentCall+0x1e5 [onecore\com\combase\dcomrem\chancont.cxx @ 232] 
04 (Inline Function) --------`--------     combase!CSyncClientCall::SwitchAptAndDispatchCall+0x69f [onecore\com\combase\dcomrem\channelb.cxx @ 5934] 
05 000000b4`cc1fe8b0 00007ffe`4334319e     combase!CSyncClientCall::SendReceive2+0x786 [onecore\com\combase\dcomrem\channelb.cxx @ 5537] 
06 (Inline Function) --------`--------     combase!SyncClientCallRetryContext::SendReceiveWithRetry+0x2f [onecore\com\combase\dcomrem\callctrl.cxx @ 1542] 
07 (Inline Function) --------`--------     combase!CSyncClientCall::SendReceiveInRetryContext+0x2f [onecore\com\combase\dcomrem\callctrl.cxx @ 565] 
08 000000b4`cc1feb80 00007ffe`4339f69e     combase!DefaultSendReceive+0x6e [onecore\com\combase\dcomrem\callctrl.cxx @ 523] 
09 000000b4`cc1febe0 00007ffe`433459e8     combase!CSyncClientCall::SendReceive+0x30e [onecore\com\combase\dcomrem\ctxchnl.cxx @ 726] 
0a 000000b4`cc1fede0 00007ffe`433df578     combase!CClientChannel::SendReceive+0x98 [onecore\com\combase\dcomrem\ctxchnl.cxx @ 655] 
0b 000000b4`cc1fee50 00007ffe`41eeb12c     combase!NdrExtpProxySendReceive+0x58 [onecore\com\combase\ndr\ndrole\proxy.cxx @ 1989] 
0c (Inline Function) --------`--------     RPCRT4!Ndr64pSendReceive+0x39 [minio\rpc\ndr64\cltcall.cxx @ 184] 
0d 000000b4`cc1fee80 00007ffe`433dd87d     RPCRT4!NdrpClientCall3+0x3fc [minio\rpc\ndr64\cltcall.cxx @ 328] 
0e 000000b4`cc1ff200 00007ffe`43455d72     combase!ObjectStublessClient+0x1bd [onecore\com\combase\ndr\ndrole\amd64\stblsclt.cxx @ 297] 
0f 000000b4`cc1ff590 00007ffe`4337e797     combase!ObjectStubless+0x42 [onecore\com\combase\ndr\ndrole\amd64\stubless.asm @ 176] 
10 000000b4`cc1ff5e0 00007ffe`4336b388     combase!CObjectContext::InternalContextCallback+0x207 [onecore\com\combase\dcomrem\context.cxx @ 4329] 
11 000000b4`cc1ff6f0 00007ffe`13f07bf3     combase!CGIPTable::GetInterfaceFromGlobal+0x4b8 [onecore\com\combase\dcomrem\giptbl.cxx @ 1693] 
12 000000b4`cc1ff7b0 00007ffe`13f079c0     uiautomationcore!EventMap::ReleaseOneEntry+0xdb [onecore\windows\accessibletech\uiautomationcore\proxies\msaa_eventmanager.cpp @ 354] 
13 000000b4`cc1ff7f0 00007ffe`43ed0e63     uiautomationcore!EventMap::ReleaseOldEntries+0x150 [onecore\windows\accessibletech\uiautomationcore\proxies\msaa_eventmanager.cpp @ 613] 
14 000000b4`cc1ff860 00007ffe`43ed1793     ntdll!RtlpTpTimerCallback+0x83 [minkernel\threadpool\compat\timer.c @ 418] 
15 000000b4`cc1ff8a0 00007ffe`43ed7d96     ntdll!TppTimerpExecuteCallback+0xb3 [minkernel\threadpool\ntdll\timer.c @ 2293] 
16 000000b4`cc1ff8f0 00007ffe`42e86ab0     ntdll!TppWorkerThread+0x686 [minkernel\threadpool\ntdll\worker.c @ 1109] 
17 000000b4`cc1ffbe0 00007ffe`43edc44b     KERNEL32!BaseThreadInitThunk+0x10 [clientcore\base\win32\client\thread.c @ 75] 
18 000000b4`cc1ffc10 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\ntdll\rtlstrt.c @ 1152] 

```

",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Needs-Triage;Product-Terminal;Severity-Blocking;zPreview-Service-Queued-1.13,2021-09-30T19:09:23Z,2021-09-30T22:15:21Z,zadjii-msft,carlos-zamora;miniksa,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11392,"Defaults aren't applied to duplicated profile until saved ### Windows Terminal version (or Windows build number)

main 6657d2c

### Other Software

_No response_

### Steps to reproduce

1. Set your default font size to 9.
2. Make a duplicate of the ""PowerShell"" profile.

### Expected Behavior

The font size for the duplicated profile should display as 9.

### Actual Behavior

The font size for the duplicated profile is shown as 12. Clicking save updates the profile and the default font size is applied.

https://user-images.githubusercontent.com/5821575/135661487-61af3bf8-cde4-4eb1-a5e2-fed0768c6bbf.mp4

This is _not_ a problem in stable (1.10.2383.0).",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Product-Terminal;zPreview-Service-Queued-1.13,2021-10-01T17:20:59Z,2021-10-07T16:30:35Z,ianjoneill,ianjoneill;zadjii-msft;lhecker;DHowett,zadjii-msft,zadjii-msft,zadjii-msft;lhecker,zadjii-msft,,
microsoft/terminal,11421,"[1.12] Fix vertical alignment of elevated shield It doesn't really optically line up with anything, and the bottom padding is very small.

![image](https://user-images.githubusercontent.com/189190/136043552-dc25b907-e960-4dfd-9d9f-733814460943.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Needs-Triage;Product-Terminal;Priority-3,2021-10-05T14:31:21Z,2021-10-06T16:55:56Z,DHowett,zadjii-msft,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11424,"Defterm pops up as blank in SUI _found in 1.12.2781.0 Bug Bash on 10/5/2021_

>  Open Settings UI, note that 'Default terminal application' has some application set as default, navigate away to a different tab in the SUI, navigate back to the Startup tab, 'Default terminal application' is now empty


> Defterm pops up as blank in SUI, even though it's set as WT Preview. Seems to be cleared when I navigate to new page (Profile > Appearance, then go back)

![image](https://user-images.githubusercontent.com/18356694/136105945-b8313521-21b5-4314-8030-5a98bad3f25f.png)
",lhecker,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Area-Settings UI;Area-DefApp,2021-10-05T21:46:49Z,2021-10-06T16:58:09Z,zadjii-msft,zadjii-msft,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11479,"Vietnamese IME word composition bug ### Windows Terminal version (or Windows build number)

Windows Terminal 1.10.2714.0

### Other Software

- Microsoft Windows [Version 10.0.22000.194] (though I believe this also occurs back to Windows 10 1903, which is the first version of Windows where Vietnamese Telex IME is first introduced)
- Powershell 7.1.4 (x64)

### Steps to reproduce

1. Add the Vietnamese language and 'Vietnamese Telex' keyboard layout
2. Open Windows Terminal, then switch to PowerShell
3. Switch to Vietnamese Telex keyboard layout
4. Type `'Xin chaof'` (including the apostrophe) then press Enter

### Expected Behavior

The sentence 'Xin ch鑴縪' is written to the console, with normal word composition. (The screenshot is took in conhost)
![conhost](https://user-images.githubusercontent.com/17383640/136833540-4987f204-3a3b-41ba-ac14-1bc24462ccaf.gif)

(Note for non-Vietnamese: the 'f' denotes the grave on the main vowel, which, in this case, is the 'a')

### Actual Behavior

The IME composition works normally for the first syllable Xin. However, after pressing the 'c', the IME suddenly sticks the previous syllable at the beginning when composing, which breaks normal Vietnamese syllable structure. Therefore, when pressing the letter 'f', the IME then decides to append an 'f' instead of putting a grave on the 'a'. All of these result in the output of `'Xin Xinchaof'`.
![wt](https://user-images.githubusercontent.com/17383640/136835614-330a88a2-f290-410e-b913-cb790239ee7e.gif)

Somehow when composing the following words, the keystroke of the previous composition is retained. After typing Xin, then pressing Space and the 'f', the grave is put on the 'i' of the previous syllable 'Xin':
![wt](https://user-images.githubusercontent.com/17383640/136837065-d5d38d5c-6c3f-47aa-9b61-47224cd89479.gif)

The problem seems to come from the IME itself, since it is a relatively new piece of software. However, it would be nice to explain why the problem does not occur on conhost.
",lhecker,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1;Area-i18n,2021-10-11T18:31:08Z,2022-08-11T21:22:25Z,ducminh03,,zadjii-msft,DHowett,lhecker,,,
microsoft/terminal,11488,"Narrator scan mode *does not work* in 1.11+ ### Windows Terminal version (or Windows build number)

1.11+

### Other Software

_No response_

### Steps to reproduce

Enable scan mode, or any mode, and try to navigate the buffer using narrator.

### Expected Behavior

_No response_

### Actual Behavior

It reads one or two things, and then gets ""stuck"" or moves into the titlebar.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Severity-Blocking;Priority-0,2021-10-12T15:02:21Z,2021-10-13T23:01:44Z,DHowett,DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,11529,"""Default Terminal"" mysteriously doesn't work at all - boots up the vintage console instead ### Windows Terminal version (or Windows build number)

1.11.2731.0

### Other Software

_No response_

### Steps to reproduce

When I made the MS terminal preview the default terminal then I clicked on the Save button and then opened Run and typed cmd. It opened the original Command Prompt window

### Expected Behavior

I expected that it would open the MS Terminal Preview

### Actual Behavior

It opens the original cmd",lhecker;miniksa,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Needs-Attention;Product-Terminal;Priority-1;Area-DefApp,2021-10-18T14:25:20Z,2021-10-26T19:08:50Z,BajajAditya123,BajajAditya123;zadjii-msft;happybear88,zadjii-msft,,,,,
microsoft/terminal,11531,"Context menu entry changes after updating for the first time from the store ### Windows Terminal version (or Windows build number)

1.10.2714

### Other Software

The context menu entry changes from Open in Windows Terminal to Open in Windows Terminal Preview after it updates from the store for the first time. I'm running Windows 11 stable build 22000.258 after doing a clean installation. 

[About screenshot](https://i.imgur.com/JfE75sG.png)
![image](https://user-images.githubusercontent.com/18356694/137809341-d4f4719a-9d84-4a47-bd7c-3467f62f2b37.png)


[Context menu entry](https://i.imgur.com/41KDqXv.png) after it updates for the first time.
![image](https://user-images.githubusercontent.com/18356694/137809330-6a215197-de92-4a64-b78c-5b4b073187eb.png)


### Steps to reproduce

- Perform a clean installation of Windows 11 and upon reaching the desktop for the first time, right lick on it to see the context menu entry.
- Open the MS Store and check for updates. Terminal updates for the first time.
- The context menu entry will change to **Open in Windows Terminal Preview** even when the version it updated from is the stable release.

### Expected Behavior

No changes to the context menu entry.

### Actual Behavior

Context menu entry changes to **Open in Windows Terminal Preview** even though it's the stable release.",DHowett,Resolution-Fix-Available;Issue-Bug;Product-Terminal;Area-Localization;Area-ShellExtension,2021-10-18T21:26:50Z,2022-02-15T16:53:58Z,rubenalamina,zadjii-msft;DHowett;rubenalamina;miniksa,zadjii-msft;DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,11534,"Better translation for the context menu entry in Spanish  ### Windows Terminal version (or Windows build number)

1.10.2714

### Other Software

_No response_

### Steps to reproduce

Right click on desktop. Notice the context menu entry name in Spanish.

### Expected Behavior

Abrir en Windows Terminal instead of Abrir en Terminal Windows.

### Actual Behavior

Product names are not usually translated so it doesn't sound right to use **Terminal Windows**. It seems like machine translation. The store lists it as **Windows Terminal** which is what everyone would expect in my opinion. The about section uses Windows Terminal so there's inconsistencies with the context menu entry.

[Store listing screenshot](https://i.imgur.com/FhbLXS8.png).

[About screenshot](https://user-images.githubusercontent.com/18356694/137809341-d4f4719a-9d84-4a47-bd7c-3467f62f2b37.png).

Even if the context menu localization is found to be appropriate, it would be better to use **Terminal de Windows** instead, as that implies it's literally Windows' terminal and not a literal translation of Windows Terminal.",lhecker,Resolution-Duplicate;Issue-Bug;Product-Terminal;Priority-3;Area-Localization;Area-ShellExtension,2021-10-19T04:21:10Z,2022-02-09T21:43:55Z,rubenalamina,zadjii-msft;lhecker,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11566,"Italian translation ""Delimitatori di Word"" ### Windows Terminal version (or Windows build number)

1.12.2931.0

### Other Software

_No response_

### Steps to reproduce

1. Start Windows Terminal Preview.
2. Open the settings UI.
3. Select the ""Appearance"" tab.
4. Under ""Language (requires relaunch)"", choose ""italiano (Italia)"".
5. Click ""Save"".
6. Close Windows Terminal Preview.
7. Start Windows Terminal Preview again.
8. Open the settings UI.
9. Select the ""Interazione"" tab.
10. Look at the title of the word delimiters setting.

### Expected Behavior

""Delimitatori delle parole"", I think. It's not my first language.

### Actual Behavior

""Delimitatori di Word"", as if this setting referred to the Microsoft Office Word software.",lhecker,Issue-Bug;Needs-Triage;Product-Terminal;Priority-3;Tracking-External;Area-Localization,2021-10-21T14:53:22Z,2022-02-16T20:02:42Z,KalleOlaviNiemitalo,KalleOlaviNiemitalo;lhecker,zadjii-msft;lhecker,,lhecker,,lhecker,
microsoft/terminal,11648,"Terminal suddenly can't find the font Cascadia Mono ### Windows Terminal version (or Windows build number)

10.0.19043.1288

### Other Software

_No response_

### Steps to reproduce

Just starting the Terminal on Windows 10. Not running as admin.

### Expected Behavior

A new terminal window

### Actual Behavior

Got this error

`Unable to find the selected font ""Cascadia Mono"".

""Consolas"" has been selected instead.

Please either install the missing font or choose another one.`",lhecker;miniksa,Resolution-Fix-Committed;Area-Fonts;Issue-Bug;Product-Terminal;Priority-1,2021-10-29T06:26:00Z,2022-04-14T22:05:33Z,johan-byggtjanst,ChameleonDevil;Mindfulplays;srdjanjovcic;lhecker;tylerszabo;ilor;AlpineWeezl;zadjii-msft;barkermn01;miniksa;DHowett,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,1165,"Crash on copy after selection goes offscreen because of resizing <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt]
Windows Terminal version (if applicable):

Any other software?
```

# Steps to reproduce
1. Start terminal
2. Maximize terminal
3. Select something that will eventually go offscreen (i.e. top right corner)
4. Unmaximize terminal
5. Try pressing copy or right click
<!-- A description of how to trigger this bug. -->
",carlos-zamora,Resolution-Fix-Committed;Area-Interaction;Issue-Bug;Severity-Crash;Product-Terminal;Priority-1,2019-06-07T16:47:14Z,2020-03-02T20:45:32Z,Summon528,Summon528;greg904;carlos-zamora,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,,carlos-zamora,
microsoft/terminal,11730,Jaws screen reader  Windows Terminal seems to be totally inaccessible with the JAWS screen reader.,carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1;zPreview-Service-Queued-1.13,2021-11-11T07:31:00Z,2022-03-17T20:45:06Z,gomaltao,zadjii-msft;carlos-zamora;gomaltao;codeofdusk;DHowett;Grahamwp,zadjii-msft,zadjii-msft,,,gomaltao,
microsoft/terminal,11743,"How can I prevent Windows Terminal Preview getting brighter when I click on it?   Currently:

- when I click OFF Windows Terminal Preview, it gets darker  
- when I click ON Windows Terminal Preview, it gets brighter

I like the darker color.  

How can I prevent Windows Terminal Preview getting brighter when I click on it?  

I use Git Bash for all my panes.  

I have tried playing around with setting at:

Settings > Git Bash > Appearance > 'Unfocused Appearance'

But that doesn't seem to get me where I want to go.  

I suppose because I want to control the 'Focussed' appearance, and not the 'Unfocussed' appearance.  





",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Product-Terminal;Severity-Blocking;Priority-1,2021-11-12T04:47:57Z,2022-01-26T12:57:41Z,oshihirii,zadjii-msft;oshihirii;zadjii,zadjii-msft;DHowett,zadjii-msft;DHowett,zadjii-msft,,,
microsoft/terminal,11749,"Changing Console Host breaks Win 11 boot ### Windows Terminal version (or Windows build number)

10.0.22000.0

### Other Software

Oh My Posh

### Steps to reproduce

1. On Windows 11 (newest non-insider version)
2. Install PowerShell Core 7.2
3. Set as PowerShell as default shell
4. Change Console Host to Windows Terminal 
5. Install and setup oh-my-posh
6. After restart, win 11 goes into recovery loop - autofix not working (event safe mode!)


### Expected Behavior

System should restart properly.

### Actual Behavior

1. Unable to start Windows
2. Unable to boot with SafeMode
3. No Srt logs created. 


Reproduced twice on clean win install. Unfortunately I have no more time to test it - PC reset was required to make Windows boot again, everytime. 

No issues on win 10",miniksa,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro;Priority-1;Area-DefApp,2021-11-12T19:20:06Z,2022-03-11T17:26:31Z,pwasiewicz,zadjii-msft;DHowett;miniksa,zadjii-msft;miniksa,zadjii-msft,zadjii-msft,,miniksa,
microsoft/terminal,11773,"Atlas engine does not fill the ""gutters"" ### Windows Terminal version

1.13

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

Run at 150% scale with a fully opaque background.

### Expected Behavior

_No response_

### Actual Behavior

![image](https://user-images.githubusercontent.com/189190/142285549-8e948e7d-725a-48ac-ab1a-6ed954943f81.png)
",lhecker,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-2;Area-AtlasEngine,2021-11-17T21:31:02Z,2022-03-11T16:51:16Z,DHowett,lhecker;DHowett,DHowett;zadjii-msft;lhecker,zadjii-msft;DHowett;lhecker,zadjii-msft,,DHowett,
microsoft/terminal,1182,"Terminal Core: Whenever we scroll the buffer, we RepaintAll In `Terminal::_WriteBuffer`, when we scroll the buffer, we tell the renderer to `TriggerRedrawAll`. This isn't necessary, we should probably just be telling the renderer to scroll the lines on screen. 

The RedrawAll call was just a kludge while we were getting the Terminal stood up. Now that everything's working a bit better, we should make sure that RedrawAll is only called when absolutely necessary.",miniksa,Resolution-Fix-Committed;Area-Performance;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2019-06-09T06:07:37Z,2020-04-15T20:18:10Z,zadjii-msft,DHowett-MSFT;miniksa,zadjii-msft;cinnamon-msft;miniksa,DHowett-MSFT;cinnamon-msft,zadjii-msft,,miniksa,
microsoft/terminal,11846,"Korean translation error in the ""Starting Directory"" setting ### Windows Terminal version

1.11.2921.0

### Windows build number

10.0.22000.0

### Other Software

_No response_

### Steps to reproduce

Open the settings -> general tab for any profile in Korean mode.

![image](https://user-images.githubusercontent.com/1309817/144075023-cde6e151-d71e-47ad-8637-d03116d95c79.png)

The Korean label saying ""闇愭棅鐖ラ煰鍗娢滄 闉佹粚鐎鹃爟姗傚 娆"" (which is probably an incorrect translation from ""starting directory"") doesn't make sense, as it sounds more like ""[something] is starting a directory"".

### Expected Behavior

The Korean label of the starting directory setting should be ""闉佹粚鐎 闇愭棅鐖ラ煰鍗娢"".

### Actual Behavior

The setting label actually says ""闇愭棅鐖ラ煰鍗娢滄 闉佹粚鐎鹃爟姗傚 娆""",lhecker,Issue-Bug;Needs-Triage;Product-Terminal;Priority-3;Area-Localization,2021-11-30T15:23:20Z,2022-02-09T21:52:13Z,yyoon,lhecker,zadjii-msft,,zadjii-msft,,lhecker,
microsoft/terminal,1186,"Set-MsBuildDevEnvironment does not work if VsSetup is already installed <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->


# Steps to reproduce

open up powershell, `import-module` on openconsole.psm1. Run `Set-MsBuildDevEnvironment`. It'll download VsSetup as a local module and import it. run `powershell -noprofile` and import openconsole.psm1 again, then run `SetMsBuildDevEnvironment`. It'll fail to find the path to VsSetup with error:

```
Get-ChildItem : Cannot find path 'C:\Users\austi\Documents\oss\terminal\tools\2.2.5' because it does not exist.
At C:\Users\austi\Documents\oss\terminal\tools\OpenConsole.psm1:44 char:9
+         Get-ChildItem -Path $versions[0] ""$Name.psd1"" | Import-Module
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (C:\Users\austi\...nal\tools\2.2.5:String) [Get-ChildItem], ItemNotFound
   Exception
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand
```

# Expected behavior

Setting up build tools should work

# Actual behavior

error finding local module. 

It looks like a pathing problem on the last line of `Set-MsBuildDevEnvironment`:

`Get-ChildItem -Path $versions[0] ""$Name.psd1"" | Import-Module`
",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Meta;Needs-Tag-Fix;Area-CodeHealth,2019-06-09T08:08:24Z,2019-07-06T01:58:15Z,adiviness,Arnatious,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,carlos-zamora,
microsoft/terminal,11871,"Links not underlined with `experimental.useAtlasEngine` enabled ### Windows Terminal version

main 52235b0f

### Windows build number

10.0.19044.0

### Other Software

_No response_

### Steps to reproduce

- clone and build latest dev release, `52235b0f` used for testing.
- enable `""experimental.useAtlasEngine"": true` in SUI or `settings.json`
- open new tab containing a hyperlink

### Expected Behavior

- hyperlinks to be underlined

### Actual Behavior

- hyperlink not underlined, `crtl + click` opens the link though.
- turning off `experimental.useAtlasEngine` shows links underlined.

Sample screenshot:
![wt_dev_link_underline](https://user-images.githubusercontent.com/3933920/144490165-008055f6-7eb7-42b0-ae22-beaf18e7abe1.png)


",lhecker,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1;Area-AtlasEngine,2021-12-02T19:33:36Z,2022-01-25T16:37:59Z,elsaco,,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,1188,"Clicking on a tab sometimes causes a crash <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

I don't think it matters; commit 2da5b0b14682f5522b84116b3e6a6688de3c7423

# Steps to reproduce

Add some tabs, close some tabs. Might have to fiddle about with focus or something. It doesn't always happen straight away.

# Expected behavior

It doesn't crash.

# Actual behavior

It crashes, losing all your tabs.

The crash is here, on line 93 of Microsoft.Terminal.TerminalControl.h in Title():

`        check_hresult(WINRT_SHIM(Microsoft::Terminal::TerminalControl::ITermControl)->get_Title(&value));
`

The calling code is at line 1037..1041 of App.cpp in GetTitle():

```
                try
                {
                    return _GetFocusedControl().Title();
                }
                CATCH_LOG();
```

And the caller of that was _OnTabSelectionChanged().

Unfortunately it is not a thrown exception but an access violation, so the C++ exception handling doesn't help.

Inside _GetFocusedControl(), it would be possible for _GetFocusedTabIndex() to return -1, but it doesn't seem to be in this case. Also it could conceivably return >= _tabs.size() but it isn't doing that either. The problem is that _GetFocusedTerminalControl() returns nullptr, which according to its documentation is a reasonable thing to do.

I changed the code inside the try{} to:

```
                    auto focusedControl = _GetFocusedControl();
                    if (focusedControl)
                        return focusedControl.Title();
```

This seems to stop it crashing. But there are other places where _GetFocusedControl() is called without checking for a null result. So perhaps another tab should be considered focused, or something.

Also if you create shells quickly, some of them end up with no title. I think that's related, because if you click on one of those tabs, the window title (can be seen by hovering over the app's icon in the taskbar) is ""Windows Terminal"" which is GetTitle()s default.",DHowett-MSFT,Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-06-09T12:23:01Z,2019-06-11T19:37:32Z,AndrewMSHowe,AndrewMSHowe,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,1189,"CLS doesn't work in the VT alternate buffer # Environment

```none
Windows build number: [Version 10.0.18362.145]

Windows Terminal version (if applicable): n/a

Any other software? wsl, nano
```

# Steps to reproduce
1) In either powershell or cmd in terminal, type `wsl nano`
2) Execute `taskkill -im wsl.exe -f` to kill wsl
3) Type `cls` in the terminal where wsl was open
<!-- A description of how to trigger this bug. -->

# Expected behavior
`cls` should clear the screen and make the terminal behave like it used to before `wsl nano`

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
after killing `wsl` powershell/cmd is in a bugged state because nano takes up the whole screen
cmd: cls won't clear the screen (first screenshot)
powershell: cls will clear screen BUT if the user inputs e.g. ""cls"", terminal will print ""cclcls"", yet still interpret it as ""cls"" (second screenshot)

![L0030755](https://user-images.githubusercontent.com/5853564/59160360-47df6280-8ad5-11e9-8d15-6ee4f756ef15.png)

![L0030807](https://user-images.githubusercontent.com/5853564/59160417-013e3800-8ad6-11e9-986a-ee5621c97d8f.png)

This issue is also present in the original cmd/powershell.

<!-- What's actually happening? -->
",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Area-Output;Issue-Bug;Needs-Tag-Fix;Priority-1,2019-06-09T14:45:45Z,2019-09-13T21:36:02Z,lesleyxyz,zadjii-msft;DHowett-MSFT;lesleyxyz,zadjii-msft;DHowett-MSFT,DHowett-MSFT,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,11893,"The color scheme preview in the settings UI no longer works ### Windows Terminal version

Commit 094273b995352ff9d80f36279c297488b756df1d

### Windows build number

10.0.19041.1348

### Other Software

_No response_

### Steps to reproduce

1. Open the Settings UI
2. Navigate to the profile _Defaults_ section.
3. Select the _Appearance_ tab.
4. Flip through different _Color scheme_ options while watching the preview window.


### Expected Behavior

The preview should update to reflect the selected color scheme.

### Actual Behavior

The preview doesn't change.

I did a git bisect of the code, which reported commit 094273b995352ff9d80f36279c297488b756df1d as the point at which this stop working. However, I'm wondering if perhaps it's an interaction between those changes and the color table refactoring I was doing in #11602 and #11784.",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Priority-0;Area-Settings UI,2021-12-07T13:58:19Z,2022-01-07T19:56:26Z,j4james,zadjii-msft;j4james,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,11925,"Combining Diacritic Marks are broken under AtlasEngine ### Windows Terminal version

1.13

### Windows build number

Any

### Other Software

_No response_

### Steps to reproduce

Type

```powershell
echo ""[e`u{0301}`u{0301}]""
```

In PowerShell v6+

### Expected Behavior

Text like this should appear in the window:

![image](https://user-images.githubusercontent.com/50213618/145647680-bf033226-e39b-48a3-aa40-85f5281a24df.png)

The two acute accents should stack above letter `e`.

### Actual Behavior

![image](https://user-images.githubusercontent.com/50213618/145647627-1947af02-2204-479a-8e00-6c30d5f2d94e.png)

The acute accents are not properly placed.",lhecker,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Needs-Tag-Fix;Area-AtlasEngine,2021-12-10T22:10:06Z,2022-02-01T21:23:37Z,reli-msft,reli-msft;Perlence;lhecker,lhecker,,lhecker,,,
microsoft/terminal,11970,"[Settings] : System menu pop-up doesn't open inside 'Settings' window, when user press 'Alt + Space' key. ### Windows Terminal version

1.12.3472.0

### Windows build number

22509.1011

### Other Software

**Test Environment: **
OS: Windows 11 Version Dev (OS Build 22509.1011)
App: Windows Terminal Preview

### Steps to reproduce

**Repro Steps: **

1.Open Windows Terminal.
2.Open Settings page using 'Ctr+,'
3.Now try to open the 'System menu' pop-up by pressing 'Alt + Space' key.
4.Observe the issue.

**User Experience: **
Users will not be able to 'System menu' pop-up functionalities in 'Settings' window, if System menu pop-up doesn't open inside 'Settings' window on pressing 'Alt + Space' key.

Attachment : 
[System menu pop-up doesn't open inside 'Settings' window, when user press 'Alt + Space' key..zip](https://github.com/microsoft/terminal/files/7728290/System.menu.pop-up.doesn.t.open.inside.Settings.window.when.user.press.Alt.%2B.Space.key.zip)


### Expected Behavior

System menu pop-up should open inside 'Settings' window, when user press 'Alt + Space' key.

### Actual Behavior

System menu pop-up doesn't open inside 'Settings' window, when user press 'Alt + Space' key.",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-Accessibility;Product-Terminal;HCL-E+D;A11yUsable;HCL-WindowsTerminal;A11yCO;A11yTTValidated,2021-12-16T14:54:53Z,2022-10-14T19:19:46Z,Saiteja341,zadjii-msft;ianjoneill;carlos-zamora;Shubham786786,zadjii-msft;v-rpundir,zadjii-msft,carlos-zamora,,,
microsoft/terminal,11973,"[Command prompt>Find] : Screen Reader users are not getting any information about 'Search results'. ### Windows Terminal version

1.12.3472.0

### Windows build number

22509.1011

### Other Software

**Test Environment: **
OS: Windows 11 Version Dev (OS Build 22509.1011)
App: Windows Terminal Preview
Screen Reader : Narrator


### Steps to reproduce

**Repro Steps: **

1.Open Windows Terminal.
2.Open 'Command prompt' using 'Ctrl + shift + 2'.
3.Now open 'Find' pop-up using 'Ctrl + Shift + F'.
4.Type any keyword in 'Find' edit field & press enter.
4.Verify whether screen reader is narrating any information regarding available 'Search results' or not.

**User Experience: **
Users who rely on screen readers will get impacted here & may not know any information regarding search results, if screen reader stays silent on typing any keyword.

Guideline reference
https://www.w3.org/TR/WCAG21/#info-and-relationships

Attachment : 
[Narrator not reading any information reg search results.zip](https://github.com/microsoft/terminal/files/7743234/Narrator.not.reading.any.information.reg.search.results.zip)



### Expected Behavior

Screen reader should narrate information of  available 'Search results', on typing any keyword on 'Find' edit field.

### Actual Behavior

Screen reader is staying silent & not narrating any information regarding 'Search results'.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-2;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev2,2021-12-16T16:38:34Z,2022-02-23T04:20:35Z,Saiteja341,zadjii-msft;v-rpundir,zadjii-msft;v-rpundir,zadjii-msft,zadjii-msft,,v-rpundir,
microsoft/terminal,11996,"[Settings]: The Name property of a focusable element (Font Weight, Background image path, Background opacity, Padding, Delete) must not be null. ### Windows Terminal version

1.12.3472.0

### Windows build number

10.0.22504.1010

### Other Software

**Test Environment: **
OS: Windows 11 Version Dev (OS Build 22504.1010)
App: Windows Terminal Preview
Screen Reader: Narrator
Tool: Accessibility Insights for Windows Version 1.1.1741.1

### Steps to reproduce

**Repro Steps: **
1. Open Windows Terminal.
2. Open Settings page using 'Ctr+,'.
3. Run Accessibility Insights for Window on Command Prompt/PowerShell or other Profiles Appearance tab page, 

**User Experience: **
Screen Reader users will be impacted here as control name is not defined as result Screen Reader user will not be able to know the purpose of the control.

**Guideline Reference: **
https://www.w3.org/WAI/WCAG21/Understanding/name-role-value

**Attachments:**
[The Name property of a focusable element is null.zip](https://github.com/microsoft/terminal/files/7743332/The.Name.property.of.a.focusable.element.is.null.zip)

### Expected Behavior

The Name property of a focusable element (Font Weight, Background image path, Background opacity, Padding, Delete) must not be null.

### Actual Behavior

The Name property of a focusable element (Font Weight, Background image path, Background opacity, Padding, Delete) is null.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-2;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev2,2021-12-20T08:07:19Z,2022-02-04T10:10:47Z,v-rpundir,carlos-zamora;v-rpundir,v-rpundir;zadjii-msft;carlos-zamora,DHowett;carlos-zamora,zadjii-msft,,v-rpundir,
microsoft/terminal,1206,"Maximizing/Restoring when the alt buffer is active crashes conhost 1. `wsl`
2. `printf '\e[?1049h'`
3. maximize
4. did it crash? if not, restore
5. did it crash? if not, maximize
6. did it crash? if not, close this bug

Notably, the crash _doesn't_ occur for simple resizes -- even those covering more than one side.",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Priority-1,2019-06-11T19:46:39Z,2019-09-05T20:37:28Z,DHowett-MSFT,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,1209,"Previous keystrokes modify following keystrokes <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt] 
Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version (if applicable): 0.1.1502.0

Any other software?  Found using WSL, ssh to a remote server, and then emacs in terminal mode
```

# Steps to reproduce
Alt-/ followed by Ctrl-E is sending Alt-Ctrl-E instead of just Ctrl-E.  It doesn't matter if it's Ctrl-E.  Ctrl-A after Alt-/ acts the same way.


    showkey -a                                                                                                                                                                                                                                                              
    Press any keys - Ctrl-D will terminate this program                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
    ^[/      27 0033 0x1b
               47 0057 0x2f
    ^[^E   27 0033 0x1b
                 5 0005 0x05


But, for instance, Alt-A followed by Ctrl-E behaves correctly:


    ^[A      27 0033 0x1b
                65 0101 0x41
    ^E         5 0005 0x05
",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug,2019-06-11T20:53:45Z,2019-06-14T19:48:13Z,atwok,DHowett-MSFT;zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,12126,"When default profile is set to Command Prompt, ""Open in Windows Terminal"" uses cmd.exe in current folder ### Windows Terminal version

1.11.3471.0

### Windows build number

10.0.22526.1000

### Other Software

_No response_

### Steps to reproduce

1. Ensure that cmd.exe from another version of Windows is in the current folder
2. Right-click a black space in Explorer and then click Open in Windows Terminal

### Expected Behavior

Ideally, the system's command prompt should be used as opposed to the one in the current 

### Actual Behavior

The command prompt in the folder is used as opposed to the one from the system

https://user-images.githubusercontent.com/81916167/148704076-bc05a3e8-f018-47e7-bab8-38fceacecd5b.mp4


",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Priority-1;zStable-Service-Queued-1.12;zPreview-Service-Queued-1.13,2022-01-09T22:40:53Z,2022-01-12T21:50:03Z,XenoPanther,zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,12158,"TerminalAppLocalTests::TabTests are failing ### Windows Terminal version

Commit c3fd26a393bd00664a3527f3c973e2cec2344e06

### Windows build number

10.0.19041.1415

### Other Software

_No response_

### Steps to reproduce

1. Checkout the latest code.
2. Build. 
3. Run the `TerminalAppLocalTests` unit tests.

### Expected Behavior

Tests should pass.

### Actual Behavior

Two tests are failing:

    TerminalAppLocalTests::TabTests::TestPreviewCommitScheme [Failed]
    TerminalAppLocalTests::TabTests::TestPreviewDismissScheme [Failed]

As far as I can tell, these first stopped working in commit c3fd26a393bd00664a3527f3c973e2cec2344e06.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2022-01-13T18:27:45Z,2022-05-05T13:42:35Z,j4james,zadjii-msft;lhecker,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,12169,"Crash opening an elevated profile from the taskbar jumplist ### Windows Terminal version

main 7061c54

### Windows build number

10.0.22000.434

### Other Software

_No response_

### Steps to reproduce

1. Create an elevated profile.
   ```json
            {
                ""colorScheme"": ""Campbell Powershell"",
                ""commandline"": ""\""C:\\Program Files\\PowerShell\\7\\pwsh.exe\"""",
                ""guid"": ""{14b805d7-b545-418a-b1e8-1fdccd6197f7}"",
                ""hidden"": false,
                ""icon"": ""ms-appx:///ProfileIcons/pwsh.png"",
                ""name"": ""PowerShell (Elevated)"",
                ""startingDirectory"": ""%USERPROFILE%"",
                ""elevate"": true
            }
   ```
2. Right click on the terminal icon in the taskbar and select your elevated profile.

### Expected Behavior

Nothing to crash.

### Actual Behavior

The un-elevated copy of terminal, which spawned the elevated one crashes. The elevated copy of terminal starts up successfully and can be used as expected. The call-stack seems to be deep within XAML with the last frame in terminal at the `AppHost` destructor, so my _guess_ would be that the app is closing before the XAML stack is fully initialised, leading to the crash.

```
0:000> !analyze -v
*******************************************************************************
*                                                                             *
*                        Exception Analysis                                   *
*                                                                             *
*******************************************************************************


KEY_VALUES_STRING: 1

    Key  : AV.Dereference
    Value: NullClassPtr

    Key  : AV.Fault
    Value: Read

    Key  : Analysis.CPU.mSec
    Value: 5592

    Key  : Analysis.DebugAnalysisManager
    Value: Create

    Key  : Analysis.Elapsed.mSec
    Value: 53234

    Key  : Analysis.Init.CPU.mSec
    Value: 1000

    Key  : Analysis.Init.Elapsed.mSec
    Value: 6342

    Key  : Analysis.Memory.CommitPeak.Mb
    Value: 651

    Key  : Timeline.Process.Start.DeltaSec
    Value: 2

    Key  : WER.OS.Branch
    Value: co_release

    Key  : WER.OS.Timestamp
    Value: 2021-06-04T16:28:00Z

    Key  : WER.OS.Version
    Value: 10.0.22000.1


FILE_IN_CAB:  WindowsTerminal.exe.22092.dmp

NTGLOBALFLAG:  0

PROCESS_BAM_CURRENT_THROTTLED: 0

PROCESS_BAM_PREVIOUS_THROTTLED: 0

APPLICATION_VERIFIER_FLAGS:  0

CONTEXT:  (.ecxr)
rax=0000000000000000 rbx=0000005a1d4fe570 rcx=0000000000000000
rdx=0000070000000700 rsi=0000000000000000 rdi=0000005a1d4fe080
rip=00007ff865c9ae8f rsp=0000005a1d4fe820 rbp=0000005a1d4fe929
 r8=00000175cd6a7ae0  r9=0000005a1d4fea70 r10=00000fff0cbdbde1
r11=aa888aaaa8aaaaaa r12=00000175c2634ec0 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0         nv up ei pl zr na po nc
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010244
Windows_UI_Xaml!WindowsGraphicsDeviceManager::WaitForInitializationThreadCompletion+0x1f:
00007ff8`65c9ae8f 48397910        cmp     qword ptr [rcx+10h],rdi ds:00000000`00000010=????????????????
Resetting default scope

EXCEPTION_RECORD:  (.exr -1)
ExceptionAddress: 00007ff865c9ae8f (Windows_UI_Xaml!WindowsGraphicsDeviceManager::WaitForInitializationThreadCompletion+0x000000000000001f)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000001
NumberParameters: 2
   Parameter[0]: 0000000000000000
   Parameter[1]: 0000000000000010
Attempt to read from address 0000000000000010

PROCESS_NAME:  WindowsTerminal.exe

READ_ADDRESS:  0000000000000010 

ERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.

EXCEPTION_CODE_STR:  c0000005

EXCEPTION_PARAMETER1:  0000000000000000

EXCEPTION_PARAMETER2:  0000000000000010

STACK_TEXT:  
0000005a`1d4fe820 00007ff8`65c9a75e     : 00000000`00000000 00000700`00000700 00000000`00000000 00000175`cd7deed0 : Windows_UI_Xaml!WindowsGraphicsDeviceManager::WaitForInitializationThreadCompletion+0x1f
0000005a`1d4fe880 00007ff8`65e6503c     : 4327ffff`fffff200 00000000`00000001 00000700`00000700 00000175`cd7deee0 : Windows_UI_Xaml!CCoreServices::GetMaxTextureSize+0x3e
0000005a`1d4fe8b0 00007ff8`65e64cb3     : 00000175`c2678130 00000700`00000700 00000175`cd763dd0 00007ff8`83dfcb61 : Windows_UI_Xaml!CLoadedImageSurface::IsVirtualPossible+0x30
0000005a`1d4fe8e0 00007ff8`65e64c08     : 00000700`00000700 00000175`c6e1f428 00000175`cd6a7ae0 00000175`c43ac760 : Windows_UI_Xaml!CLoadedImageSurface::StartDecodingHelper+0x77
0000005a`1d4fe990 00007ff8`65e64bb2     : 0000005a`00000000 00000175`cd6a7b58 00000000`00000010 0000005a`1d4feaa8 : Windows_UI_Xaml!CLoadedImageSurface::StartFinalSizeDecoding+0x3c
0000005a`1d4fe9c0 00007ff8`65c849b8     : 00000000`00000000 00007ff8`65d340ed 00000000`00000000 00000000`00000030 : Windows_UI_Xaml!CLoadedImageSurface::OnImageViewUpdated+0x42
0000005a`1d4fe9f0 00007ff8`65c84939     : 00000000`00000000 00000175`cd763df0 00000000`00000000 00000000`00000000 : Windows_UI_Xaml!ImageViewBase::TriggerViewUpdated+0x4c
0000005a`1d4fea20 00007ff8`65c84a3a     : 00000175`cd6fae60 00000175`c68939a0 00000175`cd6faee0 00000000`00000000 : Windows_UI_Xaml!ImageMetadataViewImpl::SetEncodedImageData+0x51
0000005a`1d4fea50 00007ff8`65b8f05c     : 00000175`c6893790 00000000`00000000 00000175`c6893790 00000000`00000000 : Windows_UI_Xaml!ImageCache::SetEncodedImageData+0x76
0000005a`1d4fea90 00007ff8`65b8efae     : 00000175`c6893790 00000000`00000000 00000175`c68914b0 0000005a`1d4feb90 : Windows_UI_Xaml!ImageCache::GotDownloadResponse+0x84
0000005a`1d4feae0 00007ff8`65b96d4d     : 00000175`cd6fae60 00000175`c68914b0 0000005a`1d4febb8 0000005a`1d4feb98 : Windows_UI_Xaml!ImageCacheDownloadResponseTask::Execute+0x2e
0000005a`1d4feb10 00007ff8`65b8a299     : 00000000`00000000 00000000`00000000 0000005a`1d4febd0 00000175`c269f710 : Windows_UI_Xaml!ImageCacheDownloadCallbackMarshaller::GotResponse+0x9d
0000005a`1d4feb50 00007ff8`65bae638     : 00000175`00040007 00007ff8`00000001 00000175`cd6faeb0 00000000`00000000 : Windows_UI_Xaml!CDownloader::CreateUnsecureDownloadRequest+0x1f9
0000005a`1d4fec10 00007ff8`65b6b671     : 00000175`cd6c6220 0000005a`1d4fecb0 00000175`cd6c61d0 00000175`cd73bf00 : Windows_UI_Xaml!CommonBrowserHost::UnsecureDownload+0x58
0000005a`1d4fec50 00007ff8`65b6b51a     : 00000175`cd6faeb0 00000175`cd6fae60 00000175`c2678130 00000175`cd6d6d80 : Windows_UI_Xaml!CCoreServices::UnsecureDownloadFromSite+0x131
0000005a`1d4fece0 00007ff8`65dd62d5     : 00000175`cd6fae60 00000000`00000000 00000175`cd73c260 00000000`00000000 : Windows_UI_Xaml!ImageCache::Download+0xc2
0000005a`1d4fed50 00007ff8`65e416c0     : 00000000`00000000 00000175`cd739590 00000175`cd73c260 00000175`cd6d6d80 : Windows_UI_Xaml!ImageCache::ProcessDecodeRequests+0xb5
0000005a`1d4fed80 00007ff8`65ccfaa1     : 00000000`00000000 00000175`c26784a0 00000175`c2678130 00000000`00000000 : Windows_UI_Xaml!ImageTaskDispatcher::Execute+0xe0
0000005a`1d4fedb0 00007ff8`65dc9a70     : 00000000`00000000 0000005a`1d4feeb0 00000000`00000000 00007ff8`65cee3f7 : Windows_UI_Xaml!CCoreServices::ResetCoreWindowVisualTree+0x23d
0000005a`1d4fee00 00007ff8`65cedc46     : 00000000`00000000 00000000`00000000 00000175`c2624080 00000175`c2624070 : Windows_UI_Xaml!CommonBrowserHost::ResetVisualTree+0x50
0000005a`1d4fee30 00007ff8`65ced7b1     : 00000000`00000000 00007ff8`65e7e900 0000005a`1d4feeb0 00000000`00000000 : Windows_UI_Xaml!CJupiterControl::ResetVisualTree+0x4e
0000005a`1d4fee60 00007ff8`65ced152     : 00000000`00000000 0000005a`1d4feed0 00000000`00000000 00000000`00000000 : Windows_UI_Xaml!DirectUI::DXamlCore::CommonShutdown+0xb9
0000005a`1d4feed0 00007ff8`65cf1c0f     : 00000175`c26761d0 00000000`00000000 00000175`c26761d0 0000005a`1d4ff0b8 : Windows_UI_Xaml!DirectUI::DXamlCore::DeinitializeInstance+0x172
0000005a`1d4fef00 00007ff8`667adb4f     : 00000000`00000000 00000175`c26761d0 0000005a`1d4ff0b8 00000175`c26761d0 : Windows_UI_Xaml!DirectUI::DXamlCore::Deinitialize+0x8f
0000005a`1d4fef30 00007ff8`65f203b3     : 00000175`cd711710 00000175`c26761d0 00007ff8`87b88330 00007ff8`8af5d8ab : Windows_UI_Xaml!DirectUI::WindowsXamlManager::XamlCore::Close+0x11b
0000005a`1d4fef70 00007ff8`87b88350     : 00000175`cd711710 00007ff8`8d285000 00000175`00000000 00007ff8`8d4872b4 : Windows_UI_Xaml!Microsoft::WRL::Details::DelegateArgTraits<long (__cdecl Windows::System::IDispatcherQueueHandler::*)(void)>::DelegateInvokeHelper<Microsoft::WRL::Implements<Microsoft::WRL::RuntimeClassFlags<2>,Windows::System::IDispatcherQueueHandler,Microsoft::WRL::FtmBase>,<lambda_e4f49de40a4de9a39b79809f2fbaa002> &,-1>::Invoke+0x13
0000005a`1d4fefa0 00007ff8`87b51984     : 0000005a`1d4ff078 0000005a`1d4ff0b1 0000005a`1d4ff018 00000002`00000030 : CoreMessaging!Windows::System::DispatcherQueue::DeferInvokeCallback+0x20
0000005a`1d4fefd0 00007ff8`87b518de     : 00000175`c264dbd0 00007ff8`87b88330 00000175`c264dbd0 00007ff8`87b88330 : CoreMessaging!CFlat::SehSafe::Execute<<lambda_a81ff790741c2a62f2197c2561f5fe49> >+0x2c
0000005a`1d4ff000 00007ff8`87b4b41f     : 00000175`c6fc30b0 00007ff8`81aeaf08 00000000`00000000 00000175`c6fc1670 : CoreMessaging!Microsoft::CoreUI::ActionCallback::ImportAdapter$+0xae
0000005a`1d4ff040 00007ff8`87b4a93b     : 00000175`cd7ea780 00007ff8`8190291d 00000000`00000000 00000000`00000020 : CoreMessaging!Microsoft::CoreUI::Dispatch::DeferredCall::Callback_Dispatch+0x2bf
0000005a`1d4ff100 00007ff8`87b4a5bd     : 00000175`00000007 00000000`00000007 00000000`00000001 00000175`c26626d0 : CoreMessaging!Microsoft::CoreUI::Dispatch::DeferredCallDispatcher::Callback_OnDispatch+0x12b
0000005a`1d4ff1c0 00007ff8`87b4bc84     : 00000175`c263ba90 00000175`c264f640 00000175`c26652d0 0000005a`1d4ff718 : CoreMessaging!Microsoft::CoreUI::Dispatch::EventLoop::Callback_RunCoreLoop+0x2ed
0000005a`1d4ff280 00007ff8`87b4b7ec     : 00000175`c26652d0 00000175`c26652d0 00000175`c264dbd0 00000175`c264f640 : CoreMessaging!Microsoft::CoreUI::Dispatch::UserAdapter::OnUserDispatch+0x214
0000005a`1d4ff310 00007ff8`87b47a0f     : 00000000`00000004 00007ff8`8c146578 00000000`00000000 00000175`c2650c80 : CoreMessaging!Microsoft::CoreUI::Dispatch::UserAdapter::DoWork+0x1fc
0000005a`1d4ff3a0 00007ff8`8d201c4c     : 00000000`00000000 00000175`c2580000 00000000`00000001 00000000`00000001 : CoreMessaging!Microsoft::CoreUI::Dispatch::UserAdapter::WindowProc+0x4f
0000005a`1d4ff410 00007ff8`8d20179c     : 00000000`00000000 00007ff8`87b479c0 00000000`002f05d8 00000175`00000060 : user32!UserCallWinProcCheckWow+0x33c
0000005a`1d4ff580 00007ff8`8d214b4d     : 00000175`c2cd7400 0000005a`1d4ff7f0 00000000`00000005 00000000`00000000 : user32!DispatchClientMessage+0x9c
0000005a`1d4ff5e0 00007ff8`8d4872b4     : 00000000`00000001 00007ff8`81902dec 00000175`cd7ea280 00000000`00000000 : user32!_fnDWORD+0x3d
0000005a`1d4ff640 00007ff8`8aed13b4     : 00007ff8`8d209f0f 00000175`cd7ea280 00000000`00000000 00000000`00000000 : ntdll!KiUserCallbackDispatcherContinue
0000005a`1d4ff6c8 00007ff8`8d209f0f     : 00000175`cd7ea280 00000000`00000000 00000000`00000000 00007ff8`818b592f : win32u!NtUserPeekMessage+0x14
0000005a`1d4ff6d0 00007ff8`8d209e7a     : 00000000`00000001 00000175`c2cd7400 00000000`00000000 00000000`00000000 : user32!_PeekMessage+0x3f
0000005a`1d4ff740 00007ff8`828914f5     : 00000175`c2628a28 0000005a`1d4ff9b0 00000175`c2630340 00007ff8`8d40756d : user32!PeekMessageW+0x13a
0000005a`1d4ff7b0 00007ff8`828939b9     : 00000000`002f05d8 0000005a`1d4ff9e0 00000000`00000000 00000000`00000000 : Microsoft_Toolkit_Win32_UI_XamlHost+0x14f5
0000005a`1d4ff840 00007ff6`f4c893be     : 0000005a`1d4ff9e0 00000000`00000000 00000000`00000000 00000000`00000000 : Microsoft_Toolkit_Win32_UI_XamlHost+0x39b9
0000005a`1d4ff870 00007ff6`f4c8630f     : 00000000`00000000 00000000`00000001 00000000`00000000 00000000`00000000 : WindowsTerminal!AppHost::~AppHost+0x8e
0000005a`1d4ff8b0 00007ff6`f4cb4202     : 00000000`00000001 00000000`00000000 00000000`00000000 00000000`00000000 : WindowsTerminal!wWinMain+0x4af
0000005a`1d4ffb20 00007ff8`8c1b54e0     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : WindowsTerminal!__scrt_common_main_seh+0x106
0000005a`1d4ffb60 00007ff8`8d3e485b     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x10
0000005a`1d4ffb90 00000000`00000000     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x2b


FAULTING_SOURCE_LINE:  onecoreuap\windows\dxaml\xcp\components\graphics\windowsgraphicsdevicemanager.cpp

FAULTING_SOURCE_FILE:  onecoreuap\windows\dxaml\xcp\components\graphics\windowsgraphicsdevicemanager.cpp

FAULTING_SOURCE_LINE_NUMBER:  17

FAULTING_SOURCE_CODE:  
No source found for 'onecoreuap\windows\dxaml\xcp\components\graphics\windowsgraphicsdevicemanager.cpp'


SYMBOL_NAME:  Windows_UI_Xaml!WindowsGraphicsDeviceManager::WaitForInitializationThreadCompletion+1f

MODULE_NAME: Windows_UI_Xaml

IMAGE_NAME:  Windows.UI.Xaml.dll

STACK_COMMAND:  ~0s ; .ecxr ; kb

FAILURE_BUCKET_ID:  NULL_CLASS_PTR_READ_c0000005_Windows.UI.Xaml.dll!WindowsGraphicsDeviceManager::WaitForInitializationThreadCompletion

OS_VERSION:  10.0.22000.1

BUILDLAB_STR:  co_release

OSPLATFORM_TYPE:  x64

OSNAME:  Windows 10

IMAGE_VERSION:  10.0.22000.348

FAILURE_ID_HASH:  {e25e17fd-3d34-febf-009a-64ef61c97fd8}

Followup:     MachineOwner
---------
```",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Needs-Triage;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Priority-0;Area-Windowing,2022-01-15T11:38:02Z,2022-01-24T23:32:36Z,ianjoneill,zadjii-msft;ianjoneill,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,12176,"`ControlCore::_refreshSizeUnderLock` crash ### Windows Terminal version

1.11.3471.0

### Windows build number

10.0.22523.0

### Other Software

````
wsl --list -v

  NAME                   STATE           VERSION
* docker-desktop-data    Running         2
  Ubuntu                 Running         2
  docker-desktop         Running         2
````

Typically I'm using multiple panes, one or more tabs, with both Windows 11 Powershell and Ubuntu. For ubuntu:

````
cat /etc/lsb-release

DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION=""Ubuntu 20.04.3 LTS""
````

### Steps to reproduce

Day-to-day use of the terminal. Sometimes WSL *and* Windows Powershell tabs/panes, sometimes just one or the other. Somtimes using software like k9s, other times just sitting at a prompt.

### Expected Behavior

Everything to remain responsive.

### Actual Behavior

After some nondescript amount of time, the window hangs, Terminal is unresponsive and must be quit. Windows crash reporting pops up.

If I leave it long enough (say a few hours), it's more likely to have occurred. Sometimes it's during active use though. If I'm using `k9s` (kubernetes tool) on a Windows powershell and press `e` to open Notepad to edit some yaml, recently that pane has then stopped responding to input (but output still updates). Unsure if related.

Feedback Hub link: https://aka.ms/AAfh1tt",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Priority-1,2022-01-16T12:41:50Z,2022-08-29T21:42:18Z,kierenj,zadjii-msft;kierenj,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,12183,"German translation for FOR /F command description is incorrect ### Windows Terminal version

_No response_

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

<img width=""476"" alt=""for_bug"" src=""https://user-images.githubusercontent.com/46659645/152648897-98534ea2-f4c4-4d46-964e-e7920b41033f.png"">

Run `FOR /?`
1. The description of how to use a FOR /F loop for commands and _without_ using option USEBACKQ shows no quotes around the command. However, single quotes would have been correct here.
2. The description of how to use a FOR /F loop for strings _and_ using option USEBACKQ shows double quotes around the string. However, single quotes would have been correct here.

### Expected Behavior

1. `FOR /F [""Optionen""] %variable IN ('Befehl') DO Befehl [Parameter]`
2. `FOR /F [""Optionen""] %variable IN ('Zeichenfolge') DO Befehl [Parameter]`

### Actual Behavior

1. `FOR /F [""Optionen""] %variable IN (Befehl) DO Befehl [Parameter]`
2. `FOR /F [""Optionen""] %variable IN (""Zeichenfolge"") DO Befehl [Parameter]`",lhecker,Product-Cmd.exe;Issue-Bug;Needs-Tag-Fix;Priority-2;Tracking-External;Area-Localization,2022-01-17T20:49:15Z,2022-02-23T15:46:03Z,german-one,german-one;lhecker,lhecker;zadjii-msft,zadjii-msft,lhecker,,lhecker,
microsoft/terminal,12267,"DefTerm handoff does not work in NON glomming mode ### Windows Terminal version

1.13.10251.0

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

No glomming. Hand off.

### Expected Behavior

_No response_

### Actual Behavior

No hand off",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-0;Area-DefApp,2022-01-26T23:01:59Z,2022-01-27T23:31:47Z,DHowett,zadjii-msft,DHowett,DHowett,DHowett,,,
microsoft/terminal,12271,"Bottom part of SUI has a giant black bar on it ### Windows Terminal version

main a13b207

### Windows build number

10.0.22000.0

### Other Software

_No response_

### Steps to reproduce

Build a13b207

### Expected Behavior

Windows 11 style applied to each SUI element.

### Actual Behavior

`Discard charges` almost indistinguishable from the black background:

![wt_dev_settings](https://user-images.githubusercontent.com/3933920/151399070-3e6244f3-9f74-4734-b8d7-1b46582465be.png)


Non-Win11 style:

![wt_pre_settings](https://user-images.githubusercontent.com/3933920/151399175-35a7fcfd-f3bc-4ec4-849c-c6c401b115e0.png)

",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Priority-3;Area-Settings UI,2022-01-27T16:20:53Z,2022-01-28T17:20:15Z,elsaco,zadjii-msft;PankajBhojwani,zadjii-msft;PankajBhojwani,,zadjii-msft,,zadjii-msft,
microsoft/terminal,12294,"RTL text in conhost is no longer rendered correctly ### Windows Terminal version

Commit eb7559733d3cc9062c7de610f3b95d9143099ca1

### Windows build number

10.0.19041.1415

### Other Software

_No response_

### Steps to reproduce

1. Build a recent version of OpenConsole.
2. Open a conhost bash shell.
3. Execute the following command: `printf ""\u05ea\u05d7\u05d0\n""`


### Expected Behavior

RTL characters should be displayed in the exact order they were output, and not reversed. This is what it looks like in my inbox conhost (10.0.19041.1415):

![image](https://user-images.githubusercontent.com/4181424/151705192-2d96e962-999b-40c6-8810-2cc9a570315a.png)

This also matches the behaviour of XTerm.

### Actual Behavior

In the current version of OpenConsole (I think since PR #10478), RTL characters are reversed, like this:

![image](https://user-images.githubusercontent.com/4181424/151705205-a0692267-57a5-4c5f-93c7-bb4647f819ba.png)

I realise that some people might consider this a good thing, since it gives the superficial appearance that it's rendering RTL languages correctly, but it is not compatible with the original conhost and breaks genuine RTL-aware applications (which rely on characters being displayed exactly where they've been positioned).",lhecker,Product-Conhost;Resolution-Fix-Committed;Help Wanted;Area-Rendering;Issue-Bug;Priority-1;zInbox-Bug,2022-01-30T15:31:25Z,2022-03-21T23:32:46Z,j4james,j4james;alabuzhev;lhecker;miniksa;zadjii-msft;DHowett,zadjii-msft,DHowett,,,,
microsoft/terminal,12297,"Bad german translation ### Windows Terminal version

1.12.3472.0

### Windows build number

10.0.19042.0

### Other Software

_No response_

### Steps to reproduce

I run a command in Azure cli and it terminated with an error code > 0

### Expected Behavior

The settings translate termination as ""Profilbeendigung"" which is ok
So the translated sentence would be better as:

> Das Verhalten bei Beendigung kann in den erweiterten Profileinstellungen konfiguriert werden.

### Actual Behavior

Somethimes there is an info bar shown, informing about abnormal termination of the shell:
![image](https://user-images.githubusercontent.com/5293502/151789752-33b24570-aba9-4441-8dd6-587fef9f1fa0.png)
""K鐪塶digung"" would be ""termination of a contract"" like when a lease ends unilaterally or you terminate a mobile phone contract. ",lhecker,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Tracking-External;Area-Localization,2022-01-31T12:01:09Z,2022-02-17T14:12:49Z,jfheins,lhecker;jfheins,zadjii-msft;lhecker;DHowett,zadjii-msft;DHowett,zadjii-msft,,lhecker,
microsoft/terminal,12300,"PGO is not working in release builds Without this, we cannot ship an opt build.",miniksa,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Priority-0,2022-01-31T17:05:12Z,2022-02-01T01:12:34Z,DHowett,,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,12325,"SUI Breadcrumbs should have better keyboard navigation ### Windows Terminal version

1.13.10321.0

### Windows build number

22548.1002

### Other Software

None

### Steps to reproduce

(Part 1)
1. Open Settings UI
2. Go to a profile page
3. Press <kbd>Tab</kbd> repeatedly

(Part 2)
4. From a profile page, now open ""Advanced"" or ""Appearance""
5. Press <kbd>Tab</kbd> repeatedly

### Expected Behavior

The right-most breadcrumb should not be a tab stop or invokable (or if it is invoked, it shouldn't do anything)

### Actual Behavior

Invoking ""Advanced"" or ""Appearance"" takes you back to the main profile page. 

### Additional Information
There's a chance that this (or some of this) should be filed on XAML. The goal here is to match what the settings app does.",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-Settings UI,2022-02-02T00:19:30Z,2022-02-07T18:06:44Z,carlos-zamora,,carlos-zamora,carlos-zamora,carlos-zamora,,,
microsoft/terminal,12350,"reset to inherited value button doesn't render properly in win 10 ### Windows Terminal version

1.13.10336.0

### Windows build number

10.0.19044.1503

### Other Software

_No response_

### Steps to reproduce

open settigs ui and change any config

### Expected Behavior

bent arrow redered in the button

### Actual Behavior

![image](https://user-images.githubusercontent.com/43626415/152407113-5ebd960e-0212-44d1-8a18-95bb10de3972.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-3;zStable-Service-Queued-1.12;zPreview-Service-Queued-1.13;Area-Settings UI,2022-02-03T18:37:51Z,2022-02-08T23:10:40Z,LuanVSO,,zadjii-msft,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,12351,"Localization gone since 1.13.10336.0 ### Windows Terminal version

1.13.10336.0

### Windows build number

22000.469

### Other Software

_No response_

### Steps to reproduce

Install Windows Terminal Preview 1.13.10336.0.

### Expected Behavior

Previously available localizations remain.

### Actual Behavior

The entire UI has lost its localization and switched to English. I can also see under Settings -> Appearance -> Language that English is the only option available apart from the ""system default"" option. My system locale is de-DE.",lhecker;miniksa,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Priority-0;Area-Localization,2022-02-03T19:31:37Z,2022-02-05T18:46:19Z,adrianghc,DHowett;jfcherng;fxzxmic;lhecker,DHowett;zadjii-msft,,zadjii-msft;miniksa,,,
microsoft/terminal,12353,"As of latest preview version (1.13.10336.0), homedir alias (~) no longer recognized. ### Windows Terminal version

1.13.10336.0

### Windows build number

22000.466

### Other Software

_No response_

### Steps to reproduce

Open up Terminal Preview, drop down arrow to start a WSL distro session.

### Expected Behavior

Session would open normally.

### Actual Behavior

[error 2147942667 (0x8007010b) when launching `ubuntu.exe']
Could not access starting directory ""~""",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalConnection;Product-Terminal;Priority-1;zStable-Service-Queued-1.12;zPreview-Service-Queued-1.13,2022-02-03T20:24:57Z,2022-02-09T00:16:35Z,akulbe,DHowett;akulbe;zadjii-msft,zadjii-msft;DHowett,DHowett;zadjii-msft,zadjii-msft,,,
microsoft/terminal,12356,"Acrylic Broken ### Windows Terminal version

1.13.10336.0

### Windows build number

Microsoft Windows [Version 10.0.19044.1503]

### Other Software

_No response_

### Steps to reproduce

1. Install The Latest Version Of Windows Terminal Preview On Windows 10.
2. Boom, Title bar Acrylic Broken

### Expected Behavior

Acrylic On Title Bar Works

### Actual Behavior

Acrylic Title Bar Very White",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1;zPreview-Service-Queued-1.13,2022-02-03T22:42:37Z,2022-02-15T12:07:07Z,Mukul1127,zadjii-msft;Snowknight26;Mukul1127;jiangzhenjerry;zadjii;pranavAbe,zadjii-msft,,,,,
microsoft/terminal,12370,"DefTerm + elevate by default does not work AT ALL ### Windows Terminal version

1.13.10336.0

### Windows build number

10.0.22543.1000

### Other Software

_No response_

### Steps to reproduce

![image](https://user-images.githubusercontent.com/85196642/152552528-981303c8-940b-4ee5-91d6-59bb8e41949a.png)
1. Default Terminal Application: Windows Terminal Preview
2. Defaults profile - Run this profile as administrator automatically
-
Now run Command Prompt (cmd.exe)

### Expected Behavior

Only Windows Terminal should open when its set as default and set to run as administrator on launch.

### Actual Behavior

When opening Command Prompt and having Terminal run as admin by default first asks for UAC so it can open and then old cmd.exe opens in the background with Terminal being unresponsive and only way of being able to close it is with Task Manager
![image](https://user-images.githubusercontent.com/85196642/152551703-35fe9dac-d913-4f87-9d87-592666958b7e.png)
![image](https://user-images.githubusercontent.com/85196642/152551796-e7f6b3ba-4e35-4c63-bddb-4650eda8dfd6.png)

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-1;zPreview-Service-Queued-1.13;Area-DefApp,2022-02-04T15:09:13Z,2022-02-09T00:03:20Z,Void48,,zadjii-msft;DHowett,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,12383,"Terminal 1.13 doesn't work on N SKU ### Windows Terminal version

1.13.10336.0

### Windows build number

10.0.19044.1466

### Other Software

_No response_

### Steps to reproduce

Upgrading to the 1.13 terminal preview led to a situation where it seems to crash(?) on start.  This occurs even after fully removing the app from the store and re-installing.

There is nothing in the eventlog. The window briefly flashes and then disappears.

The older, 1.12 terminal still seems to work.

### Expected Behavior

_No response_

### Actual Behavior

Crash on start.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;zPreview-Service-Queued-1.13,2022-02-04T23:54:32Z,2022-02-15T12:19:26Z,jessey-git,zadjii-msft;elsaco;jessey-git;KalleOlaviNiemitalo;chizou;ManikandanMani,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,12384,"`startOnUserLogin` isn't working anymore (on 1.12, Windows 10) ### Windows Terminal version

1.12.10334.0

### Windows build number

10.0.19044 .0

### Other Software

No

### Steps to reproduce

I have recently upgraded windows terminal Version: 1.12.10334.0

### Expected Behavior

If startOnUserLogin key was set to true in settings.json file and Launch on machine startup was toggled on in windows terminal/terminal settings, it should launch on startup.

### Actual Behavior

After updating to windows terminal latest Version: 1.12.10334.0, it doesn't launches on startup, windows terminal wasn't found on taskmanager startup programs and windows settings startup apps, even though startOnUserLogin set to true, in the settings.json file.
![image](https://user-images.githubusercontent.com/42301172/152631768-59c69a54-72fb-4fc4-b029-abb94086afdc.png)
![image](https://user-images.githubusercontent.com/42301172/152631810-cd5b0043-e44b-41a4-8dd3-155ea7060cf0.png)
",zadjii-msft;DHowett,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-1;zStable-Service-Queued-1.12;zPreview-Service-Queued-1.13,2022-02-05T06:45:30Z,2022-02-15T15:11:27Z,ManikandanMani,BrianHo888;lino-man;zadjii-msft;J-HS-L;ManikandanMani,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,12401,"Blinking cursor shows up in TUI programs (where it shouldn't) in 1.13 ### Windows Terminal version

1.13.10336.0

### Windows build number

10.0.19044.1348

### Other Software

scoop install [vifm](https://vifm.info)

_and_

scoop install [ncspot](https://github.com/hrkfdn/ncspot)

### Steps to reproduce

Just launch the programs. See below.

![cursor](https://user-images.githubusercontent.com/46838874/152695110-7285ba2e-22dc-401b-a74d-5bd7a5553780.gif)

![cursor1c](https://user-images.githubusercontent.com/46838874/152696172-6c523a5d-3249-411e-81cf-0fdd34dfccce.gif)


### Expected Behavior

The cursor wasn't showing up (at all) in 1.12 Preview. It shouldn't appear.

### Actual Behavior

The cursor appears.


Possibly related - https://github.com/microsoft/terminal/issues/12372 ?",lhecker,Resolution-Fix-Committed;Area-VT;Issue-Bug;Needs-Triage;Product-Terminal;Priority-2,2022-02-06T18:38:47Z,2022-02-08T23:08:01Z,rashil2000,lhecker;rashil2000;j4james;elsaco,lhecker,lhecker,lhecker,,DHowett,
microsoft/terminal,12420,"Unable to find the selected font ""Cascadia Mono"" in Windows 10 ### Windows Terminal version

1.13.10336.0

### Windows build number

10.0.19044.0

### Other Software

I have both Windows Terminal (1.11.3471.0) and Windows Terminal Preview (1.13.10336.0) installed. The Store says Windows Terminal Preview updated today, but both apps are unable to find the ""Cascadia Mono"" font, which I'm told should be bundled with the app.

### Steps to reproduce

Open Windows Terminal Preview

### Expected Behavior

A ""Warning"" popup does not appear.

### Actual Behavior

A ""Warning"" popup in the Terminal window appears with the following text
```
Unable to find the selected font ""Cascadia Mono"".

""Consolas"" has been selected instead.

Please either install the missing font or choose another one.
```",lhecker,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-3,2022-02-07T21:35:16Z,2022-03-10T12:36:44Z,anthonypants,rlabrecque;zadjii-msft;lhecker;srdjanjovcic,lhecker,lhecker,lhecker,,zadjii-msft,
microsoft/terminal,12433,"AGI-P1 Maximize icon should be rounded ### Windows Terminal version

1.13.10333.0

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

In our latest update to Preview, we added the snap assist functionality to the min/max/close control. Along with this and moving towards the Windows 11 styling, we should also make the maximize icon a rounded square.

### Expected Behavior

It should look something like this (taken from PowerPoint):
![image](https://user-images.githubusercontent.com/48369326/153053503-30c2fc38-570b-4853-a2e3-9736ead839ce.png)

### Actual Behavior

Currently it looks like this:
![image](https://user-images.githubusercontent.com/48369326/153053404-0d31e5ef-951a-460a-a180-ac3ead478d86.png)",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-1;zInbox-Bug;zAskModeBug,2022-02-08T18:37:51Z,2022-03-10T23:16:03Z,cinnamon-msft,zamadatix;zadjii-msft,cinnamon-msft;zadjii-msft;DHowett,zadjii-msft;DHowett,zadjii-msft,,,
microsoft/terminal,12446,"German translations of actions containing the english ""tab"" use ""tab"" and ""Registerkarte"" inconsistently ### Windows Terminal version

1.11.3471.0

### Windows build number

10.0.19043.0

### Other Software

_No response_

### Steps to reproduce

In a german terminal press Ctrl+Shift+P and search ""Tab"" and ""Registerkarte"".



### Expected Behavior

Actions with ""tab"" or ""Tab"" in their name should be translated consistently as either ""Tab"" or ""Registerkarte"" but not both. ""tab"" should not be used as nouns are capitalized in German.

### Actual Behavior

""Tab"" will be translated inconsistently as ""Tab"", ""tab"", or ""Registerkarte"".",lhecker,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Tracking-External;Area-Localization,2022-02-09T10:01:03Z,2022-02-17T14:12:25Z,kulukimak,lhecker,kulukimak;zadjii-msft;lhecker;DHowett,zadjii-msft;DHowett,zadjii-msft,,lhecker,
microsoft/terminal,1245,"linewrap then backspace produces unexpected visuals, missing characters # Environment

Windows build number: Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version (if applicable): built using d82eab44d076e441f0b630d9b53a19dfa884c3ab

# Steps to reproduce

* open terminal with following profile:
```json
{
    ""globals"" : 
    {
        ""alwaysShowTabs"" : false,
        ""defaultProfile"" : ""{9d2406b9-7e40-4e2b-a20d-82dc61c4cc24}"",
        ""initialCols"" : 80,
        ""initialRows"" : 60,
        ""requestedTheme"" : ""dark"",
        ""showTabsInTitlebar"" : true,
        ""showTerminalTitleInTitlebar"" : false
    },
    ""profiles"" : 
    [
        {
            ""acrylicOpacity"" : 0.80000001192092896,
            ""closeOnExit"" : true,
            ""colorScheme"" : ""Solarized Dark"",
            ""commandline"" : ""cmd.exe"",
            ""cursorColor"" : ""#FFFFFF"",
            ""cursorShape"" : ""bar"",
            ""fontFace"" : ""Consolas"",
            ""fontSize"" : 10,
            ""guid"" : ""{9d2406b9-7e40-4e2b-a20d-82dc61c4cc24}"",
            ""historySize"" : 9001,
            ""name"" : ""cmd"",
            ""padding"" : ""0, 0, 0, 0"",
            ""snapOnInput"" : true,
            ""startingDirectory"" : ""%USERPROFILE%"",
            ""useAcrylic"" : true
        }
    ]
}
```

* input characters until the line wraps, backspace once, and enter an additional character


# Expected behavior

* Cursor should return to the previous position following the last character on the previous line after hitting backspace.  
* Additional input character (sent after backspace) should show up after the last character on the previous line.

# Actual behavior

* Cursor returns to previous line, but with a whitespace between the last character input and the cursor position
* Additional input character does not show up in terminal, although it is recognized

'..789ab' is received as input in the example below, even though it is not shown:
![GIF of issue](http://www.feasible.net/images/linewrapissue.gif)",zadjii-msft,Resolution-Fix-Committed;Area-Output;Issue-Bug;Product-Terminal;Priority-2,2019-06-13T16:06:05Z,2020-02-11T21:52:21Z,fredless,DHowett-MSFT;fredless;zadjii-msft;miniksa;riverar,DHowett-MSFT;zadjii-msft,DHowett-MSFT;zadjii-msft,zadjii-msft,zadjii-msft,,
microsoft/terminal,12452,Rejuvenated UI doesn閳ユ獩 pick up Segoe UI Variable on Windows 11 What it says on the tin.,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Needs-Triage;Product-Terminal;Priority-1,2022-02-10T00:23:16Z,2022-02-11T20:55:07Z,fitojb,DHowett;zadjii-msft;fitojb,DHowett,,zadjii-msft,,,
microsoft/terminal,1250,"Windows Terminal hangs when shell exits # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version (if applicable): d82eab44d076e441f0b630d9b53a19dfa884c3ab
```

# Steps to reproduce

1. Open Windows Terminal
2. Have your shell terminate, e.g. by typing `exit`

# Expected behavior

The tab, or the whole window, closes.

# Actual behavior

Windows Terminal hangs, leading to a _WindowsTerminal.exe is not responding_ eventually.
",DHowett-MSFT,Issue-Bug;Area-TerminalConnection;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-06-13T19:22:42Z,2019-06-18T00:32:31Z,fefrei,fefrei;DHowett-MSFT;robleg88,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,12507,"Missing cursor when experimental text rendering engine is enabled in HDR enabled monitor ### Windows Terminal version

1.13.10395.0

### Windows build number

10.0.22000

### Other Software

Plain vanilla Powershell

### Steps to reproduce

1. Enable Experimental text rendering engine in the advanced submenu of the Powershell profile and save config.
2. Open a Windows Powershell, Powershell Core, or Command Prompt tab. **on an HDR monitor.**

### Expected Behavior

The cursor should appear and blink.

### Actual Behavior

No cursor at all, not even a solid cursor shows up.

**Disabling experimental rendering brings back a fully functional blinking cursor.
Moving the Terminal window to a monitor without HDR brings the cursor back.**
",lhecker,Resolution-Fix-Committed;Issue-Bug;Needs-Attention;Product-Terminal;Needs-Tag-Fix;Priority-3;Area-AtlasEngine,2022-02-16T22:39:16Z,2022-02-22T18:11:24Z,okibcn,lhecker;zamadatix;okibcn,okibcn;zadjii-msft;lhecker,zadjii-msft,lhecker,,,
microsoft/terminal,12512,"experimental.useAtlasEngine breaks draw-box rendering ### Windows Terminal version

1.13.10336.0

### Windows build number

10.0.22000.0

### Other Software

Any application which uses pseudo graphics.

### Steps to reproduce

Enable this feature and restart Terminal. Open any program which uses pseudo graphics. Far, Musikcube etc.

### Expected Behavior

There should be no distortion

### Actual Behavior


![ss-1](https://user-images.githubusercontent.com/78153320/154446002-55733a76-76fb-4767-a748-f1d4daecf011.png)

![ss-2](https://user-images.githubusercontent.com/78153320/154447231-7651a0aa-15a0-441d-92a5-66b950fdea23.png)

",lhecker,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-AtlasEngine,2022-02-17T09:36:06Z,2022-08-01T15:41:59Z,237dmitry,zadjii-msft;lhecker;brwilkinson;237dmitry;jessey-git,237dmitry;zadjii-msft,zadjii-msft,lhecker,,,
microsoft/terminal,12570,"Show/Hide Operations on ::GetConsoleWindow() do not work against Terminal through ConPTY In attempting to make the Windows Terminal be the default terminal (#7414), we've discovered in testing that there are a lot of scenarios that were relying on manipulating the window handle from `::GetConsoleWindow()` in one way or another to show or hide the window state.

While we strongly discourage this as it isn't guaranteed to work in a universal way across platforms and systems... and is one of the APIs we have listed as ""deprecated"" on `docs.microsoft.com` for that exact reason... we're going to make a compromise solution here to try to make it work in enough scenarios that it will maintain compatibility with existing tooling that is relying on it. (One of the primary tenets of moving to Virtual Terminal sequences and the ConPTY is to make everything work in the ""universal language"" that all platforms support, so we strongly resist doing things ""for Windows only"".)

It looks like **XTWINOPS** (see https://invisible-island.net/xterm/ctlseqs/ctlseqs.html) is an existing sequence that will allow us to translate the window operations coming in and send them to the remote Terminal window. 

This may also work for some of the z-ordering issues of #2988 going forward.

The test case here specifically is doing:

```
::ShowWindow(::GetConsoleWindow(), SW_HIDE);
```

Or one of the other `SW_*` actions.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Interaction;Issue-Bug;Product-Terminal,2022-02-24T17:32:59Z,2022-04-27T18:20:15Z,miniksa,PhMajerus;miniksa;hwti;DHowett;zadjii-msft,miniksa;zadjii-msft,zadjii-msft,miniksa;zadjii-msft,miniksa,,microsoft/terminal#2988;
microsoft/terminal,12642,"Terminal WPF control doesn't support screen readers ### Windows Terminal version

1.11.3471.0

### Windows build number

10.0.19043.0

### Other Software

Microsoft Visual Studio 2019 and 2022

### Steps to reproduce

1. Turn on Narrator or any other screen reader
2. Open the WPF Control Test project under the Terminal repo
3. Write any command and press enter

### Expected Behavior

Screen readers read the console output

### Actual Behavior

Screen readers ignore the output and only read the written letters",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1;Area-WPFControl,2022-03-08T15:59:52Z,2022-10-06T23:11:49Z,javierdlg,javierdlg,javierdlg;zadjii-msft,zadjii-msft;DHowett,carlos-zamora,,,
microsoft/terminal,12673,"TestHostApp build fails in VS2022 ('/ZW' and '/std:c++20' command-line options are incompatible) ### Windows Terminal version

f17c2babd4f22c21b9ad0897f884b2b3dbe173f1

### Windows build number

_No response_

### Other Software

Visual Studio 2022 (17.1.1)

### Steps to reproduce

Clone repo
Restore git submodules
Open OpenConsole.sln in Visual Studio
<work around https://github.com/microsoft/terminal/issues/12671>
Build project x64|Debug

### Expected Behavior

The build succeeds

### Actual Behavior

```
4>------ Build started: Project: TestHostApp, Configuration: Debug x64 ------
4>main
4>C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(560,5): error MSB6006: ""CL.exe"" exited with code 2.
4>cl : command line error D8016: '/ZW' and '/std:c++20' command-line options are incompatible
4>Done building project ""TestHostApp.vcxproj"" -- FAILED.
```",lhecker,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Needs-Tag-Fix,2022-03-11T21:38:10Z,2022-03-14T15:04:19Z,dmachaj,,dmachaj;lhecker,,lhecker,,lhecker,
microsoft/terminal,1278,"Crash on `exit` after previously closing a pane with non-leaf sibling <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version (if applicable): master
```

# Steps to reproduce

Open terminal and split the main pane vertically. Then split the left-hand pane horizontally. You should now have 3 panes, named A, B, C shown in the configuration and tree structure below:

```none
+---+---+   1: parent
| A |   |   閳规壕鏀㈤埞 2: parent
+---+ B |   |   閳规壕鏀㈤埞 3: A
| C |   |   |   閳规柡鏀㈤埞 4: C
+---+---+   閳规柡鏀㈤埞 5: B
```

Now `exit` pane B, then `exit` either of panes A or C.

# Expected behavior

The second exited pane will close, leaving one pane open.

# Actual behavior

Terminal crashes.

# More information

I believe this is due to a bug in Pane::_CloseChild where close event handlers are not correctly revoked when the remaining child pane is non-leaf. Proposed fix: #1279 ",DHowett-MSFT,Resolution-Fix-Available;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal,2019-06-15T13:22:19Z,2019-06-29T01:17:32Z,peterdn,DHowett-MSFT,zadjii-msft;DHowett-MSFT,DHowett-MSFT,cinnamon-msft,,DHowett-MSFT,
microsoft/terminal,128,"Unexpected behaviour when bold and reverse ANSI attributes are combined **Windows build number:** [Version 10.0.16299.248]

The ANSI sequence `\033[1;7m` sets both the bold (increased intensity) attribute and the negative/reverse attribute, but when those attributes are combined, I'd expected the increased intensity to apply to the *final* foreground color (i.e. after the colors have been reversed), so you'd get ""bright"" black on regular white, rather than black on bright white.

The former behaviour is what I see under MS-DOS (with ANSI.SYS) and the Linux console. But the Windows console applies the increased intensity to the foreground *before* the colors are reversed, so you end up with black on bright white instead.

**Test case (from a bash shell):** `printf ""\033[0;1;7m ACTUAL \033[0;1;30;47m EXPECTED \033[m\n""`

I realise things are more complicated under Windows, since many more colors are supported, so it's possible this is intentional behaviour. However, I thought it best to bring it up in case it is a bug.

Also note that I'm referring to the behaviour as seen in a fresh console window. Things get weirder once you apply a 24-bit color and trigger the strange mode reported in issue #78. I'm not sure if the fix for that issue is likely to effect this behaviour too.",zadjii-msft,Work-Item;Product-Conhost;Resolution-By-Design;Area-VT;Issue-Bug,2018-03-08T01:03:36Z,2019-08-29T21:56:48Z,j4james,zadjii-msft;j4james;egmontkob,zadjii-msft;miniksa,zadjii-msft;miniksa,zadjii-msft,,zadjii-msft,
microsoft/terminal,12816,"Can't install Terminal 1.12.10732.0 using DISM on Windows 11 ### Windows Terminal version

1.12.10732.0

### Windows build number

10.0.22000.556

### Other Software

_No response_

### Steps to reproduce

```cmd
SET WINTERMVERSION=1.12.10732.0
curl -Lo terminal-preinstall.zip https://github.com/microsoft/terminal/releases/download/v%WINTERMVERSION%/Microsoft.WindowsTerminal_Win10_%WINTERMVERSION%_8wekyb3d8bbwe.msixbundle_Windows10_PreinstallKit.zip
MKDIR term
tar -C term -xvf terminal-preinstall.zip
FOR %%i IN (term\*.msixbundle) DO SET MSIX=%%i
FOR %%i IN (term\*_License1.xml) DO SET LIC=%%i
DISM /Online /Add-ProvisionedAppxPackage /PackagePath:%MSIX% /LicensePath:%LIC%
```

### Expected Behavior

Installs the updated version, as it did with `WINTERMVERSION=1.11.3471.0` (without the extra `_Win10_` before the version in the download filename)

### Actual Behavior

```
2022-04-03 20:07:28, Error                 DISM   DISM Appx Provider: PID=1452 TID=7716 onecore\admin\appmodel\utilities\provisionhelper\msixprovisioningrequest.cpp(878)\AppxProvider.dll!00007FFC98D761A4: (caller: 00007FFC98D74734) ReturnHr(1) tid(1e24) C1570118     Msg:[Failed while adding package Microsoft.WindowsTerminal_1.12.10732.0_neutral_~_8wekyb3d8bbwe since an equal or higher version of the package, Microsoft.WindowsTerminal_2021.226.1915.0_neutral_~_8wekyb3d8bbwe, already exists] 
 - CAppxManager::ResultLoggingCallback
2022-04-03 20:07:28, Error                 DISM   DISM Appx Provider: PID=1452 TID=7716 onecore\admin\appmodel\utilities\provisionhelper\msixprovisioningrequest.cpp(180)\AppxProvider.dll!00007FFC98D74790: (caller: 00007FFC98D73F54) ReturnHr(2) tid(1e24) C1570118     Msg:[Failed to remove existing package version for 'Microsoft.WindowsTerminal_1.12.10732.0_neutral_~_8wekyb3d8bbwe'.] 
 - CAppxManager::ResultLoggingCallback
2022-04-03 20:07:28, Error                 DISM   DISM Appx Provider: PID=1452 TID=7716 onecore\admin\appmodel\utilities\provisionhelper\msixprovisioningrequest.cpp(79)\AppxProvider.dll!00007FFC98D743F4: (caller: 00007FFC98D7FF70) ReturnHr(3) tid(1e24) C1570118     Msg:[Failed to add main bundle package for provisioning.] 
 - CAppxManager::ResultLoggingCallback
2022-04-03 20:07:28, Error                 DISM   DISM Appx Provider: PID=1452 TID=7716 onecore\admin\appmodel\utilities\provisionhelper\msixpackageadapter.cpp(1439)\AppxProvider.dll!00007FFC98D7FFA0: (caller: 00007FFC98D75A10) ReturnHr(4) tid(1e24) C1570118     Msg:[Failed to initialize package adapter.] 
 - CAppxManager::ResultLoggingCallback
2022-04-03 20:07:28, Error                 DISM   DISM Appx Provider: PID=1452 TID=7716 onecore\admin\appmodel\utilities\provisionhelper\msixprovisioningrequest.cpp(651)\AppxProvider.dll!00007FFC98D75B54: (caller: 00007FFC98D7A0B4) ReturnHr(5) tid(1e24) C1570118     Msg:[Failed to create adapter for 'term\a372015b7dfd43638e7e21f052c12151.msixbundle'.] 
 - CAppxManager::ResultLoggingCallback
2022-04-03 20:07:28, Error                 DISM   DISM Appx Provider: PID=1452 TID=7716 onecore\admin\appmodel\utilities\provisionhelper\msixprovisioningmanager.cpp(920)\AppxProvider.dll!00007FFC98D7A0E8: (caller: 00007FFC98D4A2B8) ReturnHr(6) tid(1e24) C1570118     Msg:[Failed to add package 'term\a372015b7dfd43638e7e21f052c12151.msixbundle' to adapter set for processing.] 
 - CAppxManager::ResultLoggingCallback
```",DHowett,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Terminal;Priority-1;zAskModeBug,2022-04-03T20:41:16Z,2022-04-04T21:46:55Z,jeremyd2019,jeremyd2019;zadjii-msft;DHowett,jeremyd2019;zadjii-msft;DHowett,DHowett,zadjii-msft,,,
microsoft/terminal,12842,"profiles.defaults should be default values, not override values, or make a new section for overridable defaults The current implementation of Terminal applies the settings found in profiles.default to all profiles, regardless of whether the individual profile has its own value for any of those settings.  Unfortunately, this behavior is unexpected and confusing.  The only reasoning I can come up with is that profiles.default was meant to override settings from automatic profiles that aren't defined in settings.json at all.  For profiles defined in settings.json, the expectation for profiles.default would be that any setting not defined in an individual profile would get its value from profiles.default, but if a setting *is* provided in the individual profile the corresponding setting in profiles.default would be ignored.

Please change Terminal so profiles.default behaves in an expected way, providing default values and not override values.  If an overriding section is really needed, then create a new profiles.overrides section for this.  With the current implementation, it is not possible to define several profiles and have most of them use a common value for some settings, while one or two exception profiles do something different without copying that setting to every individual profile.  profiles.default has very little value when it forces itself onto every profile.
If profiles.default can't change for some reason, then consider creating a new section (maybe profiles.fallback) for overridable defaults or fallback values that individual profiles can override if they provide a value for that setting in the profile.",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Priority-2;zPreview-Service-Queued-1.13,2022-04-06T16:22:25Z,2022-04-18T19:15:22Z,DJackman123,zadjii-msft;DHowett;DJackman123,DJackman123;zadjii-msft;DHowett,DHowett;zadjii-msft,lhecker,,,
microsoft/terminal,13002,"Issues with experimental.useBackgroundImageForWindow * [x] When the background is set on `profiles.defaults`, it does not apply (the entire window is transparent and all backgrounds are dropped)
* [x] Closing/opening panes of the same type causes the background image to flicker
* [x] The settings preview control no longer displays a background; we might want to ensure that it _overrides_ the setting that drops out the background
* [x] `desktopWallpaper` doesn't work at all 
* [x] Switching between two profiles with the same bg image flashes at you",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Priority-0,2022-04-29T18:57:36Z,2022-05-12T22:49:14Z,DHowett,zadjii-msft;rashil2000;DHowett;lhecker,zadjii-msft,zadjii-msft,lhecker,,,
microsoft/terminal,13029,"Powerline glyph does not fill whole 'cell' / 'box' height ### Windows Terminal version

1.12.10982.0

### Windows build number

10.0.19044.1645

### Other Software

Cascadia Code 2111.01

### Steps to reproduce

* Install static `Cascadia Code PL Regular` [1]:
  * `ttf/static/CascadiaCodePL-Regular.ttf` or
  * `otf/static/CascadiaCodePL-Regular.otf`
* Use it as font with 12 pt
* Utilize the powerline glyphs like so (copy and paste into command prompt terminal window):
  `set prompt=$E[0;33;40m椤$E[7;33;40m Manuel $E[0;33;40m椤$E[7;32;40m椤 椤 ~ $E[0;32;40m椤$E[7;34;40m椤 椋 $E[0;34;40m椤$E[0;37;40m $g`

[1] https://github.com/microsoft/cascadia-code/releases/tag/v2111.01

### Expected Behavior

The upper and lower 'border' of the powerline glyphs shall line up with the 'cell' top and bottom.
Cell top and bottom can be seen if insert a blank with reverse colors (like done in the prompt command above).

This is how it should look like, roughly (magnified 400%):

![image](https://user-images.githubusercontent.com/16012374/166445737-77ba0a2d-1d9a-4c89-b511-1afcdf598234.png)


### Actual Behavior

The glyphs are about 1 pixel to small vertically; here with the `otf` one pixel at the bottom seems to be missing:

![image](https://user-images.githubusercontent.com/16012374/166445966-9c06e4aa-56a2-43df-aa43-320bcce82eb8.png)

This is most notable with the rounded D shape powerline symbols, but in fact are present in all.

![image](https://user-images.githubusercontent.com/16012374/166446192-519be1ba-74de-4d61-8ea0-d6c92805f921.png)

The static `ttf` seem to have the missing pixel in the top.
I did not try the VF.

Origin of issue: Bottom (after closing) https://github.com/ryanoasis/nerd-fonts/issues/828

I believe this is not a Cascadia Code issue, because the original issue came up with a Nerd Font patched version of that font (Caskaydia Cove); and in the process of that issue I tried a lot like ascent and descent changing (all of them OS/2, typo, Win etc ;), PPEM modification, etc pp, all to no avail.
I do not really know how `Windows Terminal` finds out its cell size. If one understands that maybe the font can be beat into function. But I fear that it is a rendering issue, as this is always 1 px big, regardless of font size in point.

_Edit: Fix typo_",lhecker,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-3,2022-05-03T11:46:53Z,2022-08-02T17:00:19Z,Finii,zadjii-msft;lhecker,Finii;zadjii-msft;lhecker,zadjii-msft,zadjii-msft,,,
microsoft/terminal,13079,"Extreme sluggishness and CPU usage when using Atlas inside a VM ### Windows Terminal version

1.13.10983.0

### Windows build number

10.0.19044.1645

### Other Software

None

### Steps to reproduce

- Use Terminal inside a typical VM
- Switch to the experimental Atlas engine
- Observe CPU load
- Try to type and experience sluggishness and even higher CPU load etc.  There's a decent amount of lag and output from long commands tends to stutter into view; it's not very smooth

### Expected Behavior

Was expecting that Atlas, in default/easy cases, would perform better than the old engine.

Looking ahead: IF atlas becomes the default and IF Terminal replaces all old cmd windows, then using this inside VMs is going to be a non-starter.

### Actual Behavior

Extreme CPU usage and general sluggishness. Witness the firepower of this fully operational battle... I mean barely affordable Azure VM displaying nothing but the flashing cursor inside a blank Terminal window:

![atlas-perf](https://user-images.githubusercontent.com/7989986/167744410-1576f18e-27e4-4b72-a4d4-457db9d059b9.png)
![atlas-dxdiag](https://user-images.githubusercontent.com/7989986/167744490-c0cf7d48-d8e6-4c6b-a441-7e1391e253b1.png)

",lhecker,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-AtlasEngine,2022-05-11T00:18:51Z,2022-08-31T18:35:21Z,jessey-git,DHowett;lhecker;jessey-git,jessey-git;lhecker;DHowett;zadjii-msft,DHowett;zadjii-msft,lhecker,,lhecker,
microsoft/terminal,1311,"Rendering slows down under load <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18922.1000]

```

# Steps to reproduce
When working under load, (was building an Android project at the time), I had a second tab open trying to copy/paste or type git commands.

<!-- A description of how to trigger this bug. -->

# Expected behavior

One tab shouldn't affect another. Rendering on the new tab was error prone with strange behavior at times.

Performing the same actions in a separately opened PowerShell or command prompt window performed as expected with little to no input latency.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

<!-- What's actually happening? -->

Each character from the pasted text appeared individually, one after another with a noticeable pause in between. Typing regular characters seemed to print out an incorrect character at times which was overwritten moments later by the correct one. At other times, the current line would re-render to the right of the cursor just to be overwritten as the cursor progressed.",miniksa,Resolution-Fix-Committed;Area-Performance;Issue-Bug;Product-Terminal,2019-06-19T00:42:53Z,2020-04-16T22:31:39Z,MSFTFox,zadjii-msft;MSFTFox;skyline75489;ocitrev;miniksa;DHowett-MSFT,zadjii-msft;DHowett-MSFT;miniksa,DHowett-MSFT;zadjii-msft;miniksa,,,zadjii-msft,
microsoft/terminal,1312,"Crashes on console text selection from bottom to top if mouse reaches window's titlebar 
<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Versi璐竛 10.0.18362.175]
Windows Terminal version (if applicable): 0.0.1.0

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Select text from bottom to top and reach to the window title while still holding the mouse.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Not to crash.

# Actual behavior

<!-- What's actually happening? -->
Crashes and closes the terminal.

![2019-06-18 19-28-11](https://user-images.githubusercontent.com/1015823/59728762-e9b32d80-9200-11e9-8911-36cdb386e874.gif)",carlos-zamora,Area-Interaction;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-06-19T00:44:53Z,2019-06-19T17:49:59Z,vhanla,DHowett-MSFT,carlos-zamora,carlos-zamora,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,13134,"ConPTY isn't behaving as expected ### Windows Terminal version

_No response_

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

When sending information from Wezterm to ConPTY it is not, behaving as expected. For example, the case for example of the right control key is not correctly interpreted, it is recognized as the same left control key.

more information here: https://github.com/wez/wezterm/issues/2009 and https://github.com/wez/wezterm/issues/1904


### Expected Behavior

_No response_

### Actual Behavior

We expect that ConPTY interpreted the information correctly. For example, the key control left and control right is interpreted independently.",DHowett,Product-Conpty;Area-Input;Issue-Bug;Needs-Triage,2022-05-20T01:25:16Z,2022-06-06T22:33:51Z,Event-Horizon-Labs,wez;DHowett,Event-Horizon-Labs;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,13183,"Terminal crashes when starting nano in bash when screen reader is enabled ### Windows Terminal version

1.14.1433.0 preview

### Windows build number

22621.1

### Other Software

* Nano in either WSL or ssh
* Narrator or NVDA 2022.1

### Steps to reproduce

1. Start wsl from the terminal
2. Type `nano test`

### Expected Behavior

Nano opens as expected

### Actual Behavior

WT crashes",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Product-Terminal;Severity-Blocking;Priority-0,2022-05-26T07:42:35Z,2022-06-10T18:09:09Z,leonardder,leonardder;codeofdusk;j4james;zadjii-msft,leonardder;zadjii-msft,zadjii-msft,,,,
microsoft/terminal,13211,"GUI apps still don't open in the foreground, from a default terminal launch A TCC user said that GUI apps started by TCC in WT don't get focus (unlike other shells in WT and unlike TCC in a console).  I said I didn't think I could get TCC and/or WT to act that way if I tried.  Have I overlooked anything ... any ideas?  Thanks!",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Severity-Blocking;Priority-0;Area-DefApp;Area-Windowing,2022-05-31T16:39:44Z,2022-06-09T23:12:26Z,vefatica,DHowett;vefatica;zadjii-msft;miniksa;ohenryx2,DHowett;zadjii-msft,zadjii-msft,,,,
microsoft/terminal,13229,"Terminal can omit backgrounds, links and underlines on empty cells **Original Title**: Hyperlink on spaces over-optimization breaks rendering and usability

### Windows Terminal version

1.14.1452.0

### Windows build number

10.0.22000.708

### Other Software

My ActiveScript Shell, just to use JScript to easily script the console, but problem is with VT optimization.


### Steps to reproduce

When a hyperlink contains trailing spaces, they are shown or trimmed depending on the number of trailing spaces.
Starting at 9 spaces or more, they get used as spacing, but are not considered part of the hyperlink, while 8 or less are properly rendered and clickable as part of the hyperlink.

### Expected Behavior

Hyperlinks extending on space characters can be a design decision for consistency and usability, the Terminal should not decide to shorten the number of columns the hyperlink is effectively available on.
Note non-preview build 1.12.10983.0 does not trim the spaces, so this is a new bug introduced in the Preview version 1.14.1452.0.

### Actual Behavior

Current Preview build seems over-agressive in optimizing the spaces, and swallows spaces without abiding by the original VT output of apps.

![image](https://user-images.githubusercontent.com/25664275/172058559-5cc604aa-5779-458b-99b6-9cd922b16287.png)
See how the spaces above the red underlines are different between 8 and 9 spaces.
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Area-Rendering;Product-Conpty;Issue-Bug;Severity-Blocking;Priority-0,2022-06-05T15:42:53Z,2022-08-05T19:31:12Z,PhMajerus,zadjii-msft;DHowett;j4james;PhMajerus,PhMajerus;zadjii-msft,zadjii-msft,,,,
microsoft/terminal,13238,"`[O` erroneously inputted after exiting from Neovim 0.7.0 in latest Terminal Preview ### Windows Terminal version

1.14.1451.0

### Windows build number

10.0.19044.1706

### Other Software

Neovim 0.7.0 (https://github.com/neovim/neovim/releases/tag/v0.7.0)

### Steps to reproduce

1. Install Neovim
2. Open it by running `nvim` in your shell (works both in `cmd` and `pwsh`)
3. exit it (`:q`)

### Expected Behavior

Neovim exits, nothing else happens.

### Actual Behavior

Neovim exits, and the shell receives `[O` on its console input.

![image](https://user-images.githubusercontent.com/6414091/172247280-950814dc-16d4-4ff2-b46b-2dce47365c62.png)

My guess would be that the characters are part of a response to some VT escape code from Neovim, but for some reason they get written separately and the shell gets them instead of Neovim.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-2,2022-06-06T20:55:32Z,2022-06-10T18:38:47Z,MatejKafka,zadjii-msft;MatejKafka;justinmk;j4james;nathpete-msft;DHowett,MatejKafka;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,13253,"Scroll wheel no longer works correctly in OpenConsole ### Windows Terminal version

Commit ed27737233714dea77877624d1beeb49e2ccd36e

### Windows build number

10.0.19044.1706

### Other Software

_No response_

### Steps to reproduce

1. Checkout commit ed27737233714dea77877624d1beeb49e2ccd36e or later.
2. Build and run OpenConsole.
3. Perform a few directory listings or something to get a couple of pages into the buffer.
4. Use the scroll wheel to scroll back in the buffer.
5. Use the scroll wheel to scroll forward again.


### Expected Behavior

Scrolling should work correctly in both directions.

### Actual Behavior

When I attempt to scroll forward, the viewport immediately jumps back to the start of the buffer.

I did a git bisect, and it looks like this problem may have been introduced by commit ed27737233714dea77877624d1beeb49e2ccd36e.

/cc @lhecker ",lhecker,Product-Conhost;Resolution-Fix-Committed;Area-Input;Issue-Bug;Severity-Blocking;Priority-0,2022-06-09T00:31:17Z,2022-06-09T19:55:05Z,j4james,lhecker;j4james,j4james;zadjii-msft,zadjii-msft,lhecker,,,
microsoft/terminal,13270,"Weird scrolling regression in the GDI renderer ### Windows Terminal version

Commit 75e462441d8ce2e32a363ea2f66ad3a035c50f90

### Windows build number

10.0.19044.1706

### Other Software

_No response_

### Steps to reproduce

1. Checkout commit ed27737233714dea77877624d1beeb49e2ccd36e or later.
2. Make sure you've got the GDI renderer enabled in the registry (i.e. `UseDx` is 0).
3. Build and run OpenConsole.
4. Perform a directory listing to make the viewport scroll.
5. Press enter a few times to scroll some more.

### Expected Behavior

Just normal scrolling.

### Actual Behavior

Random bits of the screen scrolling independently of each other. Here's an example of the sort of thing I end up with.

![image](https://user-images.githubusercontent.com/4181424/173161769-13c40604-05fe-4d73-9567-776203ec67f4.png)

I'm not sure how I hadn't noticed this before, but I think I've been using the DX renderer and only recently switched back to GDI (that's the only renderer that seems to be affected).

/cc @lhecker I think this might be PR #13025 again.",lhecker,Product-Conhost;Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Needs-Triage;Priority-1,2022-06-10T23:26:19Z,2022-06-13T11:18:53Z,j4james,lhecker;j4james,j4james;lhecker,,lhecker,,,
microsoft/terminal,13314,"DxD: Terminal tells you that it can be set as default even when it was DxD'd ### Windows Terminal version

1.15

### Windows build number

25000

### Other Software

_No response_

### Steps to reproduce

Launch a command-line application!

### Expected Behavior

I bet we can suppress the pop-up for *any* incoming handoff. Just, if the user receives a handoff immediately hard-dismiss the alert.

### Actual Behavior

<img width=""527"" alt=""image"" src=""https://user-images.githubusercontent.com/189190/174173328-fb73b89f-f5ab-4e4d-b67e-6478c1af4fec.png"">
",lhecker,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Severity-Blocking;Priority-0;Area-DefApp,2022-06-16T21:55:47Z,2022-06-21T23:02:30Z,DHowett,,DHowett;zadjii-msft,DHowett,lhecker,,,
microsoft/terminal,13323,"SerializationTests::Actions started failing recently ### Windows Terminal version

Commit 848314ef17419430153561016d1fabe912338844

### Windows build number

10.0.19044.1706

### Other Software

_No response_

### Steps to reproduce

1. Build a recent commit of OpenConsole (I think anything after 799b5d4add799ac2fbf5c855b774cd7dcb957697 should do).
2. Run the unit tests.

### Expected Behavior

All the tests should pass.

### Actual Behavior

There is a failure in `SettingsModelLocalTests::SerializationTests::Actions` when attempting to serialize the pair of `findMatch` actions. It seems that the commands are being reordered.

<details>
  <summary>Click to see error</summary>
  
```
Error: Verify: AreEqual(toString(json), toString(result)) - Values ([
        {
                ""command"" :
                {
                        ""action"" : ""findMatch"",
                        ""direction"" : ""next""
                },
                ""keys"" : ""ctrl+shift+s""
        },
        {
                ""command"" :
                {
                        ""action"" : ""findMatch"",
                        ""direction"" : ""prev""
                },
                ""keys"" : ""ctrl+shift+r""
        }
], [
        {
                ""command"" :
                {
                        ""action"" : ""findMatch"",
                        ""direction"" : ""prev""
                },
                ""keys"" : ""ctrl+shift+r""
        },
        {
                ""command"" :
                {
                        ""action"" : ""findMatch"",
                        ""direction"" : ""next""
                },
                ""keys"" : ""ctrl+shift+s""
        }
])
```
</details>

I'm not sure if this is actually an indication of a bug - is the order of the commands expected to be retained? But at the very least I'd expect the test to be corrected if this is just an altered hash map order or something of that sort.

If it helps, I think the first time the test stopped working was after commit 799b5d4add799ac2fbf5c855b774cd7dcb957697.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Area-CodeHealth,2022-06-18T19:14:58Z,2022-07-27T19:39:53Z,j4james,zadjii-msft,j4james;zadjii-msft,,zadjii-msft,,,
microsoft/terminal,13325,"[DxD] `closeOnExit` should be sensible when launched via defterm ### Windows Terminal version

Windows Terminal Version: 1.13.11432.0

### Windows build number

Microsoft Windows [Version 10.0.22000.739]

### Other Software

_No response_

### Steps to reproduce

1. Turn PC on
2. Wait approximately 30min
3. Windows Terminal opens with error ""ERROR: The specified directory does not exist.""

### Expected Behavior

Windows Terminal shouldn't opens every time I turn PC on. 

### Actual Behavior

Every time I turn PC on and approximately after 30min Windows Terminal automatically opens new windows terminal with error ""ERROR: The specified directory does not exist."" WT startup is turned off. I don't use additional script to open WT.
Screenshot of the error https://prnt.sc/OTSf0FKHT9Dt
Full tab path C:\WINDOWS\System32\forfiles.exe",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Priority-1;Area-DefApp,2022-06-19T07:42:05Z,2022-08-01T21:11:20Z,Andrew1988123123,zadjii-msft,Andrew1988123123;zadjii-msft,zadjii-msft,zadjii-msft;PankajBhojwani,PankajBhojwani,,
microsoft/terminal,13357,"Crash while holding a key ### Windows Terminal version

1.13.11432.0

### Windows build number

10.0.22621.1

### Other Software

in WSL I'm running 
- Debian 11 on kernel `5.10.102.1-microsoft-standard-WSL2` 
- fish shell (version 3.4.1) 
- vim (version 8.2)

### Steps to reproduce

I'm not sure what the exact steps to reproduce are, I've seen this crash a few times in the last couple days while holding a key in vim. Trying to find a more reliable way to reproduce but here's what is common across the crashes:

- terminal session was running for at least 1 hour (although one session lasted ~18 hours)
- terminal window contained multiple tabs with separate sessions on the same WSL2 vm
- when it crashes it takes every tab in the terminal window and the underlying WSL2 session with it
- a separate terminal window running an elevated powershell session survives the other window crashing
- crash occurs less than a second after I begin to hold a navigation key in vim (in debian on a WSL2 vm)
- before the crash, I'm able to hold navigation keys without issue
- I don't think it's related to #10957, fairly sure the motion I was performing in vim would not cause a bell. Also I'm able to run `tput bel` in a loop for at least 10 minutes without any issues (stopped at 10 mins for my ears' sake).


### Expected Behavior

Terminal window doesn't crash from underneath me while editing in vim.

### Actual Behavior

After a long time with no issues, terminal crashes less than a second after pressing and holding a navigation key (e.g. `j`, `h`) in vim. The crash takes out every terminal tab in the window and kills the WSL2 vm so I can't reattach and recover my state.


Event viewer report blames `Microsoft.Terminal.Control.dll` in each of the crashes that it has events logged for:

Logged at 6/21/2022 1:23:57 PM:
```
Faulting application name: WindowsTerminal.exe, version: 1.13.2205.23002, time stamp: 0x628bd6e5
Faulting module name: Microsoft.Terminal.Control.dll, version: 1.13.2205.23002, time stamp: 0x628bd501
Exception code: 0xc0000005
Fault offset: 0x00000000000a7031
Faulting process id: 0x0x81D0
Faulting application start time: 0x0x1D885A331CB7DF5
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\Microsoft.Terminal.Control.dll
Report Id: 231fb379-0618-424f-b270-4abcd9c76e91
Faulting package full name: Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App
```

Logged at 6/21/2022 12:14:47 PM:
```
Faulting application name: WindowsTerminal.exe, version: 1.13.2205.23002, time stamp: 0x628bd6e5
Faulting module name: Microsoft.Terminal.Control.dll, version: 1.13.2205.23002, time stamp: 0x628bd501
Exception code: 0xc0000005
Fault offset: 0x00000000000a7031
Faulting process id: 0x0x2E18
Faulting application start time: 0x0x1D8850DAF2A21D3
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\Microsoft.Terminal.Control.dll
Report Id: 16e18e82-72ce-4917-b27c-ad1086de5754
Faulting package full name: Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App
```

Logged at 6/20/2022 6:24:36 PM:
```
Faulting application name: WindowsTerminal.exe, version: 1.13.2205.23002, time stamp: 0x628bd6e5
Faulting module name: Microsoft.Terminal.Control.dll, version: 1.13.2205.23002, time stamp: 0x628bd501
Exception code: 0xc0000005
Fault offset: 0x00000000000a7031
Faulting process id: 0x0x7B30
Faulting application start time: 0x0x1D884FA55D2CF69
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\Microsoft.Terminal.Control.dll
Report Id: 5e7df318-5652-4433-8a12-0537323b2c06
Faulting package full name: Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App
```

Logged at 6/20/2022 4:05:15 PM:
```
Faulting application name: WindowsTerminal.exe, version: 1.13.2205.23002, time stamp: 0x628bd6e5
Faulting module name: Microsoft.Terminal.Control.dll, version: 1.13.2205.23002, time stamp: 0x628bd501
Exception code: 0xc0000005
Fault offset: 0x00000000000a5999
Faulting process id: 0x0x63FC
Faulting application start time: 0x0x1D880EA93FD3C3A
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe\Microsoft.Terminal.Control.dll
Report Id: 157dd4ea-2879-4dd5-92bf-41d9449cc517
Faulting package full name: Microsoft.WindowsTerminal_1.13.11432.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App
```",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Priority-1,2022-06-21T21:56:31Z,2022-09-02T10:52:01Z,iamevn,zadjii-msft;DHowett;iamevn;j4james,iamevn;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,13361,"The vertical scrollbar thumb does not expand to full size ### Windows Terminal version

1.13.11432.0

### Windows build number

10.0.22000.0

### Other Software

_No response_

### Steps to reproduce

1. Write enough text to display a vertical scrollbar e.g. `tree /f %windir%`
2. Hover mouse over scrollbar or even the thumb specifically

### Expected Behavior

Thumb expands to a larger size as it does in Notepad (new Windows 11 version).

### Actual Behavior

Thumb stays tiny as shown in screen grab below:

![Terminal Scrollbar Issue](https://user-images.githubusercontent.com/1532486/175144468-63b1b81b-b3ca-4f6a-a7a1-9020f4319a65.gif)
",lhecker,Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-3,2022-06-22T21:46:43Z,2022-08-24T22:03:03Z,heaths,zadjii-msft;vefatica;heaths;lhecker,heaths;zadjii-msft,zadjii-msft,zadjii-msft,,lhecker,
microsoft/terminal,13398,"Japanese IME input mode switched back to Direct Input after pressing Enter key ### Windows Terminal version

1.14.1451.0

### Windows build number

10.0.19044.1766

### Other Software

_No response_

### Steps to reproduce

- Turn on Hiragana input mode
- Type something then press Enter to convert to japanese

### Expected Behavior

The input mode should not switch back to Direct Input

### Actual Behavior

The input mode switched to Direct Input automatically after conversion

![terminal](https://user-images.githubusercontent.com/76022206/176331241-3187170c-05e6-4abd-89bb-b3f9e74c9df6.gif)

",lhecker,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2022-06-29T01:27:14Z,2022-08-11T21:22:26Z,rabianr,driver1998;yuru7;megane42;hqf00342;zadjii-msft;YanceyChiew;lhecker;rabianr;tadashi-aikawa;BingFengHung;shinsaka;YossyHal;ironsand,rabianr;zadjii-msft,zadjii-msft,,,,
microsoft/terminal,13413,"[1.15] switchSelectionEndpoint doesn't work ### Windows Terminal version

1.15

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

I entered mark mode (or just started with a mouse selection), and `switchSelectionEndpoint` doesn't do anything.

It might be important to note that I'm using it from the command palette.

### Expected Behavior

_No response_

### Actual Behavior

![gif](https://drop.howett.net/share/WindowsTerminal_qtKLVUVA97.gif)",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2022-07-01T13:36:23Z,2022-07-05T20:38:22Z,DHowett,carlos-zamora,DHowett;carlos-zamora,carlos-zamora,DHowett,,,
microsoft/terminal,13446,"Scrollbar area is not hidden ### Windows Terminal version

1.15.1863.0

### Windows build number

10.0.22000.0

### Other Software

any application

### Steps to reproduce

set `scrollbarState` value to `hidden`

### Expected Behavior

Scrollbar and scrollbar's area must to be hidden

### Actual Behavior

Scrollbar is hidden but its area is not.

![Screenshot 2022-07-07 050340](https://user-images.githubusercontent.com/78153320/177675523-8159f821-0cfa-4a0e-971f-ea6f848b5970.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Priority-1,2022-07-07T02:15:38Z,2022-07-07T17:30:51Z,237dmitry,zadjii-msft;ev-dev,237dmitry;zadjii-msft,,zadjii-msft,,,
microsoft/terminal,13485,"select all marker visibility ### Windows Terminal version

1.15.1863.0

### Windows build number

10.0.22000.778

### Other Software

_No response_

### Steps to reproduce

- clear buffer
- display some info, not to fill the buffer
- `ctrl+shift+a`

### Expected Behavior

_No response_

### Actual Behavior

- when buffer not full (no scrollbar) `crtl+shift+a` shows a marker top left.
- with full buffer (scrollbar visible) there is no marker, ever scrolling to top of buffer.


Partial buffer screenshot, with marker visible:
![crtl+a_mark_shown](https://user-images.githubusercontent.com/3933920/178403678-072b629f-e8ec-4949-96d7-92e6ba51d641.png)

",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Priority-3,2022-07-12T03:45:16Z,2022-08-02T20:49:50Z,elsaco,,elsaco;zadjii-msft,,zadjii-msft,,,
microsoft/terminal,13523,"Windows Terminal not 100% shown in context menu ### Windows Terminal version

1.14.1861.0

### Windows build number

10.0.22622.290

### Other Software

_No response_

### Steps to reproduce

1. Install windows terminal 1.14.1861.0
2. Right click in some folder
3.  The bug happens.

### Expected Behavior

The ""open in terminal"" should display every time.

### Actual Behavior

The ""open in terminal"" don't display every time. I can see it 1 time when I right click every around 6 times.",zadjii-msft,Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-ShellExtension,2022-07-17T00:02:16Z,2022-08-18T11:45:43Z,lychichem,lychichem;zadjii-msft;Skywings96,lychichem;zadjii-msft,zadjii-msft,,,zadjii-msft,
microsoft/terminal,13533,"Mark Mode should preempt key bindings, and work with anything that causes scrolling... ### Windows Terminal version

1.15.1862.0

### Windows build number

10.0.19042.0

### Other Software

_No response_

### Steps to reproduce

I know the mark mode keyboard selection is still very early days. I just wanted to make sure the expected behaviors are all covered, and I didn't see this called out.

Any hotkey that pre-exists the mark mode currently interfere with selection. That is, currently:

- Mark mode seems to only works with the default windows text navigation keys: the arrows, PgUp/PgDn, home/end.
- **Selecting** requires turning on mark mode and then holding shift while pressing those keys.

If the user has an ""Action"" configured for `Ctrl+Shift+Home` or `Ctrl+Shift+PgUp` or whatever, that action will trigger **instead of** the selection.

Additionally, nothing else that scrolls the buffer causes the mark to move or select:

- Scrolling with the mouse
- Scrolling with scrollToMark
- Scrolling via the command palette (Ctrl+Shift+P)

On top of that, we can't **usefully** turn on mark mode _after_ scrolling, because it always appears at the bottom.

### Expected Behavior

Mark mode should probably be called ""selection"" mode, to disambiguate with the new ""marks"" ...

Mark mode should disregard actions that consume Arrows/PgUp/PgDn/Home/End  -- or possibly, should ignore all actions except selection-specific actions or Esc to cancel, changing all the hotkeys like a `vi` mode does.

The ""mark"" should follow the scroll buffer if the buffer is scrolled via other actions. Ideally, it should select when that happens with SHIFT pressed. 

The mark should always appear _within the visible buffer_ when it's invoked, **not** only at the bottom/prompt.

### Actual Behavior

The mark only ever appears at the prompt, and can only be used if you haven't configured actions over the default text selection keys.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2022-07-18T16:18:29Z,2022-08-22T20:39:24Z,Jaykul,zadjii-msft;carlos-zamora;carlocardella,Jaykul;zadjii-msft,carlos-zamora;DHowett,zadjii-msft,,,
microsoft/terminal,13559,[ARM64] App crash on changing settings ,DHowett,Issue-Bug;Area-Settings;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1,2022-07-21T17:51:33Z,2022-07-28T21:32:16Z,Indresh10,zadjii-msft;DHowett,zadjii-msft,zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,1360,"Windows terminal hangs after running ripgrep in a loop # Environment
Windows version 1903 OS build 18899.1000
Windows Terminal (Preview) version 0.2.1703.0

Any other software?
ripgrep 11.0.0

# Steps to reproduce
Install [ripgrep](https://github.com/BurntSushi/ripgrep)
Open wt (Windows Terminal), running PowerShell.
Run the following from the root of a large drive
`while ($true) { rg -i ""foo"" }`

# Expected behavior
The terminal continually runs ripgrep against all files on the drive

# Actual behavior
The terminal eventually hangs and is completely unresponsive.

The call stack for the main thread when the window hangs is attached.

[HungTerminal1.callstack.txt](https://github.com/microsoft/terminal/files/3312675/HungTerminal1.callstack.txt)

A minidump of the hung process is available here:
[HungWindowsTerminal](https://1drv.ms/u/s!Alav93a0o3vchOg0nCVjwUPjFn0DYw?e=Ue4AP5)",miniksa;lhecker,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Area-Quality,2019-06-21T01:35:04Z,2020-01-15T13:36:24Z,Treit,miniksa;Treit;DHowett-MSFT,DHowett-MSFT;bitcrazed,DHowett-MSFT,cinnamon-msft,,,
microsoft/terminal,1364,"Terminal shows an empty window and then crashes Hi!  
I'm trying to run this new Windows Terminal.

After some difficulties and a few attempts I was able to build and deploy the project locally.  
*鑺Great! Finally!绂* I said to myself, just before clicking on the `Windows Terminal (Dev Build)` in the Start menu...

This was the result: an empty window.
> ![image](https://user-images.githubusercontent.com/14953974/59504305-f5ba8a80-8ea2-11e9-929f-4a56104b77b9.png)

After a few seconds, it simply disappeared and then...  
Well... Nothing more!

---

Here are some useful (hopefully) information about my current system:
>  Windows 10 1903 Build 18362.175
>  x64 architecture
>  `Developer mode` enabled
>  Repo version built: v0.2.1715.0 (66cb7c4b58b0e41ffaeb952ef27f1a8c67e90db8)
>  Build with Visual Studio 2019
>  Built and deployed for x64 architecture

---

Some time ago, I commented already here (https://github.com/microsoft/terminal/issues/489#issuecomment-502067642) explaining the same issue...  
But, nobody could help me.

Maybe opening a Issue I will be luckier...
>  Sorry for the ""duplicate""... 棣冩",miniksa,Area-Rendering;Issue-Bug;Severity-Crash;Needs-Attention;Product-Terminal;Needs-Tag-Fix,2019-06-21T08:10:57Z,2019-07-31T22:37:52Z,Byloth,DHowett-MSFT;ShadowEO;andreili;corganfuzz;tanayagar;vRITHNER;MrR0bert;Byloth;8thHalfHour;yodurr;miniksa;cpbotha;metathinker;magiblot;gfbearsfan,,,,,DHowett-MSFT,
microsoft/terminal,13640,"Random blue-ish squares appear on screen ### Windows Terminal version

1.14.1963.0

### Windows build number

10.0.22000.795

### Other Software

GPU: AMD Radeon 5700 XT
GPU Driver: 31.0.12015.2001 (7/13/2022)

I can confirm this happens with no other apps open.

### Steps to reproduce

Open Microsoft Terminal, and wait a few minutes. Minimizing and unminimizing the window makes a different set of squares appear in the bottom left of the screen.

### Expected Behavior

No squares should be randomly rendered to the screen.

### Actual Behavior

The square that appears in the top-left of the window:

![image](https://user-images.githubusercontent.com/72173894/182043127-0c361be5-f2fc-412d-884b-c3d4e0124592.png)

The squares that appear in the bottom left of my screen when the window is minimized:

![image](https://user-images.githubusercontent.com/72173894/182043143-9238e335-8e39-45ea-adc3-0afdf00f74c4.png)
",zadjii-msft,Resolution-Duplicate;Product-Conpty;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-1;Area-Windowing,2022-07-31T20:04:08Z,2022-09-01T11:56:37Z,asineth0,zadjii-msft;237dmitry;asineth0;DHowett,asineth0;zadjii-msft,zadjii-msft,,,,
microsoft/terminal,1366,"Screen margins and scrolling regions are acting strange for the JOE editor # Environment
Windows build number:Microsoft Windows [Version 10.0.18922.1000]
Windows Terminal version (if applicable):wsl2

# Steps to reproduce
wsl
sudo apt install joe
joe some_text_file.txt

# Expected behavior
At windows subsystem linux terminal you start editing some text file with joe editor.
When file have more lines that what current terminal have and you scroll down/up, lines at the screen scrolls with you.

This works fine with nano/pico/vi but not with joe.

# Actual behavior

When cursor reach last/first line of screen, only last/first line changes under cursor. Screen is not scrolling.",j4james,Product-Conhost;Resolution-Fix-Committed;Help Wanted;Area-VT;Issue-Bug;Needs-Tag-Fix,2019-06-21T13:28:22Z,2019-07-10T16:42:14Z,JJussi,DHowett-MSFT;stobor827;gunterzielke;curry684;uiteoi;zadjii-msft;j4james,zadjii-msft,DHowett-MSFT,zadjii-msft,,miniksa,
microsoft/terminal,1367,"When using padding, starting selection from empty area continues previous selection # Environment
commit 08464648

# Steps to reproduce

1. Set some left padding eg. 20.
2. Make some selection or just click one cell.
3. In some other place try to make new selection that starts at first char in line. But don't point cursor directly on the first char, but instead little to the left, on the ""padded"" area.

# Expected behavior

Selection should start at first character in line.

# Actual behavior

Previous selection is continued.
This is also the case for other padding sites (e.g. selecting line form right to left), but left is most noticable.",carlos-zamora,Resolution-Duplicate;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-3,2019-06-21T13:42:43Z,2020-01-28T22:58:42Z,mcpiroman,mcpiroman;carlos-zamora,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,cinnamon-msft,,,
microsoft/terminal,13769,"Suggestions pop up of the Japanese MS IME got pushed down after multiple commands ### Windows Terminal version

1.15.2282.0

### Windows build number

10.0.19044.1889

### Other Software

_No response_

### Steps to reproduce

- Entering multiple commands or just press Enter multiple times.
- Japanese MS IME's suggestions pop up got pushed down gradually.


### Expected Behavior

this doesn't happen on v1.13.10983.0
![terminal-1 13](https://user-images.githubusercontent.com/76022206/185293805-4758f650-f19c-4620-9bfc-145e1092dd1d.gif)

what's being typed is shown in the input area
![image](https://user-images.githubusercontent.com/76022206/185297843-05b1638e-1aa9-452f-8506-cd7d00d5d962.png)


### Actual Behavior

This happens on v1.14.1432.0 and above.

v1.15.2282.0
![terminal-1 15](https://user-images.githubusercontent.com/76022206/185293342-c0f0f26c-e434-4d45-8ec2-9de548cf436a.gif)

v1.14.1432.0
![terminal-1 14](https://user-images.githubusercontent.com/76022206/185293296-acb49d08-d9d2-423b-bbe8-ff84bf669f80.gif)

also, what's being typed isn't shown in the input area
![image](https://user-images.githubusercontent.com/76022206/185297901-899803e7-2bc5-400a-b63c-70a674c8d736.png)
",DHowett,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-1,2022-08-18T04:30:04Z,2022-08-22T16:58:41Z,rabianr,zadjii-msft;DHowett;j4james,rabianr;zadjii-msft,zadjii-msft,DHowett,,DHowett,
microsoft/terminal,13866,"Accessibility: NVDA emits errors in WT1.15 preview ### Windows Terminal version

1.15.2283.0

### Windows build number

25188.1000

### Other Software

NVDA 2022.2.2

### Steps to reproduce

1. Open bash in windows terminal
2. type nano /etc/hosts

### Expected Behavior

No error in NVDA

### Actual Behavior

NVDA emits the following error:

```
ERROR - NVDAObjects.behaviors.LiveText._monitor (18:21:06.798) - Dynamic_WinTerminalUIAEditableTextWithAutoSelectDetectionUIA._monitorThread (22344):
Error getting or calculating new text
Traceback (most recent call last):
  File ""NVDAObjects\behaviors.pyc"", line 386, in _monitor
  File ""NVDAObjects\behaviors.pyc"", line 350, in _getText
  File ""diffHandler.pyc"", line 62, in _getText
  File ""baseObject.pyc"", line 26, in __get__
  File ""NVDAObjects\UIA\__init__.pyc"", line 848, in _get_text
  File ""NVDAObjects\UIA\__init__.pyc"", line 555, in _getTextFromUIARange
  File ""monkeyPatches\comtypesMonkeyPatches.pyc"", line 32, in __call__
_ctypes.COMError: (-2147467259, 'Unspecified error', (None, None, None, 0, None))
```

I wasn't able to reproduce this with WT1.14, so therefore I'm filing this here since there might be a regression in UIA related code. @codeofdusk could you reproduce this?",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Needs-Triage;Needs-Tag-Fix;Severity-Blocking,2022-08-28T17:10:22Z,2022-09-02T21:25:10Z,leonardder,codeofdusk;leonardder;carlos-zamora,leonardder;zadjii-msft,,zadjii-msft,,,
microsoft/terminal,13899,"Adding a pixel shader to Atlas engine explodes On `main` + Dev Build, so `useAtlas:true` by default.

```jsonc
            {
                ""background"": ""#011424"",
                ""colorScheme"": ""Campbell Powershell"",
                ""commandline"": ""C:\\Program Files\\PowerShell\\7\\pwsh.exe -nologo"",
                ""font"":
                {
                    ""face"": ""Cascadia Code"",
                    ""weight"": ""light""
                },
                ""hidden"": false,
                ""name"": ""PowerShell"",
                ""opacity"": 50,
                ""unfocusedAppearance"":
                {
                    ""background"": ""#162029"",
                    ""experimental.pixelShaderPath"": ""C:\\Users\\migrie\\dev\\public\\terminal\\samples\\PixelShaders\\Grayscale.hlsl"",
                },
                ""useAcrylic"": true,
            },
```

(modify path as necessary)

<details>
<summary>stack</summary>

```
     Microsoft.Terminal.Control.dll!std::_Iterator_base12::_Orphan_me_unlocked_v3() Line 1204    C++
     Microsoft.Terminal.Control.dll!std::_Iterator_base12::_Orphan_me_locked_v3() Line 1217    C++
     Microsoft.Terminal.Control.dll!std::_Iterator_base12::~_Iterator_base12() Line 1125    C++
     Microsoft.Terminal.Control.dll!std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>,std::_Iterator_base12>()    C++
     Microsoft.Terminal.Control.dll!std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>::~_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>()    C++
     Microsoft.Terminal.Control.dll!std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>::~_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>()    C++
     Microsoft.Terminal.Control.dll!std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>::`scalar deleting destructor'(unsigned int)    C++
     Microsoft.Terminal.Control.dll!std::_Destroy_in_place<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>>(std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>> & _Obj) Line 302    C++
     Microsoft.Terminal.Control.dll!std::destroy_n<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>> *,unsigned __int64>(std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>> * _First, const unsigned __int64 _Count_raw) Line 578    C++
>    Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8>::destroy() Line 321    C++
     Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8>::operator=(Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8> && other) Line 230    C++
     [External Code]    
     Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::_createResources() Line 543    C++
     Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::GetSwapChainHandle() Line 309    C++
     Microsoft.Terminal.Control.dll!winrt::Microsoft::Terminal::Control::implementation::ControlCore::SwapChainHandle() Line 1570    C++
     Microsoft.Terminal.Control.dll!winrt::impl::produce<winrt::Microsoft::Terminal::Control::implementation::ControlCore,winrt::Microsoft::Terminal::Control::IControlCore>::get_SwapChainHandle(unsigned __int64 * value) Line 2031    C++
     Microsoft.Terminal.Control.dll!winrt::impl::consume_Microsoft_Terminal_Control_IControlCore<winrt::Microsoft::Terminal::Control::IControlCore>::SwapChainHandle() Line 122    C++
     Microsoft.Terminal.Control.dll!winrt::Microsoft::Terminal::Control::implementation::TermControl::RenderEngineSwapChainChanged(winrt::Windows::Foundation::IInspectable __coro_heap_ellision, winrt::Windows::Foundation::IInspectable __coro_frame_ptr) Line 745    C++
```
</details>

I saw another that looked like:

<details>
<summary>Details</summary>

```
 	ucrtbased.dll!00007ffc27cf024e()	Unknown
 	Microsoft.Terminal.Control.dll!operator delete(void * block) Line 38	C++
>	Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8>::deallocate(std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>> * data) Line 315	C++
 	Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8>::destroy() Line 321	C++
 	Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8>::operator=(Microsoft::Console::Render::AtlasEngine::Buffer<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::Console::Render::AtlasEngine::AtlasKey,Microsoft::Console::Render::AtlasEngine::AtlasValue>>>>,8> && other) Line 230	C++
 	[External Code]	
 	Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::_createResources() Line 543	C++
 	Microsoft.Terminal.Control.dll!Microsoft::Console::Render::AtlasEngine::GetSwapChainHandle() Line 309	C++
 	Microsoft.Terminal.Control.dll!winrt::Microsoft::Terminal::Control::implementation::ControlCore::SwapChainHandle() Line 1570	C++
 	Microsoft.Terminal.Control.dll!winrt::impl::produce<winrt::Microsoft::Terminal::Control::implementation::ControlCore,winrt::Microsoft::Terminal::Control::IControlCore>::get_SwapChainHandle(unsigned __int64 * value) Line 2031	C++
 	Microsoft.Terminal.Control.dll!winrt::impl::consume_Microsoft_Terminal_Control_IControlCore<winrt::Microsoft::Terminal::Control::IControlCore>::SwapChainHandle() Line 122	C++
 	Microsoft.Terminal.Control.dll!winrt::Microsoft::Terminal::Control::implementation::TermControl::RenderEngineSwapChainChanged(winrt::Windows::Foundation::IInspectable __coro_heap_ellision, winrt::Windows::Foundation::IInspectable __coro_frame_ptr) Line 745	C++
 	[External Code]	
 	Microsoft.Terminal.Control.dll!wil::details::dispatcher_handler::Complete() Line 88	C++

```

</details>

looks like we're calling `Buffer::operator=()`, calling `destroy()` on `this`, and `this` was null, cause all the members of `_r` were null...

",lhecker,Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Area-AtlasEngine,2022-09-01T15:31:44Z,2022-09-02T22:10:12Z,zadjii-msft,lhecker;zadjii-msft,zadjii-msft,,lhecker,,,
microsoft/terminal,1398,"Float values in settings are too precise (especially for people who don't know IEEE854) 

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version (if applicable): 0.2.1715.0

Any other software? No
```

# Steps to reproduce

1. Open settings
2. Set `acrylicOpacity` to `0.7`
3. Close Terminal
4. Open terminal again
5. Observe `acrylicOpacity` setting now being set to `0.69999998807907104`

# Expected behavior

`acrylicOpacity` should remain on `0.7`

# Actual behavior

`acrylicOpacity` has a floating point error.
",zadjii-msft,Resolution-Duplicate;Issue-Bug;Area-Settings;Product-Terminal,2019-06-22T09:41:42Z,2019-09-16T20:15:26Z,hugo-vrijswijk,DHowett-MSFT;Willsatroyd;zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT;zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,1401,"TerminalControl handles ALT+NUMPAD input poorly When the user enters <kbd>Alt-123</kbd> it looks like we're doing this:

* Sending `ESC` `1`
* Sending `2`
* Sending `3`
* Sending whichever character <kbd>Alt-123</kbd> corresponds to.

Powershell and bash (readline) interpret alt-number as ""enter digit-argument mode."" Digit argument mode usually means ""repeat the first character N times"" ... so this results in character `123` being added to the buffer 123 times.

We should definitely fix that.

# original content

## Environment

```
Windows build number: 10.0.18922.1000 and 10.0.18362.175
Windows Terminal version (if applicable): 0.2.1715.0

Any other software?
Powershell Core 7.0.0-preview.1
Powershell Core 6.2.1
Windows Powershell 5.1
```


## Steps to reproduce
 - Open Powershell (whatever version listed above) session in the Terminal
 - try to insert an ascii char by:
   - press and hold  `ALT` key
   - digit whatever number (for example 126 corresponding to `~`)

## Expected behavior
a tilde (`~`) is inserted
![WinTerPS7ok](https://user-images.githubusercontent.com/11667486/59962852-317cd200-94eb-11e9-899c-bbdbd70087e5.png)

## Actual behavior

127 tildes are inserted
![WinTerPS7](https://user-images.githubusercontent.com/11667486/59962859-43f70b80-94eb-11e9-9f20-83f6d0938434.png)


<!-- What's actually happening? -->

The same thing happens for all the versions of Powershell listed above",leonMSFT,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2019-06-22T10:49:07Z,2020-04-11T16:35:17Z,leoniDEV,Shorotshishir;DHowett-MSFT;effolkronium;lhecker;leonMSFT,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,14024,"Odd behavior when using fractional font size in SUI ### Windows Terminal version

main c51bb3a7a

### Windows build number

10.0.19044.0

### Other Software

_No response_

### Steps to reproduce

build terminal with `Add support for fractional font size` commit included

### Expected Behavior

consistent fractional part

### Actual Behavior

when using any other fractional beside `.5` the font size is being expanded to 10 decimal places, overlapping the controls:

![fractional_font_size](https://user-images.githubusercontent.com/3933920/190837778-62e17911-ecda-42be-b05d-bbac1ac1e7e7.PNG)

when incrementing/decrementing with the up/down arrows only the integer part is being changed, i.e. `13.5 , 14.5, 15.5`",lhecker,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Priority-2;Area-Settings UI,2022-09-17T02:53:07Z,2022-09-20T17:36:49Z,elsaco,,elsaco;lhecker,,lhecker,,DHowett,
microsoft/terminal,14032,"Closing tab hangs when using VS Dev tools and Powershell Core ### Windows Terminal version

1.16.2524.0

### Windows build number

 10.0.25201.0

### Other Software

* Visual Studio 2022
* Powershell Core 7.2.6

### Steps to reproduce

1. Create a profile using `pwsh.exe` in Windows Terminal Preview
2. Execute the following lines to add the VS dev tools
```powershell
Import-Module ""C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\Microsoft.VisualStudio.DevShell.dll""
Enter-VsDevShell 8ee891c5 -SkipAutomaticLocation -DevCmdArguments ""-arch=x64 -host_arch=x64""
```
3. Close the tab

### Expected Behavior

Tab closes quickly.

### Actual Behavior

wt locks up entirely doing...something. 

![Animation](https://user-images.githubusercontent.com/2447331/190947485-bf79b9ca-82a6-4de5-bb15-7987e7b4dc3d.gif)

I've tested this with the release version of Windows Terminal and also regular powershell.exe. Both of those don't exhibit the behavior. It is only with Powershell Core, the most recent release of wt.exe and the Visual Studio dev tools",lhecker,Resolution-Fix-Committed;Product-Conpty;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Priority-1,2022-09-19T04:00:00Z,2022-09-21T22:26:32Z,phil-scott-78,DHowett;phil-scott-78;lhecker,phil-scott-78;lhecker,,lhecker,,,
microsoft/terminal,14080,"Block graphics and line drawing characters not rendered with AtlasEgine ### Windows Terminal version

1.16.2641.0

### Windows build number

10.0.19042.2006

### Other Software

This was seen with both Linux under WSL and Powershell on Windows. Line drawing and some block graphics are not rendered (or, at least, do not appear on the window). 

PowerShell under AtlasEngine:
![image](https://user-images.githubusercontent.com/184714/192295976-de4e7351-e581-4d51-8ed8-12fe27ed17f4.png)

PowerShell under the previous renderer:
![image](https://user-images.githubusercontent.com/184714/192296219-15789752-b5d0-4c56-88bf-ca86deaf87db.png)

Same happens (unsurprisingly) under WSL with AtlasEngine:
![Capture6](https://user-images.githubusercontent.com/184714/192296344-831f39a1-5d6c-44bc-82c2-b283fe9d7988.PNG)

and without:
![Capture7](https://user-images.githubusercontent.com/184714/192296427-252561a6-e6bf-4582-9518-408c7a273c3f.PNG)

Common line drawing and semi-graphic symbols are not rendered, but others, such as the 1FB00 range (which are relatively new, from Unicode 13) are rendered correctly (in our case, because the font used (https://github.com/rbanffy/3270font) has them defined.

The others, seen missing in the lines ""Misc glyphs"" and ""Vttest's ladder"", left to right filled boxes and the middle step of the ladder, are also defined in the font.. 

### Steps to reproduce

Easiest way: install zsh and ohmyzsh on a Linux WSL instance and select the ""agnoster"" theme, which contains some of the characters that aren't rendered.

Hard way: check-out https://github.com/rbanffy/3270font, open a Windows Terminal and run the `test_font_rendering.py` program.

### Expected Behavior

All glyphs should render

![Capture7](https://user-images.githubusercontent.com/184714/192298383-e4375ea3-9d58-4b11-a15d-a3b3dd7fce97.PNG)


### Actual Behavior

Line drawing and some block graphics characters don't render. Window height is also slightly shorter.

![Capture6](https://user-images.githubusercontent.com/184714/192298468-cced74c9-52b5-4449-a0a8-39ffe44ecf9d.PNG)
",lhecker,Resolution-External;Issue-Bug;Needs-Triage;Needs-Attention;Area-AtlasEngine,2022-09-26T14:11:24Z,2022-09-27T16:18:26Z,rbanffy,lhecker;rbanffy,rbanffy;lhecker,,lhecker,,lhecker,
microsoft/terminal,141,"Strange behaviour of Delete Line and Insert Line when used above the top margin * Your Windows build number:

Microsoft Windows [Version 10.0.16299.309]

* What you're doing and what's happening:

I was curious to see how the _Delete Line_ (`\033[M`) and _Insert Line_ (`\033[L`) escape sequences would behave when applied above the top margin of the scrolling region. So as a test, I labelled the first 8 lines of the screen with the numbers 1 to 8, set the top margin to line 4, then attempted to delete line 1.

This was the command I used:

    printf ""\033c1\n2\n3\n4\n5\n6\n7\n8\033[4r\033[H\033[M\033[r"" && read -n 1

And this was the output I saw:

    1
    2
    3
    8

Instead of 1 row being deleted from line 1, I got 4 rows deleted from line 4.

I then tried the same thing with the _Insert Line_ sequence:

    printf ""\033c1\n2\n3\n4\n5\n6\n7\n8\033[4r\033[H\033[L\033[r"" && read -n 1

And the output this time was:

    1
    2
    3
    6
    7
    8

Instead of 1 row being inserted at line 1, I got 2 rows **deleted** from line 4!

* What's wrong / what should be happening instead:

I don't think there is necessarily a ""correct"" behaviour in this situation, but I do think the current Windows behaviour is probably a bug.

One possible option would be to ignore these commands when used outside the defined margins (which I think is what XTerm does). Another option would be to handle the insert and delete as if the top margin had not been set, but still constrain the scrolling region within the bottom margin (which is how the Linux console behaves). Either choice would be preferable to the current behaviour.",zadjii-msft,Work-Item;Product-Conhost;Resolution-Fix-Available;Area-VT;Issue-Bug,2018-03-28T12:35:01Z,2019-09-04T18:55:26Z,j4james,zadjii-msft;DHowett-MSFT;j4james,zadjii-msft;miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,14129,"棣冩偘 Strange bug with pasting sudo password via SSH on Linux 棣冩儌 ### Windows Terminal version

1.15.2713.0

### Windows build number

10.0.22621.608

### Other Software

```bash
kmatuszak@ubuntu:~$ bash --version
GNU bash, version 5.0.17(1)-release (x86_64-pc-linux-gnu)

kmatuszak@ubuntu:~$ sudo -V
Sudo version 1.8.31
Sudoers policy plugin version 1.8.31
Sudoers file grammar version 46
Sudoers I/O plugin version 1.8.31

kmatuszak@ubuntu:~$ ssh -V
OpenSSH_8.2p1 Ubuntu-4ubuntu0.5, OpenSSL 1.1.1f  31 Mar 2020

kmatuszak@ubuntu:~$ uname -r
5.15.0-48-generic

kmatuszak@ubuntu:~$ lsb_release -sd
Ubuntu 20.04.5 LTS
```

### Steps to reproduce

1. Connect to an Ubuntu server with password set to `HtJy*&fPMS4@K84C$RJfFT9*$#SR4E52` via SSH using Windows Terminal
2. Authenticate using your username and password by pasting the password, this will work fine
3. Try to run any sudo command which will ask for your sudo password, for example: `sudo apt update && sudo apt upgrade -y`
4. Paste your sudo password either by `CTRL+V` or `CTRL+SHIFT+V`

### Expected Behavior

Password should be accepted, but it is not:
```bash
kmatuszak@ubuntu:~$ sudo apt update && sudo apt upgrade -y
[sudo] password for kmatuszak:
Sorry, try again.
[sudo] password for kmatuszak:
```

### Actual Behavior

Password is not accepted either if pasted by `CTRL+V` or `CTRL+SHIFT+V`, but it works fine when typed by hand. Also password is accepted just fine if pasted in PuTTY. Other passwords also work just fine if pasted in Windows Terminal. The same password works just fine for initial authentication when connecting to an SSH server, but not for authenticating when running sudo.",zadjii-msft,Area-Input;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2022-10-03T14:36:49Z,2022-12-01T23:30:38Z,KMatuszak,237dmitry;cristiandeschamps;Gliptal;j4james;zadjii-msft;DHowett;fusenuk;lhecker;KMatuszak,KMatuszak;carlos-zamora,carlos-zamora,,,zadjii-msft,
microsoft/terminal,14132,"OpenConsole.exe will not quit if start with `msys2` profile and click `close window button` ### Windows Terminal version

1.16.22...

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

 start WT  with `msys2` profile and click `close window button`.

### Expected Behavior

OpenConsole.exe should quit after click close button even if WT start with msys2 profile.

### Actual Behavior

 I have to type `exit` to make OpenConsole.exe quit everytime or it will become a zombie process.",lhecker,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Area-Remoting,2022-10-04T06:26:19Z,2022-11-29T20:15:46Z,shithappens2016,lhecker;lbfuvab,shithappens2016;carlos-zamora,carlos-zamora,carlos-zamora,,lhecker,
microsoft/terminal,14144,"regression: U+0219 and U+021B (钁 and 钁) are displayed in lower size with FantasqueSansMono-NoLoopK font ### Windows Terminal version

1.16.2641.0

### Windows build number

10.0.19044.2075

### Other Software

_No response_

### Steps to reproduce

since about last one or two terminal preview updates, I noticed the 钁 and 钁 letters are displayed in about half size than the rest of other letters, when using font FantasqueSansMono-NoLoopK from https://github.com/belluzj/fantasque-sans/releases/tag/v1.8.0 

otherwise the font works okay in all other native windows apps as well in other third party terminals such as MobaXterm and Putty and even plain old cmd.exe (wait what, how does it even appear there? cmd.exe didn't see those many monospaced fonts last time I checked!)
![image](https://user-images.githubusercontent.com/2054302/194300574-af286113-0a88-4f42-a840-92bfd2d02128.png)




### Expected Behavior

same size all characters

### Actual Behavior

钁钁 are smaller than the rest

![image](https://user-images.githubusercontent.com/2054302/194300702-e63b22dc-bd0a-4a17-b098-95b19a9cbf84.png)
",lhecker,Resolution-Duplicate;Issue-Bug;Area-AtlasEngine,2022-10-06T11:25:37Z,2022-10-06T21:25:39Z,mailinglists35,mailinglists35;lhecker,mailinglists35;lhecker,lhecker,lhecker,,,
microsoft/terminal,14174,"1.17: color schemes no longer work ### Windows Terminal version

1.17.280

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

Use a non-Campbell color scheme.

### Expected Behavior

_No response_

### Actual Behavior

<img width=""596"" alt=""image"" src=""https://user-images.githubusercontent.com/189190/194924039-6c220fe8-6d03-4fed-b6cf-8d3ec2763b2f.png"">

bad scheme

<img width=""185"" alt=""image"" src=""https://user-images.githubusercontent.com/189190/194924056-a19f27ca-5738-4543-9664-772e36f5f45e.png"">

set here

<img width=""375"" alt=""image"" src=""https://user-images.githubusercontent.com/189190/194924085-33aa2d60-d7f1-4845-b537-6aa4121e67cd.png"">

no override

<img width=""771"" alt=""image"" src=""https://user-images.githubusercontent.com/189190/194924132-b9ea754a-7978-4dd4-bb88-42356c4d3cb9.png"">

outcome",carlos-zamora,Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2022-10-10T17:41:35Z,2022-10-11T21:49:22Z,DHowett,carlos-zamora;bennettnicholas,DHowett;carlos-zamora,carlos-zamora,DHowett,,carlos-zamora,
microsoft/terminal,14202,"Alt+Space doesn't work from Settings pages Accessibility issue. Cannot access system menu from keyboard.

Open Terminal to say a command prompt. Hit Alt+Space to open the system menu, and then pick ""Settings"". Now hit Alt+Space to open the system menu again, say because you want to maximize the terminal.

Expect: System menu opens.
Actual: Nothing happens.

The only way to get Alt+Space to work is to click on a blank space on the title bar (to get focus out of the Settings pane). However, there is no way to get focus onto the title bar via the keyboard. Alt+Up can't go up that high.

Alt+Space is a very common keyboard shortcut and users expect it to work universally. Requiring a click on the title bar defeats the purpose of a keyboard shortcut.",carlos-zamora,Resolution-Duplicate;Issue-Bug;Area-User Interface;Area-Accessibility;Product-Terminal;Priority-1;Area-Settings UI,2022-10-12T23:09:22Z,2022-10-13T16:24:07Z,DHowett,DHowett;zadjii;carlos-zamora,DHowett,,DHowett,,,
microsoft/terminal,14242,"ssh <start typing hostname> --- the hostname is invisible.  No matter what color scheme I select. ### Windows Terminal version

1.16.2642.0

### Windows build number

10.0.22621.0

### Other Software

_No response_

### Steps to reproduce

Just open a windows terminal and issue a ssh command.  

(also seen when I ran [environment]::OsVersion -- the [environment] part of the string is invisible)

### Expected Behavior

Here is the copy/paste of what I typed into the terminal (and what came back when I hit enter)

PS C:\Users\migarret\Work Folders\Downloads> ssh imola1
Warning: Permanently added 'xx.xx.xx.xx' (ED25519) to the list of known hosts.
Last login: Mon Oct 17 15:20:33 2022 from xx.xx.xx.xx
AvereOS_2022.08.0

[root@imola1 ~]#

### Actual Behavior

![image](https://user-images.githubusercontent.com/3707340/196268853-7b020408-eb12-48ef-b64a-63362ad61f6a.png)
",DHowett,Issue-Question;Resolution-Answered;Issue-Bug;Needs-Triage,2022-10-17T19:49:47Z,2022-10-25T19:38:02Z,mgarrett69,DHowett;mgarrett69;zadjii-msft;237dmitry;elsaco,mgarrett69;DHowett;carlos-zamora;zadjii-msft,zadjii-msft,carlos-zamora,,zadjii-msft,
microsoft/terminal,143,"Weird slowness scolling text in the console When outputting text from PowerShell on a Dell XPS 15, the rendering speed is amazingly slow.

~~I have not come across this on any other machine.~~

Attached a short windows performance recording of this. 
conhost.exe (1608) and pwsh.exe (19432) are the relevant processes.

[STAFFANX15.03-30-2018.11-25-22.zip](https://github.com/Microsoft/console/files/1863382/STAFFANX15.03-30-2018.11-25-22.zip)

Hopefully someone more well versed in this domain can help figure out what is going on.",bitcrazed,Product-Conhost;Resolution-Fix-Available;Resolution-External;Area-Performance;Issue-Bug,2018-03-30T10:34:14Z,2019-06-27T22:43:06Z,powercode,IISResetMe;zadjii-msft;powercode;bitcrazed;randomascii;mixmastamyk;levicki,zadjii-msft,,,,miniksa,
microsoft/terminal,14303,"[1.17] live preview of terminal in appearance page no longer updates color scheme ![WindowsTerminal_QRLEXd5t0H](https://user-images.githubusercontent.com/189190/198704769-5f2a1a1b-9174-4a21-baf3-75a132582c41.gif)

Fonts and other settings update just fine :smile:
Could this be related to #14064?",zadjii-msft,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Priority-1;Area-Settings UI,2022-10-28T18:15:25Z,2022-12-12T16:10:25Z,DHowett,zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,14318,"Terminal CTRL key is not working properly if Terminal was launched while Windows input language set to Russian ### Windows Terminal version

1.15.2874.0

### Windows build number

10.0.19045.0

### Other Software

_No response_

### Steps to reproduce

1. Set keyboard layout to Russian;
2. Launch Windows Terminal;
3. Try to press CTRL+C, CTRL+Z, anything while holding CTRL, for example, hold CTRL and press QWERTY.

### Expected Behavior

CTRL key shortcuts work (CTRL+C, CTRL+U, etc)

### Actual Behavior

Holding CTRL and pressing keys prints Russian letters instead of treating it as a shortcut. 
Even if I switch to English layout, CTRL + \<key> prints that letter from Russian layout.

In other words, if I launch WT while Russian layout is active, and then try to press CTRL+QWERTY inside Terminal, Terminal instead prints `娉勮戣嶆郴姊拌柂` (these are Russian layout letters of the QWERTY keys) and it doesn't work like a shortcut at all.

![WindowsTerminal_aEBahR2AW4](https://user-images.githubusercontent.com/63540878/199204777-017ac00d-d9eb-4725-b45f-b45be54ea13d.gif)
",lhecker,Resolution-External;Area-Input;Issue-Bug;Product-Terminal,2022-11-01T09:39:40Z,2022-12-15T16:31:56Z,Kadeluxe,zadjii-msft;Kadeluxe,Kadeluxe;carlos-zamora;zadjii-msft,carlos-zamora,carlos-zamora,,zadjii-msft,
microsoft/terminal,1438,"Cannot access taskbar when terminal is maximized/fullscreen <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment - Windows 10 Pro Insider Preview Build 18922

```none
Windows build number: 10.0.18922.1000
Windows Terminal version (if applicable):

Any other software? No
```

# Steps to reproduce - 
1. Have your taskbar set to auto-hide.
2. Start (amazing) new windows terminal.
3. Maximize terminal.
4. Move the mouse to the bottom of the screen trying to get the hidden taskbar to pop up.

<!-- A description of how to trigger this bug. -->

# Expected behavior - 
Hidden taskbar should still pop up even though the terminal is maximized

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior - 
Cannot access the taskbar with the mouse when the terminal is maximized

<!-- What's actually happening? -->
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2019-06-22T20:51:25Z,2020-03-10T15:37:50Z,FXschwartz,ngudbhav;FXschwartz;Fedorov113;DHowett-MSFT;marwan-nwh;zadjii-msft;ARabinovich,DHowett-MSFT,DHowett-MSFT,,,,
microsoft/terminal,14416,"Terminal window/tab is not closed when console application calls FreeConsole ### Windows Terminal version

_No response_

### Windows build number

_No response_

### Other Software

_No response_

### Steps to reproduce

On windows 11, with the windows terminal being set as the default console application, start a program that was compiled for the console subsystem from explorer.
That program calls ```FreeConsole``` during its lifetime and then keeps running (either because it has spawned a gui or it is still has work to do).

### Expected Behavior

The console window that got spawned by that program is closed as it did with cmd on previous windows versions.

### Actual Behavior

The console window stays open until the program terminates the execution.",lhecker,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-DefApp,2022-11-20T20:53:22Z,2022-12-16T22:06:32Z,edo9300,edo9300;lhecker,edo9300;lhecker,zadjii-msft,lhecker,,edo9300,
microsoft/terminal,14469,"1.17 still displays launch params (Default,Default) despite values being set <img width=""510"" alt=""image"" src=""https://user-images.githubusercontent.com/189190/204926251-b3663c5e-694b-4b0d-9cdb-649d9487f49f.png"">",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Severity-Blocking;Priority-1;Area-Settings UI,2022-11-30T22:59:29Z,2022-12-09T17:51:28Z,DHowett,,DHowett;zadjii-msft,PankajBhojwani,PankajBhojwani,,,
microsoft/terminal,14504,"[1.17] Crash with Voice Access launch ### Windows Terminal version

commit da2b80bc0

### Windows build number

10.0.25262.0

### Other Software

_No response_

### Steps to reproduce

1. Open WT Dev build
2. Open voice access (must have been closed)
3. Crash!

### Expected Behavior

No crash

### Actual Behavior

Crash here:
https://github.com/microsoft/terminal/blob/da2b80bc0a38f5df49a4b987527decb302d16b7b/src/cascadia/WindowsTerminal/IslandWindow.cpp#L663

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Severity-Blocking;Area-Windowing,2022-12-07T21:38:28Z,2022-12-12T19:25:01Z,carlos-zamora,,carlos-zamora;zadjii-msft,carlos-zamora,carlos-zamora,,,
microsoft/terminal,1465,"Bug: resizing doesn't work properly in Windows Terminal <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [Version 10.0.18362.175]
Windows Terminal version (0.2.1715.0):

```

# Steps to reproduce

open any terminal (PowerShell/cmd/wsl). type any command (e.g. `dir`, `ver`, `uname`) and enter. resize the app window to the minimum and gradually enlarge the window.

# Expected behavior
information should stay the same. shouldn't break and should render all the characters like below

![powershell0](https://user-images.githubusercontent.com/16465879/59974376-5a759380-95cd-11e9-9543-18d14bdfb7a5.png)
![wsl0](https://user-images.githubusercontent.com/16465879/59974377-5a759380-95cd-11e9-9c2c-1f7fbc5d2cc0.png)
![cmd0](https://user-images.githubusercontent.com/16465879/59974378-5b0e2a00-95cd-11e9-8037-f6b46569ed3f.png)


# Actual behavior

<!-- What's actually happening? -->
breaks apart and doesn't render properly 

![powershell1](https://user-images.githubusercontent.com/16465879/59974443-22bb1b80-95ce-11e9-8ccb-9191ef306526.png)
![wsl1](https://user-images.githubusercontent.com/16465879/59974444-22bb1b80-95ce-11e9-9bf7-0a4f96fe3827.png)
![cmd1](https://user-images.githubusercontent.com/16465879/59974442-22228500-95ce-11e9-92cd-0649f9f85a45.png)
",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Issue-Bug;Needs-Tag-Fix;Priority-1,2019-06-23T09:50:16Z,2020-03-13T00:43:38Z,Shorotshishir,JushBJJ;HBelusca;mcpiroman;jjoos;danielskowronski;zadjii-msft;espresso3389;lo-w;DHowett-MSFT;parkovski,DHowett-MSFT,DHowett-MSFT,,,DHowett-MSFT,
microsoft/terminal,1533,"Hang while switching between tabs Dump was sent to
secure@microsoft.com
# Environment

Windows 10 pro 1903 (x64)

```none
Windows build number: Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version 0.2.1715.0

Any other software? chrome
```

# Steps to reproduce

frequently switching between two tabs by alt+NUMBER

# Expected behavior

Hang not occur

# Actual behavior
Hang occurs (and does not end)
",miniksa,Area-Interaction;Issue-Bug;Severity-Crash;Needs-Author-Feedback;No-Recent-Activity;Product-Terminal,2019-06-24T12:32:56Z,2019-07-05T19:00:17Z,effolkronium,miniksa,yodurr;miniksa,yodurr;cinnamon-msft,cinnamon-msft,,,
microsoft/terminal,1549,"Terminal crashes when clicking or dragging over full-width characters in the scrollback buffer # Environment

```none
Windows build number: 10.0.18362.175
Windows Terminal version (if applicable): latest store build (0.2.1715.0) and github build
```

# Steps to reproduce

1. Type in one or many full-width unicode characters or emoji. For example, 閿濇棑缍閿濆涚秼 or 閳.
2. Press enter enough times to put the characters into the scrollback buffer.
3. Scroll up and click on one of the full-width characters. Or start a selection from elsewhere and drag your mouse over one of the full-width characters. Basically (LMB down + mouse over a full width character in the scrollback buffer).

# Expected behavior

Nothing special should happen.

# Actual behavior

Terminal crashes.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-06-24T19:07:42Z,2019-07-10T16:18:21Z,tc21,carlos-zamora,carlos-zamora,carlos-zamora;cinnamon-msft,carlos-zamora,,carlos-zamora,
microsoft/terminal,1572,"Bug Report: crashing when Snap app window <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.175
Windows Terminal version (if applicable): 0.2.1715.0

Any other software?
```

# Steps to reproduce

Open Windows Terminal, snap window to side or corner of desktop, attempt to interact with Terminal app with no response, then app crashes and closes unexpectedly.

# Expected behavior

Snapping Windows Terminal window to corner or side of desktop, then interact with app as usual.

# Actual behavior

After snapping app window, app becomes unresponsive, then crashes and closes unexpectedly.
",miniksa,Resolution-Fix-Available;Area-Interaction;Issue-Bug;Severity-Crash;Product-Terminal,2019-06-25T01:47:31Z,2019-07-02T19:51:29Z,gdamicosmc,andrp92;AzAgarampur;gdamicosmc;Shorotshishir;miniksa;DHowett-MSFT,yodurr;miniksa,cinnamon-msft,cinnamon-msft,,miniksa,
microsoft/terminal,1603,"Bug Report: some processes still do not terminate after closing terminal <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.175
Windows Terminal version (if applicable): 0.2.1715.0

Any other software?
```

# Steps to reproduce

Run ping <host> across multiple powershell tabs and close terminal without stopping ping

Check taskmgr and ping.exe will still be running

# Expected behavior

Ping.exe terminates when terminal session ends

# Actual behavior

Terminal not killing processes executed after being closed
",DHowett-MSFT,Resolution-Duplicate;Help Wanted;Issue-Bug;Area-TerminalConnection;Product-Terminal;Needs-Tag-Fix,2019-06-25T12:43:22Z,2019-08-26T21:45:37Z,andrewbaker-uk,Shorotshishir;fredless;DHowett-MSFT;ShadowJonathan;zadjii-msft,carlos-zamora;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,1621,"Feature Request - Copy with newline # Summary of the new feature/enhancement

<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

As had been an issue with later versions of the WSL terminal, also in the new windows terminal selecting and copying multiple lines does not preserve newline characters, but instead is filled up with trailing whitespace to match the terminal width.

# Proposed technical implementation details (optional)

<!-- 
A clear and concise description of what you want to happen.
-->

Separate lines should result in clipboard text _with_ newlines, wrapped lines without.

# Example

Copying some output from the terminal and pasting here:

Expected behavior:
```
$ ll /usr/lib
total 206M
lrwxrwxrwx   1 root root   23 Oct  8  2012 libqimageblitz.so.4 -> libqimageblitz.so.4.0.0
-rw-r--r--   1 root root  99K Oct  8  2012 libqimageblitz.so.4.0.0
-rw-r--r--   1 root root 6.0K Feb  2  2013 libporttime.so.0.0.0
lrwxrwxrwx   1 root root   20 Feb  2  2013 libporttime.so.0 -> libporttime.so.0.0.0
-rw-r--r--   1 root root  36K Feb  2  2013 libportmidi.so.0.0.0
lrwxrwxrwx   1 root root   20 Feb  2  2013 libportmidi.so.0 -> libportmidi.so.0.0.0
lrwxrwxrwx   1 root root   20 Jan  4  2014 libmsgpackc.so.2 -> libmsgpackc.so.2.0.0
-rw-r--r--   1 root root  23K Jan  4  2014 libmsgpackc.so.2.0.0
lrwxrwxrwx   1 root root   15 Feb 28  2014 libfam.so.0 -> libfam.so.0.0.0
-rw-r--r--   1 root root  35K Feb 28  2014 libfam.so.0.0.0
...
```
Actual behavior:
```
$ ll /usr/lib                                                                                                              total 206M                                                                                                                                lrwxrwxrwx   1 root root   23 Oct  8  2012 libqimageblitz.so.4 -> libqimageblitz.so.4.0.0                                                 -rw-r--r--   1 root root  99K Oct  8  2012 libqimageblitz.so.4.0.0                                                                        -rw-r--r--   1 root root 6.0K Feb  2  2013 libporttime.so.0.0.0                                                                           lrwxrwxrwx   1 root root   20 Feb  2  2013 libporttime.so.0 -> libporttime.so.0.0.0                                                       -rw-r--r--   1 root root  36K Feb  2  2013 libportmidi.so.0.0.0                                                                           lrwxrwxrwx   1 root root   20 Feb  2  2013 libportmidi.so.0 -> libportmidi.so.0.0.0                                                       lrwxrwxrwx   1 root root   20 Jan  4  2014 libmsgpackc.so.2 -> libmsgpackc.so.2.0.0                                                       -rw-r--r--   1 root root  23K Jan  4  2014 libmsgpackc.so.2.0.0                                                                           lrwxrwxrwx   1 root root   15 Feb 28  2014 libfam.so.0 -> libfam.so.0.0.0                                                                 -rw-r--r--   1 root root  35K Feb 28  2014 libfam.so.0.0.0                                                                                
```",carlos-zamora,Resolution-Duplicate;Area-Interaction;Issue-Bug;Product-Terminal,2019-06-25T19:37:15Z,2019-06-27T22:51:46Z,philippeller,carlos-zamora;DHowett-MSFT,philippeller;carlos-zamora;DHowett-MSFT,carlos-zamora;DHowett-MSFT,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,1637,"Automatically triggered Replace mode using vim in OpenSSH on cmd / powershell though Windows Terminal <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->
Replace input mode will triggered automatically when using vim though OpenSSH Client in cmd.

# Environment

```none
Windows build number: [Version 10.0.18362.175]
Windows Terminal version (if applicable): 0.2.1715.0

Remote Linux PC: Ubuntu LTS 1604

OpenSSH Client: Stock version in Windows 10 1903 Build 18362.175
```

# Steps to reproduce

1. Open Windows Terminal
2. Open new tab running cmd / powershell / powershell 6
3. ssh to a Ubuntu 1604 LTS PC
4. Open any document using vim

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

Not trigger any input mode, the status bar at the bottom displays the path of the file that vim opened.

# Actual behavior

<!-- What's actually happening? -->

Triggered Replace input mode.",DHowett,Resolution-Fix-Committed;Area-Input;Issue-Bug;Product-Terminal,2019-06-26T09:46:39Z,2020-09-09T23:55:23Z,SuzunaeHoumi,DHowett-MSFT;rsynnest;rar222;sec;haroldzhai;DHowett;PhyX-Meow;k-takata;volksvagen;Tekki;SuzunaeHoumi;jgeorgeson;linuxcyberlabs;vladsol,DHowett-MSFT,DHowett-MSFT,,,DHowett-MSFT,
microsoft/terminal,1646,"ConPTY: Just delete a character instead of reprinting a line when using backspace on a prompt # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18922.1000]
vscode 1.36.0 insiders
```

# Steps to reproduce

1. Open terminal
2. Press a
3. Press backspace

# Expected behavior

This is what happens when on Linux:

```
a
[K
```

# Actual behavior

```
a[0K
[?25l
C:\Users\daimms.REDMOND>[0K[?25h
```

# Why?

The incoming data is given to the screen reader to announce, so whenever backspace is pressed it would read out the prompt again.",zadjii-msft,Area-Performance;Product-Conpty;Issue-Bug;Needs-Attention;Needs-Tag-Fix;Priority-2,2019-06-26T18:24:39Z,2019-09-09T14:52:56Z,Tyriar,zadjii-msft;Tyriar,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,Tyriar,
microsoft/terminal,1647,"ConPTY: Entire line is reprinted for every prompt character after a space Related: https://github.com/microsoft/terminal/issues/1646

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18922.1000]
vscode 1.36.0 insiders
```

# Steps to reproduce

Repros in both cmd and python

1. Type a
2. Press space
3. Repeat

# Expected behavior

Only a and space should be sent from conpty until the end of the line is reached

# Actual behavior

```
a[0K
[27G
[?25l
C:\Users\daimms.REDMOND>a a[0K[?25h
[29G
[?25l
C:\Users\daimms.REDMOND>a a a[0K[?25h
[31G
[?25l
C:\Users\daimms.REDMOND>a a a a[0K[?25h
[33G
[?25l
C:\Users\daimms.REDMOND>a a a a a[0K[?25h
[35G
[?25l
C:\Users\daimms.REDMOND>a a a a a a[0K[?25h
[37G
[?25l
C:\Users\daimms.REDMOND>a a a a a a a[0K[?25h
[39G
[?25l
C:\Users\daimms.REDMOND>a a a a a a a a[0K[?25h
[41G
```
",zadjii-msft,Area-Performance;Product-Conpty;Issue-Bug;Needs-Attention;Needs-Tag-Fix;Priority-2,2019-06-26T18:32:27Z,2019-09-09T14:53:47Z,Tyriar,zadjii-msft;Tyriar,DHowett-MSFT;zadjii-msft,DHowett-MSFT,zadjii-msft,,Tyriar,microsoft/terminal#1646;
microsoft/terminal,1694,"Something wrong with keyboard modifiers processing? Something wrong with keyboard modifiers processing?

We have wrong processing of keyboard input with modifiers... For example: 

```c#
using System;

namespace ConsoleApp1
{
	class Program
	{
		static void Main(string[] args)
		{
			ConsoleKeyInfo cki;
			do
			{
				cki = Console.ReadKey();
				Console.Write("" --- You pressed "");
				if ((cki.Modifiers & ConsoleModifiers.Alt) != 0)
				{
					Console.Write(""ALT+"");
				}
				if ((cki.Modifiers & ConsoleModifiers.Shift) != 0)
				{
					Console.Write(""SHIFT+"");
				}
				if ((cki.Modifiers & ConsoleModifiers.Control) != 0)
				{
					Console.Write(""CTL+"");
				}
				Console.WriteLine(cki.Key.ToString());
			}
			while (cki.Key != ConsoleKey.Escape);
		}
	}
}
```

Same keys sequence is pressed... <kbd>1</kbd> <kbd>2</kbd> ... <kbd>0</kbd> <kbd>RCtrl</kbd>+<kbd>1</kbd> <kbd>RCtrl</kbd>+<kbd>2</kbd> <kbd>RCtrl</kbd>+<kbd>3</kbd>... <kbd>RCtrl</kbd>+<kbd>0</kbd>
<kbd>LCtrl</kbd>+<kbd>1</kbd> <kbd>LCtrl</kbd>+<kbd>2</kbd>  <kbd>LCtrl</kbd>+<kbd>3</kbd> <kbd>LCtrl</kbd>+<kbd>4</kbd>

We have some, but also wrong result only for <kbd>Ctrl</kbd>+<kbd>2</kbd>... Shift modifier added.

![image](https://user-images.githubusercontent.com/1778999/60325129-392af380-998f-11e9-962b-354f7c755531.png)

Same behaviour also with more complicated software -  ""Far Manager"" for example (in this situation problem not with simple Console.ReadKey but with keyboard events processing. In this example we don't see any reactions of software on pressing <kbd>Ctrl</kbd> like we can see in old console. So problems also with keyboard modifiers).",zadjii-msft,Resolution-Fix-Committed;Area-Input;Area-VT;Issue-Bug;Product-Terminal,2019-06-28T07:55:48Z,2020-06-08T22:31:30Z,igorkuzuro,DarthJahus;DHowett-MSFT;j4james,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,1703,"Certain characters taking up more than one line in height I've only noticed this for a single character type so far, and it's the mesh-like character that is used for progress bars
Here's what I mean
![Untitled](https://user-images.githubusercontent.com/25707449/60362341-f2fe8000-99e0-11e9-9bb8-18379fb0fb06.png)
In the screenshot above the difference in height between the said mesh-like character and the box character is clearly visible, but the extending up on the line above is more clearly visible in this next one
![Untitled1](https://user-images.githubusercontent.com/25707449/60362452-3527c180-99e1-11e9-98b7-4240ddcc0fdc.png)
It's not the biggest of bugs and it's not really that important nor does it need immediate attention, but it is something that is really bothering me and I thought I should point it out.",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-3,2019-06-28T18:14:53Z,2020-02-21T00:57:14Z,leptr,miniksa;leptr,miniksa;DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,1795,"BUG: Minimizing Terminal Crash <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.175
Windows Terminal version: 0.2.1831.0
```

# Steps to reproduce
Execute a command that keeps outputting something for a while.
for example you can user `apt list` or `ls` in a directory with a lot of content.

Then, while the command is running, double click on the titlebar or click the minimize? button.

# Expected behavior
The behavior I would have expected was for it to pause or keep running
# Actual behavior
The Terminal Freezes and crashes after approximately 1,5 seconds
Other Terminal windows are unaffected

",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Issue-Bug;Area-TerminalControl;Severity-Crash;Needs-Tag-Fix,2019-07-03T12:20:55Z,2019-07-30T22:01:28Z,evlli,zadjii-msft;mcpiroman,zadjii-msft;DHowett-MSFT,DHowett-MSFT;zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,1825,"Bug Report: CentOS system ssh cursor behavior bug # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.207]
Windows Terminal version (if applicable): Version: 0.2.1831.0

Any other software?
```

# Steps to reproduce

1. ssh to a centOS based system (it has to be a CentOS Linux)
2. open a Linux screen session
3. press backspace when there is nothing in the current command line

# Expected behavior

Nothing happens

# Actual behavior

The location of the changes. The display of the text is weird if you type something.
Similar problem link: https://github.com/microsoft/WSL/issues/1436",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Area-VT;Issue-Bug;Priority-2,2019-07-04T15:38:19Z,2019-10-03T21:04:49Z,tong-qiu,JohnHolmesII;zadjii-msft;tong-qiu;DHowett-MSFT;miniksa,zadjii-msft;DHowett-MSFT,DHowett-MSFT;zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,1853,"Nit: Logo on Live Tile has no shadow ![image](https://user-images.githubusercontent.com/75278/60761558-5b85d680-a04b-11e9-8715-4ded9bc39e66.png)

# Environment

```none
Windows build number: Win10 1903 18362.207
Windows Terminal version (if applicable): 0.2.1831.0

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Pin Windows Terminal to the start menu
# Expected behavior
Icon should have a shadow like the office icons
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
Icon has no shadow
<!-- What's actually happening? -->


Also I think it's a bit too small? Or maybe the YourPhone one is the outlier here, I actually like the size of that one way better.",cinnamon-msft,Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-07-06T22:11:17Z,2022-08-12T21:36:38Z,Stanzilla,carlos-zamora;DHowett-MSFT;Stanzilla;anjc;mdtauk;miniksa;vefatica;Cyberdroid1;zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,1856,"Snapping to smaller screen with a COOKED_READ crashes conpty <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt]
**Microsoft Windows [Version 10.0.18362.207]**
OS language is dutch
Windows Terminal version (if applicable):
**Windows Terminal (Preview)
Version: 0.2.1831.0**

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
full screen the terminal window and use the keys ""windows + shift + arrow"" to move the window to your second screen

# Expected behavior
Go full screen on second monitor

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
When I move it from a 1920x1080 screen to a 2560x1080 screen it goes full screen. When moving it from a 2560x1080 screen to a 1920x1080 screen the terminal crashes.
<!-- What's actually happening? -->

# Message event viewer (Dutch)
Naam van toepassing met fout: WindowsTerminal.exe, versie: 1.0.1907.2001, tijdstempel: 0x5d1bd2d0
Naam van module met fout: ucrtbase.dll, versie: 10.0.18362.1, tijdstempel: 0x5cbddb81
Uitzonderingscode: 0xc0000409
Foutmarge: 0x000000000006d3be
Id van proces met fout: 0x3028
Starttijd van toepassing met fout: 0x01d534b9425f56b0
Pad naar toepassing met fout: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_0.2.1831.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Pad naar module met fout: C:\WINDOWS\System32\ucrtbase.dll
Rapport-id: d822f0b0-3805-4c9f-b74e-87c80dc48334
Volledige pakketnaam met fout: Microsoft.WindowsTerminal_0.2.1831.0_x64__8wekyb3d8bbwe
Relatieve toepassings-id van pakket met fout: App",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Interaction;Issue-Bug;Severity-Crash;Priority-1,2019-07-07T11:58:57Z,2020-04-29T23:47:57Z,2MuchLag4you,zadjii-msft;DHowett-MSFT;galassie,carlos-zamora;zadjii-msft,DHowett-MSFT;zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,
microsoft/terminal,1872,"Run As Administrator 
![2019-07-08_14h29_22](https://user-images.githubusercontent.com/4114872/60814245-2aadba80-a18d-11e9-8188-cda6edf362f4.png)
![2019-07-08_14h29_54](https://user-images.githubusercontent.com/4114872/60814275-3a2d0380-a18d-11e9-9bb1-b8f822c82e96.png)


Seems there is an issue running the terminal ""As Administrator"" 

Error: Windows cannot find ""C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_0.2.1831.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe"" Make sure you've typed the name correctly, then try again



",DHowett-MSFT,Resolution-External;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2019-07-08T13:30:44Z,2019-07-29T21:23:35Z,mohammedha,zadjii-msft;mohammedha;musm;Bananaman;hudo;FranklinYu;CraigHead;A9G-Data-Droid;DHowett-MSFT;ghost;mian-muhammad;Steffen-Jens;danstur;SirStumfy;Mr-Sawyer;fcharlie;cking22001,zadjii-msft;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,1894,"Ctrl+C can't be intercepted by PowerShell for shutdown # Environment

```none
Windows build number: 10.0.18362.175
Windows Terminal version: 0.2.1831.0
PowerShell Core 6.2.1
PowerShell 5.1
```

I'm on a Microsoft Surface Book. There is no Pause key and no Break key. Ctrl+Break is not an option for stopping a program unless I plug in an external keyboard or do some sort of key remapping specifically for this.

# Steps to reproduce

Create a script in PowerShell that intercepts Ctrl+C so it can gracefully shut down. Run that script and try to use Ctrl+C. The script can't intercept it.

It behaves the same in PowerShell Core and in PowerShell.

```powershell
[Console]::TreatControlCAsInput = $True
Start-Sleep -Seconds 1
$Host.UI.RawUI.FlushInputBuffer()
$exiting = $false
while ((-Not $exiting)) {
    Write-Host ""Sleeping...""
    Start-Sleep -Seconds 1
    while ($Host.UI.RawUI.KeyAvailable -and ($Key = $Host.UI.RawUI.ReadKey(""AllowCtrlC,NoEcho,IncludeKeyUp""))) {
        If ([Int]$Key.Character -eq 3) {
            Write-Warning ""Got CTRL-C!""
            $exiting = $true
        }

        $Host.UI.RawUI.FlushInputBuffer()
    }
}
Write-Host ""Done.""
[Console]::TreatControlCAsInput = $False
```

# Expected behavior

I should be able to hit Ctrl+C to stop the program. In a standard PowerShell terminal (not hosted in the new Microsoft Terminal) this works fine.

# Actual behavior

The program pauses, ostensibly to allow copy/paste behavior to work, and if I hit Enter it continues running. There is no way to capture Ctrl+C.",leonMSFT,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-2,2019-07-09T16:12:19Z,2020-04-22T17:28:05Z,tillig,DHowett-MSFT;jcoutch;analogrelay;ssg;brandedoutcast;mithrandir,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,1913,"Bug Report: Dark Theme requires settings reload Despite the **requestedTheme** setting being set to **dark**, the Terminal window opens up in a light theme (which matches my OS default App Mode) and it is only when I re-save the profiles,json file, whilst the window is open, that it redraws as Dark.

# Environment

```none
Windows build number: 18362.207
Windows Terminal version (if applicable): Windows Terminal (Dev Build) - Wed 10 July, 16:56 GMT

Any other software?
```

# Steps to reproduce

Set **requestedTheme** to **dark** in the profiles.json file, and open Windows Terminal.

Once open open and re-save the profiles.json file, change the setting, and the app window will redraw.

Close Windows Terminal, and re-open.

# Expected behavior

Windows Terminal's window should draw in the correct Requested Theme everytime the app is open.

# Actual behavior

The app ignores the theme choice within the profiles.json file, and defaults to the OS system setting for the App Mode.
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-07-10T16:00:01Z,2019-07-25T20:25:39Z,mdtauk,zadjii-msft,zadjii-msft,DHowett-MSFT,zadjii-msft,,miniksa,
microsoft/terminal,1965,"Escape sequences behave strangely over conpty when VirtualTerminalLevel is set # Environment

```none
Windows build number: Version 10.0.18362.175
Windows Terminal version (if applicable): 0.2.1831.0
```

# Steps to reproduce

1. Set the `HKCU\Console\VirtualTerminalLevel` registry entry to 1, to enable support for VT escape sequences by default.
2. Makes sure the `initialCols` option in the Windows Terminal profile is set to 120.
3. Open a **cmd** shell in the Windows Terminal (this can't be a WSL bash shell - it must be something that would usually not have VT support enabled without the registry setting).
4. Run the following Python script:

       import sys
       sys.stdout.write('X'*(120-10))
       sys.stdout.write('\033[1;34;47mHello\033[m\n')

# Expected behavior

I'd expect this to display 110 X's followed by the word _Hello_, in blue on white, on the same line. This is what it looks like in a regular console cmd shell.

![image](https://user-images.githubusercontent.com/4181424/61186979-b038db00-a663-11e9-8b49-1abf23aa1b88.png)

# Actual behavior

What actually happens in the Windows Terminal is the _Hello_ is displayed on the following line.

![image](https://user-images.githubusercontent.com/4181424/61186985-c34bab00-a663-11e9-8ec8-3c714497d803.png)

I don't have a good understanding of how the conpty stuff works, but my theory is that the escape sequences aren't actually being processed initially, and are just written out to the screen as literal characters. As a result the _Hello_ is forced to wrap onto the next line, because there isn't enough space remaining. This screen structure is then passed through conpty somehow, at which point the escape sequences are processed and the text colors changed. But by that stage the wrapping has already taken effect, so the text is in the wrong place.

It's easier to see what's going on if you apply PR #1964 first. In that case, the ESC character gets translated to a 閳 when it isn't initially interpreted as an escape sequence. The other side of the conpty pipe then doesn't get a second chance to process those values as an escape sequence, so you just see the raw characters being written out.

![image](https://user-images.githubusercontent.com/4181424/61187019-2f2e1380-a664-11e9-85fe-f0a656c47e67.png)

This may be a good reason to reject PR #1964 for now, since it's clearly making the situation worse, but I think the real issue is in the conpty code, and if that were fixed then the PR might well be safe to merge.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Server;Issue-Bug;Needs-Tag-Fix,2019-07-14T17:35:31Z,2019-09-23T22:07:48Z,j4james,DHowett-MSFT;j4james;zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,1976,"cmd.exe always hang if calling SetConsoleScreenBufferSize at bottom line <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Microsoft Windows [Version 10.0.18362.239]
```

# Steps to reproduce

Sorry, I don't figure out clearly but this step always make cmd.exe hang. At present, the method that can be reliably reproduced is to start vim.exe at the bottom line of cmd.exe.

# Expected behavior

Do not hang.

# Actual behavior

Hang.

FYI, I tried to run this code, but not reproduce.

```c
#include <windows.h>

int
main(int argc, char* argv[]) {
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD coord;
	coord.X = 80;
	coord.Y = 300;
	SetConsoleScreenBufferSize(h, coord);
	return 0;
}
```
",miniksa;j4james,Product-Conhost;Resolution-Fix-Committed;Area-Server;Issue-Bug;Severity-Crash;Needs-Tag-Fix;Priority-1,2019-07-15T13:22:35Z,2020-11-17T21:17:51Z,mattn,mattn;miniksa;j4james;magiblot,DHowett-MSFT;miniksa,DHowett-MSFT,DHowett-MSFT,,DHowett,microsoft/terminal#1795;microsoft/terminal#1206;
microsoft/terminal,1996,"Sometimes, tabs delay closing for 2+ seconds Looked around for `delay close`, `tab close` etc, couldn't find. Apologies if it's a dup!

# Environment

```none
Windows build number: [Version 10.0.18362.239]
Windows Terminal version (if applicable):  0.2.1831.0

Any other software? No
```

# Steps to reproduce
1. Open Terminal
2. Press ""+"" button to open new tab or two
3. Fairly quickly after, press `Ctrl+W` multiple times

# Expected behavior
Tabs close instantly upon pressing `Ctrl+W`

# Actual behavior
Sometimes the tab takes awhile (like, multiple seconds) to obey your ""close"" command via `Ctrl+W`

When this happens, the human gets frustrated, and presses it multiple times, resulting in Terminal being entirely closed after a few seconds.

This makes for a **terrible** first user experience. I couldn't reproduce it every time, but it happened the first two times I opened the terminal, which was all it took to give me a bad first impression.
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-2,2019-07-17T03:44:27Z,2020-04-09T23:27:57Z,clounie,DHowett-MSFT;runemoberg;zadjii-msft,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,zadjii-msft,,,
microsoft/terminal,2003,"Windows Terminal does not display a line with Thai text in Emacs properly. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```
Windows: Microsoft Windows [Version 10.0.18362.239]
Windows Terminal: 0.2.1831.0
Remote OS:  Raspbian GNU/Linux 9.8 (stretch) armv7l   
Emacs 25.1.1 with rust-mode
Vim 8.0.707 
```

# Steps to reproduce

1. Open Windows Terminal
2. Run ssh to remote GNU/Linux
3. Download https://file.veer66.rocks/windows/re.rs
4. Run emacs
5. Install rust-mode to Emacs
6. In Emacs, open file re.rs

# Expected behavior

Windows Terminal should display this code:

```Rust
lazy_static! {
    static ref DATE_RE: Regex = Regex::new(r""(\d{4})(\d{2})(\d{2})"").unwrap();
    static ref CHUNK_RE: Regex = Regex::new(r""[鍠-鍠欏畟+|\([^\)]+\)"").unwrap();
    static ref THAI_RE: Regex = Regex::new(r""[鍠-鍠欏畟+"").unwrap();
}
```

like below:

![xfce_term_emacs](https://user-images.githubusercontent.com/370688/61382821-a8816c80-a8d7-11e9-9555-0a2b122bcddd.png)

# Actual behavior

Line 3 was broken.

![win-term-emacs](https://user-images.githubusercontent.com/370688/61382857-bd5e0000-a8d7-11e9-8240-cf6a62abe92c.png)
",zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1,2019-07-17T14:14:25Z,2020-04-17T11:43:25Z,veer66,DHowett-MSFT;metathinker;veer66;zadjii-msft;izcream,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,zadjii-msft,,veer66,
microsoft/terminal,2011,"Bug Report: What is reordering VT escape sequences in my string? <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.239]
Windows Terminal version (if applicable): (built from latest source as of July 17th, 2019, morning)
```

I am working on implementing some new VT escape sequences (PR [here](https://github.com/microsoft/terminal/pull/1978)), but I've run into a strange problem. What the sequences do (or are supposed to do) is not important here. The problem is that in certain circumstances, something is *reordering* VT escape sequences in my content (which is very surprising to me).

The control sequences in question are XTPUSHSGR and XTPOPSGR: `[CSI]#p` and `[CSI]#q`, respectively. Note in the string below, how there is an XTPUSHSGR sequence, then a normal SGR sequence to set the color to red, then an XTPOPSGR sequence (and then a normal SGR sequence to reset the color).

When I open OpenConsole.sln in Visual Studio 2019, with the CascadiaPackage set as the default project to debug, and then <kbd>F5</kbd> to start debugging it, it launches a terminal running Windows PowerShell. When I send my string to the console, something is *moving* the XTPUSHSGR and XTPOPSGR sequences to the very beginning of the string!

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Start OpenConsole.sln in Visual Studio 2019. Make sure CascadiaPackage is the default project, and platform is set to x64, and build the solution if necessary.
1. <kbd>F5</kbd> to start debugging a new instance. You should now have a PowerShell instance in the terminal.
1. In the PowerShell instance in the terminal, run the following commands:

```powershell
 $esc = [char] 0x1b
 $s = ""Hello. Push:${esc}[#p ${esc}[91m this text is RED Pop:${esc}[#q FG should "" +
      ""no longer be red (unless it was red before) courtesy reset: ${esc}[0m""
```
4. Set a breakpoint at `TerminalControl.dll!Microsoft::Console::VirtualTerminal::StateMachine::ProcessString` (the two-parameter one).
1. In the PowerShell instance in the terminal, run the command `$s` to output the string.
1. When you hit the breakpoint, observe the value of `rgwch`.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
The content of the string should be just as it was set in PowerShell.

# Actual behavior

<!-- What's actually happening? -->

The XTPUSHSGR and XTPOPSGR sequences have been moved to the beginning of the string!

My first thought was that PowerShell must be doing something funny, but I attached windbg to the PowerShell and set a breakpoint on kernel32!WriteConsoleW, and the string passed in there is correct. So something is happening after the string has left PowerShell's hands.
",zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Product-Conpty;Issue-Bug;Needs-Tag-Fix;Priority-1,2019-07-17T19:02:20Z,2020-03-12T23:31:46Z,jazzdelightsme,zadjii-msft;jazzdelightsme;DHowett-MSFT,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2028,"Flyout/Dropdown light dismiss not working with Titlebar click # Environment

```none
Windows build number: 18362.263
Windows Terminal version (if applicable):0.0.1.0 - Built 01:02 Fri 19 July
```

# Steps to reproduce

When you tap on the drop down button, and bring the flyout on screen.  Clicking on the Titlebar will not trigger the light dismiss behaviour and the flyout remains open.  Tapping on the terminal display, tab or tab bar, works as expected.

# Expected behavior

Tapping on the titlebar should dismiss the flyout
![image](https://user-images.githubusercontent.com/7389110/61500003-2b322680-a9c1-11e9-8858-6402f4aa8dbd.png)


# Actual behavior

Tapping the Titlebar does not dismiss it, and if you drag the window, the flyout lags in moving to the correct position

![image](https://user-images.githubusercontent.com/7389110/61500048-71878580-a9c1-11e9-9af6-0b6aa8ac42d1.png)

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal,2019-07-19T00:06:44Z,2019-08-16T21:18:30Z,mdtauk,DHowett-MSFT;mdtauk,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,2045,"Terminal crashes when the window width is too small <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt] 10.0.18941.1001
Windows Terminal version (if applicable): commit 5074335392c14d3359280609c8a03166cc20b857

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Open Windows Terminal, and resize the window, when the window width is smaller than a certain value, it crashes.
![out](https://user-images.githubusercontent.com/22699485/61577629-a5c38900-ab1c-11e9-9c9b-020f22c7556e.gif)

# Expected behavior
It should not crash.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
It crashes.

<!-- What's actually happening? -->
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-07-20T10:34:29Z,2019-07-26T16:16:13Z,driver1998,vblazhkun;mcpiroman;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,2057,"Dragging into corner for 1/4 view will result tab to be smaller than maximum Dragged into corner of windows to snap into 1/4 view
![image](https://user-images.githubusercontent.com/3610982/61629908-e6dbaa80-ac8e-11e9-887f-cb259b57b816.png)


Using WINDOWS KEY + Arrows will not produce same result (is good)
Expected result:
![image](https://user-images.githubusercontent.com/3610982/61629960-083c9680-ac8f-11e9-82ad-ca377f274dd0.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-07-22T11:43:43Z,2019-07-30T22:04:48Z,DragonbornSR,DHowett-MSFT;DragonbornSR;zadjii-msft,DHowett-MSFT,DHowett-MSFT;zadjii-msft,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2061,"Terminal is starting up at a size that's different from initialRows/initialCols  # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.264]
Windows Terminal version (if applicable): 8ffff8ea 0.2.1991.0
Any other software? WSL
```

# Steps to reproduce

The relevant-looking parts of profiles.json are:

```
{
    ""globals"" : 
    {
        ""defaultProfile"" : ""{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}"",
        ""initialCols"" : 80,
        ""initialRows"" : 40,
    },
    ""profiles"" : 
    [
        {
            ""commandline"" : ""wsl.exe -d Ubuntu-18.04"",
            ""fontFace"" : ""DejaVu Sans Mono for Powerline"",
            ""fontSize"" : 9,
            ""guid"" : ""{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}"",
            ""padding"" : ""0, 0, 0, 0""
        }
    ]
```


# Expected behavior

I should see an 80x40 terminal.

# Actual behavior

I get an 80x37 terminal, with extra blank horizontal space after the last usable column:

![image](https://user-images.githubusercontent.com/13037682/61648053-84b98000-ac63-11e9-896c-453cee71e02a.png)
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Area-Settings;Product-Terminal;Priority-3,2019-07-22T16:34:48Z,2020-03-23T22:24:34Z,0xabu,culcube;zadjii-msft;fpqc;daviox;zypA13510;DHowett-MSFT,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,,,,
microsoft/terminal,2078,"Crash on About dialog when running Terminal unpackaged <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt] 10.0.18941.1001
Windows Terminal version (if applicable): commit 9d36b08b82c67c6965263c63bb83b024c15f3474

Any other software?
```

I know it is not a supported scenario, but with https://github.com/microsoft/terminal/pull/2043 we can now run Terminal unpackaged. 
And some people might prefer it this way.

# Steps to reproduce

Run WindowsTerminal.exe directly, outside of app package.
Click about in the drop down menu.

<!-- A description of how to trigger this bug. -->

# Expected behavior

The about dialog show up as normal.

# Actual behavior

The app crashes.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Needs-Triage;Product-Terminal,2019-07-24T18:40:59Z,2019-07-29T16:46:33Z,driver1998,zadjii-msft;DHowett-MSFT,zadjii-msft,,zadjii-msft,,miniksa,
microsoft/terminal,2100,"When a dialog is open, the titlebar is the wrong color related to #1625.

![image](https://user-images.githubusercontent.com/18356694/61895322-04e81b80-aed8-11e9-8ecc-ce908f185e69.png)

This one's tricky - the Background of the TabRow doesn't actually change here, it's just being combined with the overlay of the ContentDialog. We'd have to compose that color ourselves in the NonClientWindow class.",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-2,2019-07-25T17:33:09Z,2020-04-24T22:22:41Z,zadjii-msft,DHowett-MSFT;greg904,zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2143,"Unable to build with Visual Studio 2019 version 16.2.0 # Environment
Windows build number: Version 10.0.18362.267

# Steps to reproduce
Update to the latest Visual Studio 2019 (16.2.0)
Build Terminal (you will get a compiler error)

(I had no issues building with 16.1.0)

# Expected behavior
Terminal should build without any errors

# Actual behavior
Here is the error:

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(2106,5): error MSB3272: There was a problem reading the implementation file ""C:\Users\Ajay\microsoft\terminal\x64\Release\TerminalAppLib\TerminalAppLib.lib"". ""Unable to read beyond the end of the stream.""

<!-- What's actually happening? -->
Possibly related to https://github.com/microsoft/msbuild/issues/4547

",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-Build;Product-Meta;Needs-Tag-Fix,2019-07-29T21:52:30Z,2019-08-09T20:21:46Z,ajaykagrawal,DHowett-MSFT;ajaykagrawal;mbreaton;hh-shiung,zadjii-msft,miniksa,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2160,"Narrator line navigation gets stuck on some lines > Open PowerShell, type dir, press &lt;Enter&gt;
> Caps + Page up a few times to switch to Line view
> Caps + Left arrow to move up the history buffer
> Caps + right arrow to move back down
> When Narrator tries to read pass the heading area (see below, navigation got stuck. (Somehow Narrator rectangle was cover two lines all at once)
> Mode LastWriteTime Length Name
> ---- ------------- ------ ----
> I was able to get past that using word or character navigation.

_migrated from 23051804_",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility,2019-07-30T20:15:43Z,2020-01-31T20:59:40Z,DHowett-MSFT,DHowett-MSFT;miniksa;carlos-zamora,DHowett-MSFT,miniksa,miniksa,,,
microsoft/terminal,2167,"Bug Report - Default profile not handled <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run ""ver"" at a command prompt]
Microsoft Windows [Version 10.0.18362.175]
Windows Terminal version (if applicable):
0.2.1831.0

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Change ""defaultProfile"" to anything other than a valid profile

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Defaults to an existing profile or uses a default

# Actual behavior

<!-- What's actually happening? -->
Nothing",zadjii-msft,Resolution-Fix-Available;Issue-Bug;Area-Settings;Product-Terminal,2019-07-31T12:33:29Z,2019-10-02T16:25:16Z,elken,zadjii-msft;elken,zadjii-msft,miniksa,miniksa,,zadjii-msft,
microsoft/terminal,2180,"Windows Terminal hangs when erasing scrollback # Environment

Windows build number: Version 10.0.18362.175
Windows Terminal version (if applicable): Commit a08666b58eb65b85ddf94e69892fa3e0a084ba98

# Steps to reproduce

1.  Start the Windows Terminal (Dev Build).
2. Open an Ubuntu tab (or whatever Linux shell you have).
3. Do a bunch of directory listings that really fill up the scrollback buffer (the System32 directory is good for that).
4. Execute `printf ""\e[3J""` to clear the scrollback buffer.

# Expected behavior

The scrollback buffer should be cleared and control returned to the user almost immediately.

# Actual behavior

The app essentially stops responding. It will return to normal eventually, but how long that takes depends on the speed of your computer and how full the scrollback was to start with.

This might be a duplicate of one of the other freeze-on-exit bugs (e.g. #1445), since the terminal seems to generate an erase scrollback call whenever you exit. But it only happens when actually typing `exit` in the shell - closing the tab directly works OK.

From what I've been able to determine, the source of the problem is in the `Terminal::EraseInDisplay` method. When the eraseType is `EraseType::Scrollback`, it performs a loop to clear every line of the scrollback:

https://github.com/microsoft/terminal/blob/a08666b58eb65b85ddf94e69892fa3e0a084ba98/src/cascadia/TerminalCore/TerminalApi.cpp#L340-L345

Note that the _eraseIter_ `OutputCellIterator` is set to the size of the full area being cleared, but a `_buffer->Write` call is made with that iterator for every line. Each one of those calls is enough to clear the entire area, so it's essentially performing a huge write operation over and over again. If your scrollback buffer is large, this can take forever.

I think this is probably a regression. I have preview build 0.2.1831.0 installed on this machine too, and that doesn't seem to have the problem.
",PankajBhojwani,Resolution-Fix-Committed;Area-Performance;Area-VT;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2019-07-31T19:08:04Z,2019-08-01T20:19:23Z,j4james,j4james;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,PankajBhojwani,
microsoft/terminal,2186,"JOE editor handles enter key incorrectly - beginning of line <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```

Windows build number: [Version 10.0.18362.267] Windows 10 Professional Version 1903
Windows Terminal version (if applicable): whatever is out-of-the-box

Any other software?
```

- Ubuntu 18.04.LTS from the Microsoft Store fully updated with 
`sudo apt update ; sudo apt upgrade`
- The joe editor installed in Ubuntu with 
`sudo apt install joe`

# Steps to reproduce

1. Start the joe editor with a new file without specifying a filename
2. Type 3 lines at least to see what happens, e.g.:

```
line1
line2
line3
```
   
3. Go back with the cursor to the beginning of line2.
4. Press the ENTER key.

# Expected behavior

A new line should be inserted in the place of the cursor and the part of the file starting with the cursor position was in should be scrolled down on the screen and the last shown line should scroll out (disappear) and the cursor should move one line down.

I.e. you should see

```
line1

line2
line3
```

and the new cursor position should be at the beginning of line2

**Note that after saving the file, the expected behavior is what correctly happens in the file data, only the display behavior is incorrect.**

**Note, that this worked correctly in Windows 1803 with the same Ubuntu 18.04 LTS and joe versions. The upgrade to Windows 1903 broke this, and reinstalling joe and reinstalling the entire Ubuntu 18.04 LTS distribution did not fix this either.**

# Actual behavior

No scrolling of the part after the cursor happens, instead the line the cursor was in is cleared (becomes empty, not disappear), and the cursor (correctly) moves down to the beginning of the next line.

I.e. you see

```
line1

line3
```

and the cursor position is at the beginning of line3.

**Note that after saving the file, the expected behavior is what correctly happens to the file data, only the display behavior is incorrect.**
",zadjii-msft,Product-Conhost;Resolution-Fix-Available;Area-VT;Issue-Bug;Needs-Attention,2019-08-01T10:07:13Z,2019-08-28T04:58:01Z,robvarga,zadjii-msft;robvarga;DHowett-MSFT;mdebee;j4james,zadjii-msft;miniksa,miniksa;zadjii-msft,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2187,"JOE editor handles enter key incorrectly - middle of line <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [Version 10.0.18362.267] Windows 10 Professional Version 1903
Windows Terminal version (if applicable): whatever is out-of-the-box

Any other software?
```
- Ubuntu 18.04.LTS from the Microsoft Store fully updated with 
`sudo apt update ; sudo apt upgrade`
- The joe editor installed in Ubuntu with 
`sudo apt install joe`

# Steps to reproduce

1. Start the joe editor with a new file without specifying a filename
2. Type 3 lines at least to see what happens, e.g.:

```
line1
line2
line3
```
   
3. Go back with the cursor to the middle of line2, e.g. before the 'n' character
4. Press the ENTER key.

# Expected behavior

The lines under the line which the cursor resides in should scroll down one, and the bottom line of the screen should scroll out, and the part of the line with the cursor following the cursor should go to the beginning of the line vacated by the scrolling down of the subsequent lines and the cursor should move to the beginning of the vacated line.

I.e. you should see

```
line1
li
ne2
line3
```

and the new cursor position should be before the 'n' character of ne2.

**Note that after saving the file, the expected behavior is what correctly happens in the file data, only the display behavior is incorrect.**


**Note, that this worked correctly in Windows 1803 with the same Ubuntu 18.04 LTS and joe versions. The upgrade to Windows 1903 broke this, and reinstalling joe and reinstalling the entire Ubuntu 18.04 LTS distribution did not fix this either.** 

# Actual behavior

No scrolling of the part after the cursor happens, instead the line following the line the cursor was in is replaced with the part of the line the cursor resides in and the cursor (correctly) moves down to the beginning of the next line.

I.e. you see

```
line1
li
ne2
```

and the cursor position is (correctly) before the 'n' character of 'ne2'.

Note, that this **behaviour is different from #2186 (hence the separate bug)**, because the part of the line following the cursor overwrites the subsequent line, whereas in #2186 it does not.

**Note that after saving the file, the expected behavior is what correctly happens to the file data, only the display behavior is incorrect.**
",zadjii-msft,Resolution-Duplicate;Product-Conhost;Area-VT;Issue-Bug;Needs-Tag-Fix,2019-08-01T10:29:29Z,2019-08-28T04:59:26Z,robvarga,zadjii-msft;DHowett-MSFT,zadjii-msft;miniksa;DHowett-MSFT,miniksa;zadjii-msft,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2191,"Chinese characters are not rendering correctly if I type above them. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number:  Microsoft Windows [Version 10.0.18362.239]
Windows Terminal version (if applicable):   0.2.1831.0
```

# Steps to reproduce

1. Fire up WSL
2. Run vim
3. Enter some Chinese characters, they seems to be fine.
4. Press Esc, press o to insert a new line above
5. Start typeing some English letter...
6. And the Chinese characters become smaller than normal size...
7. If I type English letter beneath, It works OK

![](https://i.imgur.com/R9Zfvka.png)
![](https://i.imgur.com/QAyWUVK.png)
![](https://i.imgur.com/fZSyyJa.png)

# Expected behavior

Chinese characters should stay the same size no matter I type something above or beneath it

# Actual behavior

Chinese characters turn into smaller size  if I type English above the line.


",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1,2019-08-01T14:33:15Z,2020-02-21T00:24:13Z,klesh,miniksa;skyline75489;zadjii-msft,zadjii-msft;cinnamon-msft,miniksa;cinnamon-msft,miniksa,,,
microsoft/terminal,2219,"Azure Cloud Shell device login reports itself as Visual Studio Code # Environment

Windows: 10.0.18362.267
Windows Terminal version:  0.3.2142.0

# Steps to reproduce

Open cloud shell window
Perform device login

# Expected behavior

Login text should name application as Microsoft Terminal.

# Actual behavior

Login text which talks about logging into Visual Studio Code",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-AzureShell,2019-08-03T13:58:38Z,2019-08-26T19:34:33Z,blowdart,PankajBhojwani;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,226,"Lucida Console can not fallback to display CJK characters after updating to 1803 * Windows build number:  Version 10.0.17134.165

* What you're doing and what's happening: 
**Under chcp 65001 (UTF-8)**
the Lucida Console font in cmd is unable to display Chinese Japanese and Korean characters after updating to 1803 version in semi-year channel:
![image](https://user-images.githubusercontent.com/5460009/43044988-95cd69f6-8de2-11e8-9d17-4fd0c1031ee0.png)


* What's wrong / what should be happening instead:
Under MS-Mincho it works fine (but the font is ugly):
![image](https://user-images.githubusercontent.com/5460009/43044984-8b47f280-8de2-11e8-948d-5eb4694ae35a.png)
  
and under version 1709 (build 10.0.16299.492) it also worked fine:
![image](https://user-images.githubusercontent.com/5460009/43044993-aa3ce7cc-8de2-11e8-979e-a67347eeca13.png)

I have different computers set in English, Japanese and Chinese language, they all behaved the same. Maybe I'll have to change some setting in the registry?

",miniksa,Work-Item;Product-Conhost;Area-Rendering;Issue-Bug;Needs-Tag-Fix,2018-07-22T11:12:09Z,2021-09-10T12:41:10Z,toshichi,amasover;bitcrazed;lhecker,zadjii-msft;miniksa,miniksa,zadjii-msft;miniksa,miniksa,lhecker,
microsoft/terminal,2260,"WSL Ubuntu clear -x partially clears scrollback # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.267]
Windows Terminal version (if applicable): 0.3.2142.0
WSL 1 with Ubuntu 18.04
```

# Steps to reproduce

1. Open terminal with WSL Ubuntu
2. Display something on stdout (e.g. `echo Hello world!`)
3. Run `clear -x` or `Ctrl+L`

# Expected behavior

Move promt to top of the screen and put what is currently dispalyed on the screen in the scrollback. This is how the old console functioned.

# Actual behavior

Moves promt to top of the screen, and clears what is currently displayed on the screen without putting it in the scrollback
",carlos-zamora,Resolution-Duplicate;Product-Conpty;Area-VT;Issue-Bug;Area-TerminalControl;Priority-2,2019-08-05T17:31:33Z,2020-01-28T22:30:53Z,RyanHope97,zadjii-msft;RyanHope97;carlos-zamora,zadjii-msft;cinnamon-msft,DHowett-MSFT,cinnamon-msft,,,
microsoft/terminal,2265,"Terminal crashes when graphics cards timeout and graphics driver does soft reset When the graphics cards do a soft reset, the terminal crashes. I need to make sure the DX code is more robust. 

Also lol at getting my own issue closed for an empty description.",DHowett-MSFT,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1,2019-08-05T18:14:03Z,2019-09-23T22:06:48Z,miniksa,richardszalay,miniksa;zadjii-msft,miniksa,miniksa,,DHowett-MSFT,
microsoft/terminal,2289,"No VERSIONINFO resource? [UAC prompt says ""Unknown program"" instead of ""Windows Terminal""] <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18945.1001]
Windows Terminal version (if applicable): 0.3.2142.0

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Run Windows Terminal as an administrator.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
The program's name should show up correctly in the UAC prompt.

# Actual behavior

<!-- What's actually happening? -->
The UAC prompt calls it ""Unknown program"" rather than ""Windows Terminal"". However, it's detected as a signed application and the icon is shown correctly.

![Screenshot of UAC prompt](https://user-images.githubusercontent.com/482367/62536495-69976480-b84e-11e9-9ec5-40386822a3ea.png)
",DHowett-MSFT,Resolution-Fix-Committed;Help Wanted;Area-Interaction;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-3,2019-08-06T11:31:10Z,2020-03-18T23:19:06Z,nyuszika7h,DHowett-MSFT,oising;DHowett-MSFT;zadjii-msft;cinnamon-msft,oising;DHowett-MSFT,cinnamon-msft,,,
microsoft/terminal,2319,"Toggling Legacy console on and off enables Terminal colors but sets them to all black 
# Environment

Microsoft Windows [Version 10.0.18362.239]

# Steps to reproduce

1.Open a CMD
2.Settings > Options > Check Legacy 
3.Restart CMD
4.Settings > Options > Uncheck Legacy 
5.Restart CMD
6.Get a full black screen.





# Actual behavior

![Anmerkung 2019-08-07 110052](https://user-images.githubusercontent.com/53857169/62610352-d0c32080-b903-11e9-9eaa-6bd1aecbe406.png)

Screenshot from Settings after the steps to reproduce.

 # What's actually happening?

The problem is that i run a script on shutting down my computer which is for backup and ask me in a CMD if i want to backup my files.
Since the new update, this CMD is all black. So i just know what there is written, but i can't see it actually.
I think this causes from this bug.
",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Settings;Priority-1,2019-08-07T09:12:50Z,2019-10-02T23:05:00Z,nachtsaktiv,DHowett-MSFT;zadjii-msft;androidacy-user;asm128,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,carlos-zamora,
microsoft/terminal,2324,"Copy and paste in bash generates one single line <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.239]
Windows Terminal version (if applicable): Version: 0.3.2171.0

Using bash within Windows terminal.
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Copy several text lines and paste them using vi text editor in bash (WSL).


# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Properly copied lines within the text editor.

# Actual behavior

<!-- What's actually happening? -->
A single line is generated with spaces so that it looks like they are different lines.
",carlos-zamora,Resolution-Duplicate;Area-Interaction;Issue-Bug;Product-Terminal,2019-08-07T11:12:32Z,2019-09-26T21:16:17Z,havidarou,havidarou;carlos-zamora;ccarv;genio;nitinyadav745;termski;DHowett-MSFT;johanburati;jonneolie;polyisobutylene;ghost;Aebian;hteibler,carlos-zamora,carlos-zamora;zadjii-msft,,,havidarou,
microsoft/terminal,2375,"Crash: Use after free of std::function through CodepointWidthDetector # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.267]
Windows Terminal version (if applicable): 0.3.2171.0
```

# Steps to reproduce

I'm honestly not sure what I was doing. This might be #2251?

# Expected behavior

The terminal shouldn't crash.

# Actual behavior

```
ExceptionAddress: 00007ffdd2990f60 (uiautomationcore!MenuOpened_Event_GUID)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000008
   Parameter[1]: 00007ffdd2990f60
Attempt to execute non-executable address 00007ffdd2990f60

 # Child-SP          RetAddr           Call Site
0c 00000004`2aefe098 00007ffd`b226761b uiautomationcore!MenuOpened_Event_GUID
0d (Inline Function) --------`-------- TerminalControl!std::_Invoker_pmf_pointer::_Call+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\type_traits @ 1457] 
0e (Inline Function) --------`-------- TerminalControl!std::invoke+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\type_traits @ 1457] 
0f (Inline Function) --------`-------- TerminalControl!std::_Invoker_ret<std::_Unforced,0>::_Call+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\type_traits @ 1492] 
10 (Inline Function) --------`-------- TerminalControl!std::_Call_binder+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\functional @ 1485] 
11 (Inline Function) --------`-------- TerminalControl!std::_Binder<std::_Unforced,bool (__cdecl Microsoft::Console::Render::Renderer::*)(std::basic_string_view<wchar_t,std::char_traits<wchar_t> >),Microsoft::Console::Render::Renderer *,std::_Ph<1> const &>::operator()+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\functional @ 1531] 
12 (Inline Function) --------`-------- TerminalControl!std::_Invoker_functor::_Call+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\type_traits @ 1457] 
13 (Inline Function) --------`-------- TerminalControl!std::invoke+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\type_traits @ 1457] 
14 (Inline Function) --------`-------- TerminalControl!std::_Invoker_ret<bool,0>::_Call+0x17 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\type_traits @ 1483] 
15 00000004`2aefe0a0 00000000`00000000 TerminalControl!std::_Func_impl_no_alloc<std::_Binder<std::_Unforced,bool (__cdecl Microsoft::Console::Render::Renderer::*)(std::basic_string_view<wchar_t,std::char_traits<wchar_t> >),Microsoft::Console::Render::Renderer *,std::_Ph<1> const &>,bool,std::basic_string_view<wchar_t,std::char_traits<wchar_t> > >::_Do_call+0x1b [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.22.27905\include\functional @ 1007] 
```

I'm happy to share the crash dump out of band.",DHowett-MSFT,Product-Conhost;Resolution-Fix-Committed;Area-Server;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-08-09T17:47:54Z,2019-10-15T21:54:58Z,0xabu,0xabu;DHowett-MSFT;miniksa,DHowett-MSFT,DHowett-MSFT,miniksa,,DHowett-MSFT,
microsoft/terminal,2397,"ConPTY does not translate arrow keys with +ENHANCED_KEY in their modifiers Today I updated Windows to 1903 and found that a python program I had written earlier ran incorrectly.

The brief test code is as follows:

```
import msvcrt
ch1 = msvcrt.getch()
ch2 = msvcrt.getch()
print(ch1)
print(ch2)
```

When I run the above code in native powershell, press 閳 key when collecting characters, and it will print `b'\xe0' B 'K'`, and the same code running in the terminal returns `b'\x00' b'K'`.
This problem didn't appear in the last version of Windows (18.xx).

- OS Version: windows 10 1903
- [terminal version](https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab) : preview

Steps to Reproduce:

1. Run this code on the powershell terminal of vscode using Python3
2. press 閳 key閿涘篹cord print information
3. Run this code directly from your powershell on Windows using Python3
4. press 閳 key閿涘篹cord print information
5. Look at different outputs

A related issue on vscode閿

https://github.com/microsoft/vscode/issues/78682

Thank you for your attention.
",carlos-zamora,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-2,2019-08-12T02:56:27Z,2020-03-24T19:45:57Z,SummerGift,SummerGift;zadjii-msft;DHowett-MSFT;wmcbrine;thomthom,zadjii-msft;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,2399,"Store listing erroneously disables Game Bar recording # Description of the new feature/enhancement

Currently, attempting to record a Windows Terminal window using Game bar results in the error:

> This game does not allow recording

Being able to record the terminal would be useful for a bunch of scenarios.

# Proposed technical implementation details (optional)

I'm not clear on what's involved here (whether WT is actively blocking the request or if it requires handling some specific messages)",DHowett-MSFT,Resolution-Fix-Available;Issue-Bug;Area-User Interface;Product-Terminal,2019-08-12T05:01:30Z,2019-08-28T00:04:54Z,richardszalay,zadjii-msft;DHowett-MSFT;metathinker;richardszalay;lain-d;bigbrad7794,richardszalay;zadjii-msft,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2411,"Settings file being reformatted when settings are changed by the program # Environment

```none
Windows build number: Microsoft Windows NT 10.0.18362.0                                                                                                                                                                                     

Windows Terminal version: latest from the master branch

Any other software?
N/A
```

# Steps to reproduce

With the terminal closed, do anything that trigger a json settings file rewrite, for example, add any setting to the settings json file that is not on the schema (or is invalid), for example:

````json
{
    ""Foo"": 1,
    ""globals"" :
    {
````

Then, open the terminal

# Expected behavior

Terminal warns me somehow, or comments out the invalid setting. But does not, ever, reformat the file.

# Actual behavior

The settings file is rewritten and reformatted, and, worse of all, an annoying trailing space is added to the end of every json key. See image bellow:

![CodeSettingsFile](https://user-images.githubusercontent.com/334958/62889785-6dc4f580-bd18-11e9-8b9a-dceb89684bfe.gif)

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2019-08-12T18:47:55Z,2019-08-23T17:32:03Z,giggio,DHowett-MSFT;egmontkob;giggio,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2472,"TabTests.cpp test cases fail to run - TAEF harness fails to run with ""[HRESULT: 0x80270254] Failed to create the test host process for out of process test execution"" <!-- The message here makes the core time sound like a bunch of killjoys. They need to get out more. -->

On my computer, the test case file `src\cascadia\LocalTests_TerminalApp\TabTests.cpp` fails to run test setup with the above error message. I'm not sure if this is a general problem or just in my setup, but these tests don't seem to run in Azure DevOps CI ([I checked test run 31597](https://dev.azure.com/ms/Terminal/_build/results?buildId=31597&view=ms.vss-test-web.build-test-results-tab)) so I can't be sure.

### Environment
Windows build number: Microsoft Windows [Version 10.0.18362.295]
Windows Terminal version: current master commit 734fc1dcc6de4315d4cc91944c5ea83b7b8a7e1a

### Steps to reproduce
1. Checkout the Terminal repo.
1. Run `tools\razzle.cmd & bz rel` to get a successful build.
1. Run: `""%TAEF%"" bin\%PLATFORM%\Release\LocalTests_TerminalApp\TerminalApp.LocalTests.dll /name:""TerminalAppLocalTests::TabTests::*""`

### Expected behavior
All tests pass.

### Actual behavior
The test file does not run at all, with error 0x80270254 == E_APPLICATION_NOT_REGISTERED (lines manually wrapped):

```
X:\> ""%TAEF%""
  bin\x64\Release\LocalTests_TerminalApp\TerminalApp.LocalTests.dll
  /name:""TerminalAppLocalTests::TabTests::*""

Test Authoring and Execution Framework v10.38k for x64
TAEF: Deploying custom AppXManifest...
  Copying X:\bin\x64\Release\LocalTests_TerminalApp\TerminalApp.LocalTests.AppxManifest.xml
  to X:\bin\x64\Release\LocalTests_TerminalApp\AppXManifest.xml
Warning: TAEF: Using TE.ProcessHost.exe as the Application Executable for UAP tests
  is deprecated, please consider using TE.ProcessHost.UAP.exe in your custom manifest.
Error: TAEF: [HRESULT: 0x80270254] Failed to create the test host process for
  out of process test execution. (The IApplicationActivationManager::
  ActivateApplication call failed while using a default host. TAEF's ETW logs
  which are gathered with the /enableEtwLogging switch should contain
  events from relevant providers that may help to diagnose the failure.)

StartGroup: TerminalAppLocalTests::TabTests::TryInitXamlIslands
EndGroup: TerminalAppLocalTests::TabTests::TryInitXamlIslands [Blocked]

StartGroup: TerminalAppLocalTests::TabTests::TryCreateLocalWinRTType
EndGroup: TerminalAppLocalTests::TabTests::TryCreateLocalWinRTType [Blocked]

StartGroup: TerminalAppLocalTests::TabTests::TryCreateXamlObjects
EndGroup: TerminalAppLocalTests::TabTests::TryCreateXamlObjects [Blocked]

StartGroup: TerminalAppLocalTests::TabTests::TryCreateTab
EndGroup: TerminalAppLocalTests::TabTests::TryCreateTab [Blocked]

Summary of TAEF Warnings:
    Warning: TAEF: Using TE.ProcessHost.exe as the Application Executable for UAP tests
      is deprecated, please consider using TE.ProcessHost.UAP.exe in your custom manifest.

Summary of Errors Outside of Tests:
    Error: TAEF: [HRESULT: 0x80270254] Failed to create the test host process for
      out of process test execution. (The IApplicationActivationManager::
      ActivateApplication call failed while using a default host. TAEF's ETW logs
      which are gathered with the /enableEtwLogging switch should contain
      events from relevant providers that may help to diagnose the failure.)

Summary of Non-passing Tests:
    TerminalAppLocalTests::TabTests::TryInitXamlIslands [Blocked]
    TerminalAppLocalTests::TabTests::TryCreateLocalWinRTType [Blocked]
    TerminalAppLocalTests::TabTests::TryCreateXamlObjects [Blocked]
    TerminalAppLocalTests::TabTests::TryCreateTab [Blocked]

Summary: Total=4, Passed=0, Failed=0, Blocked=4, Not Run=0, Skipped=0
```

Creating the ETW log and parsing it with Windows' built-in `tracerpt.exe` tool yields a number of interesting errors. As best as I can tell from my very limited knowledge, there was a problem with the AppX package extensions (&lt;Extension&gt; elements in AppXManifest.xml).
```
<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
  <System>
    <Provider Name=""CombaseTraceLoggingProvider"" Guid=""{1aff6089-e863-4d36-bdfd-3581f07440be}"" />
    <EventID>0</EventID>
    <Version>0</Version>
    <Level>2</Level>
    <Task>0</Task>
    <Opcode>0</Opcode>
    <Keywords>0x0</Keywords>
    <TimeCreated SystemTime=""2019-08-18T22:19:27.701635500-07:00"" />
    <Execution ProcessID=""8272"" ThreadID=""11028"" ProcessorID=""0"" KernelTime=""315"" UserTime=""405"" />
    <Channel />
    <Computer />
  </System>
  <EventData>
    <!-- Michael: This is 0x80040154 == REGDB_E_CLASSNOTREG
         ""Class not registered"" -->
    <Data Name=""hresult"">-2147221164</Data>
    <Data Name=""code""></Data>
    <Data Name=""message""></Data>
    <Data Name=""function""></Data>
    <Data Name=""fileName"">onecore\com\combase\extensioncatalog\extensioncatalog.cpp</Data>
    <Data Name=""lineNumber"">    1215</Data>
  </EventData>
  <RenderingInfo Culture=""en-US"">
    <Task>ComError</Task>
  </RenderingInfo>
</Event>

[snip snip]

<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
  <System>
    <Provider Name=""ActivationManager"" Guid=""{cf7f94b3-08dc-5257-422f-497d7dc86ab3}"" />
    <EventID>0</EventID>
    <Version>0</Version>
    <Level>2</Level>
    <Task>0</Task>
    <Opcode>0</Opcode>
    <Keywords>0x0</Keywords>
    <TimeCreated SystemTime=""2019-08-18T22:19:27.702335700-07:00"" />
    <Execution ProcessID=""8272"" ThreadID=""11028"" ProcessorID=""2"" KernelTime=""315"" UserTime=""405"" />
    <Channel />
    <Computer />
  </System>
  <EventData>
    <Data Name=""PartA_PrivTags"">16777216</Data>
    <ComplexData Name=""wilActivity"">
      <!-- Michael: This is 0x80270254 == E_APPLICATION_NOT_REGISTERED
           ""This app does not support the contract specified or is not installed."" -->
      <Data Name=""hresult"">2150040148</Data>
      <Data Name=""fileName"">onecoreuap\base\appmodel\execmodel\modern\activationmanager\extensionhelpers.cpp</Data>
      <Data Name=""lineNumber"">     221</Data>
      <Data Name=""module"">activationmanager.dll</Data>
      <Data Name=""failureType"">       1</Data>
      <Data Name=""message""></Data>
      <Data Name=""threadId"">   11028</Data>
      <Data Name=""callContext"">\ForegroundActivation</Data>
      <Data Name=""originatingContextId"">       8</Data>
      <Data Name=""originatingContextName"">ForegroundActivation</Data>
      <Data Name=""originatingContextMessage""></Data>
      <Data Name=""currentContextId"">       8</Data>
      <Data Name=""currentContextName"">ForegroundActivation</Data>
      <Data Name=""currentContextMessage""></Data>
      <Data Name=""failureId"">      32</Data>
      <Data Name=""failureCount"">      32</Data>
      <Data Name=""function""></Data>
    </ComplexData>
  </EventData>
  <RenderingInfo Culture=""en-US"">
    <Task>ActivityError</Task>
  </RenderingInfo>
</Event>
<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
  <System>
    <Provider Name=""ActivationManager"" Guid=""{cf7f94b3-08dc-5257-422f-497d7dc86ab3}"" />
    <EventID>0</EventID>
    <Version>0</Version>
    <Level>5</Level>
    <Task>0</Task>
    <Opcode>0</Opcode>
    <Keywords>0x0</Keywords>
    <TimeCreated SystemTime=""2019-08-18T22:19:27.702384600-07:00"" />
    <Execution ProcessID=""8272"" ThreadID=""11028"" ProcessorID=""2"" KernelTime=""315"" UserTime=""405"" />
    <Channel />
    <Computer />
  </System>
  <EventData>
    <!-- Michael: This is E_APPLICATION_NOT_REGISTERED
         ""This app does not support the contract specified or is not installed."" -->
    <Data Name=""HRESULT"">0x80270254</Data>
    <Data Name=""File"">onecoreuap\base\appmodel\execmodel\modern\activationmanager\extensionhelpers.cpp</Data>
    <Data Name=""Line"">     221</Data>
    <Data Name=""failure-&gt;pszFunction""></Data>
    <Data Name=""failure-&gt;pszMessage""></Data>
    <Data Name=""failure-&gt;pszCode""></Data>
    <Data Name=""GetCurrentThreadId()"">   11028</Data>
    <Data Name=""static_cast&lt;DWORD&gt;(failure-&gt;type)"">       1</Data>
    <Data Name=""failure-&gt;cFailureCount"">32</Data>
  </EventData>
  <RenderingInfo Culture=""en-US"">
    <Task>WIL_Failover</Task>
  </RenderingInfo>
</Event>
```",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Product-Meta;Area-CodeHealth,2019-08-19T06:06:32Z,2019-12-06T20:45:08Z,metathinker,zadjii-msft,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,2507,"Highlighting broken on new tab # Environment

```none
OS: Microsoft Windows [Version 10.0.18362.295]
WT: Version: 0.3.2171.0
```

# Steps to reproduce

1. Open terminal
2. Open a second tab
3. Attempt to select text by clicking and dragging (I'm using a track pad, might be issue around that, don't have mouse available to test difference)

# Expected behavior

Text should be highlighted

# Actual behavior

Nothing


If I select text in the original tab, then try it in the new, second tab, selection starts working.
",carlos-zamora,Resolution-Duplicate;Issue-Bug;Area-User Interface;Product-Terminal,2019-08-21T20:41:55Z,2019-08-26T12:00:14Z,wolf99,DHowett-MSFT;Summon528;zadjii-msft,DHowett-MSFT,DHowett-MSFT;zadjii-msft,DHowett-MSFT,,,
microsoft/terminal,2513,NonClientIslandWindow -- titlebar doubleclick no longer minmaxes Double-click the titlebar as of 0.3.2321; it does not min/max.,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal,2019-08-22T22:08:12Z,2019-10-02T17:25:10Z,DHowett-MSFT,zadjii-msft;Ade-Joshe;DHowett-MSFT;eyalroth,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,carlos-zamora,
microsoft/terminal,2523,"Bug Report - Immediate Crash to Desktop in Windows 10 on ARM # Environment

```none
Windows build number: 10.0.18362
Windows Terminal version (if applicable): Newest direct from Windows Store
```

# Steps to reproduce

- Install via Windows store on to one of the few Windows 10 on ARM devices (in my case the [ASUS NovaGo TP370](https://www.microsoft.com/en-us/p/asus-novago-tp370ql-6g128g-convertible-2-in-1-laptop-with-gigabit-lte-unlocked/8z6d8jn7cgg9?activetab=pivot%3aoverviewtab))
- Attempt to run Terminal

# Expected behavior

Terminal successfully opens/runs or else Store does not allow the install

# Actual behavior

Store allows me to install, attempting to run Terminal results in immediate crash to desktop. No window is ever created as far as I can tell and no error message is returned.",bitcrazed,Issue-Bug;Severity-Crash;Needs-Author-Feedback;Needs-Attention;Product-Terminal;Needs-Tag-Fix;Area-Quality,2019-08-23T20:10:39Z,2019-09-20T23:00:38Z,Chirishman,Chirishman;DHowett-MSFT;jlorich,DHowett-MSFT;bitcrazed,DHowett-MSFT;bitcrazed,,,,
microsoft/terminal,2541,"Do not pad tabs from the top when maximized or fullscreen <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement

Edge and most other programs that use tabs where a menu bar is not present keep the tabs flush to the top of the screen rather than padding it down.  

<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

# Proposed technical implementation details (optional)

Make Terminal consistent with Edge Dev (ideally use the same code if possible) to render the tabs on top.",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2019-08-26T16:13:14Z,2020-05-21T22:26:38Z,trajano,imjasonmiller;WSLUser;vadimkantorov;DHowett-MSFT;sjoshid;DHowett,trajano;zadjii-msft;DHowett-MSFT,zadjii-msft;DHowett-MSFT,,,,
microsoft/terminal,2551,"Bug Report: Misaligned UIA text range bounding rectangles in displays that are not 100%-scale <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment
Not 100%-scale display (high DPI monitor)

```none
Windows build number: Microsoft Windows [Version 10.0.18853.1000]
Windows Terminal version (if applicable): v0.4

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

# Expected behavior
Rectangles should properly surround text inside the text buffer.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
No alignment or sizing - displaying in the top left corner.

<!-- What's actually happening? -->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1,2019-08-26T21:50:03Z,2020-02-11T21:58:20Z,cinnamon-msft,,cinnamon-msft;zadjii-msft,cinnamon-msft,zadjii-msft,,,
microsoft/terminal,2554,"ConPTY swallows SGR 3 and 23, so terminals like Alacritty are prevented from supporting italics Windows 10 version 1903, build 10.0.18362.295. Alacritty master.

Using Alacritty as the terminal (since it supports bold and italic text rendering), italic doesn閳ユ獩 work, because it seems to gets swallowed by ConPTY. https://github.com/jwilm/alacritty/issues/2745 has some discussion.

# Steps to reproduce

Run the following in Bash or similar under Alacritty, with the `enable_experimental_conpty_backend` setting enabled:

```sh
echo -e 'Normal, \x1b[1mbold\x1b[22m, \x1b[3mitalic\x1b[23m, \x1b[1;3mbold italic\x1b[22;23m'
```

(If you don閳ユ獩 have that setting enabled, it閳ユ獟l use WinPTY which also doesn閳ユ獩 pass italics through, but that閳ユ獨 irrelevant here.)

# Expected behavior

Output like this:

> Normal, **bold**, *italic*, ***bold italic***

# Actual behavior

Italics don閳ユ獩 occur:

> Normal, **bold**, italic, **bold italic**

Further, when I insert logging into Alacritty閳ユ獨 `csi_dispatch` method, to observe what SGR codes it閳ユ獨 actually hearing about and applying, I see that the 3 (italic) and 23 (stop italic) have been swallowed, presumably by ConPTY, and Alacritty never saw them.

(ConPTY also modifies the `CSI [ 1 m` bold code to add another SGR code to change to the high-intensity colour. I still haven閳ユ獩 decided how I feel about that!)

I don閳ユ獩 know much about how these things work, so I don閳ユ獩 know if this is normal, but I was caught by surprise that ConPTY was apparently rendering things before they ever got to Alacritty, so that terminals are limited in what they can implement by what ConPTY implements. I expected it to pass everything through untouched, or at least to pass unknown things through rather than swallowing them.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-VT;Issue-Bug;Priority-2,2019-08-27T05:37:31Z,2019-10-04T20:53:55Z,chris-morgan,zadjii-msft;chris-morgan;DHowett-MSFT,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,2591,"Bug Report: Selecting really quickly --> Crash # Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]
Windows Terminal version (if applicable): 0.4

Any other software?
```

# Steps to reproduce

1. make a selection (left-click + drag)
2. right-click to copy
3. repeat 1 and 2 a lot and very quickly

I specifically tried to have the selections be big. Not sure if that matters.

# Expected behavior

copy then erase the selection over and over again

# Actual behavior

```
 	TerminalControl.dll!wil::details::WilDynamicLoadRaiseFailFastException(_EXCEPTION_RECORD * er, _CONTEXT * cr, unsigned long flags) Line 1731	C++
 	TerminalControl.dll!wil::details::WilRaiseFailFastException(_EXCEPTION_RECORD * er, _CONTEXT * cr, unsigned long flags) Line 1671	C++
 	TerminalControl.dll!wil::details::WilFailFast(const wil::FailureInfo & failure) Line 3352	C++
 	TerminalControl.dll!wil::details::ReportFailure(void * callerReturnAddress, unsigned int lineNumber, const char * fileName, const char * functionName, const char * code, void * returnAddress, wil::FailureType type, HRESULT hr, const wchar_t * message, wil::details::ReportFailureOptions options) Line 3373	C++
 	TerminalControl.dll!wil::details::ReportFailure_Hr(void * callerReturnAddress, unsigned int lineNumber, const char * fileName, const char * functionName, const char * code, void * returnAddress, wil::FailureType type, HRESULT hr) Line 3451	C++
 	TerminalControl.dll!wil::details::in1diag5::_FailFast_Hr(void * callerReturnAddress, unsigned int lineNumber, const char * fileName, const char * functionName, const char * code, HRESULT hr) Line 4287	C++
 	TerminalControl.dll!wil::details::in1diag5::FailFast_IfFailed(void * callerReturnAddress, unsigned int lineNumber, const char * fileName, const char * functionName, const char * code, HRESULT hr) Line 4319	C++
 	TerminalControl.dll!Microsoft::Console::Render::DxEngine::Present() Line 836	C++
 	TerminalControl.dll!Microsoft::Console::Render::Renderer::_PaintFrameForEngine(Microsoft::Console::Render::IRenderEngine * const pEngine) Line 130	C++
 	TerminalControl.dll!Microsoft::Console::Render::Renderer::PaintFrame() Line 65	C++
 	TerminalControl.dll!Microsoft::Console::Render::RenderThread::_ThreadProc() Line 165	C++
>	TerminalControl.dll!Microsoft::Console::Render::RenderThread::s_ThreadProc(void * lpParameter) Line 148	C++
```

Also this happens:
![image](https://user-images.githubusercontent.com/11050425/63896197-3310bd80-c9a6-11e9-834e-00033ad23ac2.png)
",DHowett-MSFT,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Area-Quality,2019-08-28T22:12:25Z,2019-09-30T22:52:28Z,carlos-zamora,tobiaskohlbau;DHowett-MSFT,carlos-zamora;bitcrazed,carlos-zamora;zadjii-msft,zadjii-msft;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,
microsoft/terminal,2610,"WSL terminal crashes when using tmux If I open a tmux session and then use the shortcut ""Ctrl+b + %"" to add a new vertical window it displays properly. However if I maximize the terminal and then minimize it again to its original size the terminal will freeze for a second and then close without appearing any error message.

This behaviour only happens with vertical windows, and not with horizontal ones.

I don't know if it's a problem of the WSL terminal or tmux itself. I'm new to developping in Windows, so where can I find the log or any information to let you know what is happening with the terminal?

EDIT: I just find out that it happens with tmux and only when you minimize back to its size a terminal which contains many lines or rows. For example if I go to /usr/bin/ and type ""ls -l"" all the content will show in screen; if I maximize the window then minimize it back to its default size it will crash and close without showing any error. If I do the same operation out of tmux, it displays without any error.
",DHowett-MSFT,Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro;Area-Quality,2019-08-29T22:15:55Z,2019-11-18T21:01:30Z,Luiscri,jasonxoc;drk-mtr;Luiscri;jimf5;DHowett-MSFT,zadjii-msft;DHowett-MSFT;bitcrazed,bitcrazed,,,DHowett-MSFT,
microsoft/terminal,2625,"VS2019.3 wapproj changes broke our precarious packaging situation # Environment

```none
Windows build number: 18362.327
Windows Terminal version (if applicable):Build from VS 2019, 01:12 2019/08/31
```

# Steps to reproduce

- I have selected CascadiaPackage as the Startup Project
- I have set x64 and done Build and Deploy
- When I try to run Windows Terminal, I get a window outline and shadow, and a crash dialog

# Expected behavior

I expect the app to build, deploy, and be able to run

# Actual behavior

![image](https://user-images.githubusercontent.com/7389110/64056651-c86da680-cb8c-11e9-923d-a96a7f808d9e.png)

",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Terminal;Needs-Tag-Fix,2019-08-31T00:15:17Z,2019-09-13T21:34:42Z,mdtauk,DHowett-MSFT;mdtauk;xpwn3rx,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2630,"Bug Report: initialRows (or buffersize) doesn't get updated on windows size changes <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Versi璐竛 10.0.18362.295]
Windows Terminal version: 0.4.2382.0
```

# Steps to reproduce

1. Set the `initialRows` value to something like 30 rows (a value that makes the openned window has less rows than the maximized window should have).
2. Maximize the window.
3. Run some command with a lot of output (like `ps`, `ls`or `dir`).

# Expected behavior

- The buffersize setted with `initialRows` gets updated after window size changes.
- Behavior on PowerShell.
![image](https://user-images.githubusercontent.com/12416901/64070190-a6763180-cc29-11e9-892d-8ffa4d3f9e24.png)

![image](https://user-images.githubusercontent.com/12416901/64070158-146e2900-cc29-11e9-9c70-903fbe72662c.png)

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
- After maximizing the window and running `ps` the buffer size setted with the `initialRows` value doesn't get updated after the window size changes. 

![image](https://user-images.githubusercontent.com/12416901/64070198-d7566680-cc29-11e9-8278-8b4fe5c8b138.png)

![image](https://user-images.githubusercontent.com/12416901/64070205-e3dabf00-cc29-11e9-88f4-45e3500f15b2.png)


- The problem gets solved if I open a new tab and run the command again.
![image](https://user-images.githubusercontent.com/12416901/64070208-f1904480-cc29-11e9-9705-5ebc57e0b609.png)




<!-- What's actually happening? -->
",zadjii-msft,Resolution-Duplicate;Area-Output;Area-Server;Issue-Bug;Product-Terminal;Priority-2,2019-09-01T00:04:44Z,2020-03-17T19:23:47Z,Vreyesm,zadjii-msft;Vreyesm;hwinkler;f9analytics,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,2646,"Crash on launch / creating new tab when using RDP # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.295]
Windows Terminal version (if applicable): 0.4.2382.0_x64

Any other software? 
- Remote Desktop
- Not sure if relevant, but Ubuntu WSL is the default profile

```

# Steps to reproduce

1. Use RDP to access your device
2. Either start the terminal fresh, or close a tab, or try to open a new tab.

# Expected behavior

Terminal should open / tab should open / close.

# Actual behavior

The terminal will not start when using RDP to connect to my laptop. It brings up the outline, then crashes (eventvwr log below). It will also crash if I try to close a tab or open a tab. General use, like switching tabs or generally interacting with the window (resizing, maximising, etc.) works fine. This is reproducible 100% of the time. It never fails to open when I'm physically on the device, but it is intermittent if I can then switch to RDP and continue to use it. Potentially related to #2183?

EDIT: I've done some more fiddling and by going into the graphics settings and by forcing the app to use the ""Power Saving"" (onboard) GPU, it launches and works via RDP as intended.

Faulting application name: WindowsTerminal.exe, version: 1.0.1908.26002, time stamp: 0x5d641823
Faulting module name: ucrtbase.dll, version: 10.0.18362.267, time stamp: 0x080a13f7
Exception code: 0xc0000409
Fault offset: 0x000000000006d33e
Faulting process ID: 0x54d4
Faulting application start time: 0x01d562452690fb35
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_0.4.2382.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\WINDOWS\System32\ucrtbase.dll
Report ID: 7edb0c83-abc5-43dc-b02f-f1bb04084933
Faulting package full name: Microsoft.WindowsTerminal_0.4.2382.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App",cinnamon-msft,Issue-Bug;Severity-Crash;Needs-Attention;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro;Priority-1;Area-Quality,2019-09-03T10:59:34Z,2020-02-28T20:54:12Z,mttradebyte,mttradebyte;DHowett-MSFT,miniksa;zadjii-msft;bitcrazed,bitcrazed,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2687,"Terminal takes long time to appear when launched elevated/as-admin <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): Version: 0.4.2382.0

Any other software?
Office C2R
SSMS 18.2
VSCode

# Steps to reproduce

- Right-Click app from start menu
- Fill in appropriate credentials

# Expected behavior

Expecting a copy of Windows Terminal to load.

# Actual behavior

Nothing after entering credentials.   Looking in task manager, WindowsTerminal.exe does not seem to load.

This was not built, this was the preview through the store.",bitcrazed,Resolution-External;Issue-Bug;Area-User Interface;Needs-Attention;Needs-Tag-Fix;Area-Quality,2019-09-06T13:11:22Z,2019-10-14T20:13:06Z,Kettoch,zadjii-msft;someniatko;Kettoch;bitcrazed,bitcrazed;cinnamon-msft,bitcrazed;zadjii-msft,bitcrazed,,cinnamon-msft,
microsoft/terminal,2701,"UP arrow does not work in R session <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows NT 10.0.18362.0
Windows Terminal version (if applicable): 0.4.2382.0

Any other software?
Powershell 6.2.1 or Powershell 5.1
R 3.6.1
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Open a [R](https://cran.r-project.org/index.html) session then type any expression and evaluate it. Then the up arrow should retrieve older commands in the history.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
The up arrow should retrieve older commands in the history.

# Actual behavior

<!-- What's actually happening? -->
The up arrow does nothing, even if the R history is in an expected state as showed by the `history()` function.

This bug occurs only in ""Windows based"" terminal, such as powershell and cmd, executed by Windows Terminal. This bug does not exist if R is run inside the *old* terminal. This bug does not exist either if R is running inside a ssh session inside powershell.

Windows Terminal -> Powershell -> R -> Bug
Windows Terminal -> CMD-> R -> Bug
Windows Terminal -> WSL Ubuntu 18.04 -> R -> Bug
Old terminal -> Powershell -> R -> No bug
Old terminal -> CMD -> R -> No bug
Windows Terminal -> Powershell -> SSH into a linux host -> R -> No bug

",zadjii-msft,Resolution-Duplicate;Product-Conpty;Issue-Bug;Area-TerminalControl;Priority-2,2019-09-09T12:26:17Z,2019-09-14T16:40:18Z,GaaH,zadjii-msft;bitcrazed;GaaH;DHowett-MSFT,zadjii-msft,bitcrazed;zadjii-msft,zadjii-msft,,,
microsoft/terminal,2707,"Opening a WSL tab really quickly upon sign in does not add Windows Paths to PATH variable <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 18972

Any other software?: WSL installed
```

# Steps to reproduce

- Sign out of Windows
- Sign back in
- Start Terminal really quickly and open up a WSL instance
- The WSL instance does not have Windows file paths connected to it (e.g: typing in `cmd.exe` fails)

<!-- A description of how to trigger this bug. -->

# Expected behavior

- Even if you open up WSL quickly it should add Windows paths correctly. 

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

- Opening WSL quickly from Windows Terminal upon signing in does not add in Windows file paths correctly

<!-- What's actually happening? -->

# Additional notes

We (the WSL team) don't think this is a WSL specific issue since we use environment variables to add the Windows path. If you open up a CMD window and run `wsl` very quickly upon startup you still get the correct Windows paths added. This seems to be an issue with how Windows Terminal treats environment variables.",DHowett-MSFT,Help Wanted;Needs-Repro;Issue-Bug;Area-TerminalConnection;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro,2019-09-09T22:51:34Z,2019-11-04T20:54:29Z,craigloewen-msft,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2711,"Unicode font rendering problem # Environment

```none
Windows build number: Microsoft Windows [閻楀牊婀 10.0.18362.295]
Windows Terminal version (if applicable): 0.4.2382.0
Profile Font: Consolas

Any other software? 
Remote Linux box locale: en_US.UTF-8
```

# Steps to reproduce

(Some of these steps might not be relevant)
1. Open the debian WSL profile
2. SSH to a remote Linux box
3. Start a tmux session
4. Edit a file which contains Chinese character and has lines more than the terminal using neovim
5. Scroll through the lines in neovim

# Expected behavior

The unicode(Chinese) characters' font size should be consistent and should not be duplicated.

![snapshot](https://user-images.githubusercontent.com/3133289/64590078-46c21800-d3d9-11e9-8b13-720a5b72492d.png)

# Actual behavior

When scrolling, by chances the Chinese characters get duplicated and the font get smaller than other normally rendered Chinese characters.

",DHowett-MSFT,Resolution-Duplicate;Area-Output;Area-Fonts;Issue-Bug;Product-Terminal,2019-09-10T06:48:24Z,2019-09-27T00:50:19Z,dotSlashLu,zadjii-msft;DHowett-MSFT,zadjii-msft,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,2713,"Feature Request - filledBox cursor should cover the whole unicode character # Description of the new feature/enhancement
The filledBox cursor should not hide the covered character and it behaves differently for ASCII and wide characters:
- For ASCII, the cursor covers the whole character:
![image](https://user-images.githubusercontent.com/3133289/64631827-81a06c00-d42a-11e9-9810-87f3e1ddd162.png)
- For wide characters, the cursor only covers part of the characters:
![image](https://user-images.githubusercontent.com/3133289/64631848-8e24c480-d42a-11e9-8fe3-383efa313ffb.png)

Other terminal applications typically handle this well, take XShell for an example:
![image](https://user-images.githubusercontent.com/3133289/64632081-0095a480-d42b-11e9-873c-922d03df257c.png)
![image](https://user-images.githubusercontent.com/3133289/64632093-05f2ef00-d42b-11e9-82e1-3f0b9d780751.png)
And the cursor automatically invert the covered character's color to show it properly without hiding it behind.
",leonMSFT;skyline75489,Resolution-Fix-Committed;Area-Rendering;Area-Fonts;Issue-Bug;Product-Terminal;Priority-2,2019-09-10T16:34:14Z,2020-04-15T19:23:07Z,dotSlashLu,mdtauk;DHowett-MSFT;zadjii-msft;miniksa,dotSlashLu;zadjii-msft;DHowett-MSFT,zadjii-msft;DHowett-MSFT,,,zadjii-msft,
microsoft/terminal,2721,"On first launch, if Powershell Core is installed, set it as the default profile Follow up to #2603

Prior to that PR, when we first launched, we'd set powershell core to the default profile if it was installed, instead of Powershell. 

With the switch to dynamic profiles, we stopped doing that. Windows Powershell is now always the default. 

We should restore that behavior. The check should be simple. Modifying the user's `defaultProfile` in place might be a bit trickier. Adding tests also takes time, and we want to get #2515 out the door sooner than later.",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Priority-2,2019-09-10T23:36:53Z,2020-04-07T18:35:06Z,zadjii-msft,,zadjii-msft;cinnamon-msft,DHowett-MSFT,zadjii-msft,zadjii-msft,DHowett-MSFT,
microsoft/terminal,2724,"Crash when displaying emoji Starting after I updated to the latest `master` today, I'm getting a crash when displaying at least some emoji.  Commit bac69f7 is the most recent one I was able to find that definitely works.  I tried bisecting to narrow it down further but ran into a bunch of build issues and gave up.

Running in a debugger I get this exception:
```none
Unhandled exception at 0x00007FFF994F4B29 in WindowsTerminal.exe: Microsoft C++ exception: wil::ResultException at memory location 0x0000006A998FDE10.
```
The particular result being complained about is this: `E_INVALIDARG One or more arguments are invalid.`.
The call stack seems to point to this line as being the problem: https://github.com/microsoft/terminal/blob/12d2e170dd0ff0e23c956a754a308c4ce3f0c1f8/src/renderer/base/renderer.cpp#L639  (Technically it points to the next line, but I think that's just the debugger being funny).

This is 100% reproducible for me on both of the systems I've tried it on. I'm happy to help dig up more info if needed.

# Environment
```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]
10.0.18965.0 
I happen to be filing this from a system with a fairly recent Insider build, but this also happens on the latest non-Insider build.

Windows Terminal version (if applicable):
Latest from master

Any other software?
Powershell 6.2.2 (not sure if this matters)
```

# Steps to reproduce
In Powershell:
```
PS> echo ""$([char]0x2714)""
```

# Expected behavior
Should print a 閴佹棑绗

# Actual behavior
The terminal crashes.",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Needs-Tag-Fix,2019-09-11T01:52:53Z,2019-09-17T17:25:23Z,zb140,jbolton-corvalgroup;zb140;j4james,DHowett-MSFT,DHowett-MSFT,miniksa,,DHowett-MSFT,
microsoft/terminal,2735,"Terminal takes a trip upstate when DWM crashes <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows NT 10.0.18362.0
Windows Terminal version (if applicable): Windows Terminal (Preview), Version: 0.4.2382.0


Any other software? No
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Open Windows Terminal.
2. Let the computer go into screen-locked status.
3. Unlocked the computer.
4. Notice Windows Terminal has been closed.
5. Proceed to Event Viewer -> Application Log and look for event 1000's showing Desktop Windows Manager and Windows Terminal applications both crashing/faulting.

> **Source: Application Error / ID: 1000**
> Faulting application name: WindowsTerminal.exe, version: 1.0.1908.26002, time stamp: 0x5d641823
> Faulting module name: ucrtbase.dll, version: 10.0.18362.267, time stamp: 0x080a13f7
> Exception code: 0xc0000409
> Fault offset: 0x000000000006d33e
> Faulting process id: 0x30050
> Faulting application start time: 0x01d5695cb9dc2e1e
> Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_0.4.2382.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
> Faulting module path: C:\WINDOWS\System32\ucrtbase.dll
> Report Id: e93be2a0-375b-409c-a1e8-8df49489c81e
> Faulting package full name: Microsoft.WindowsTerminal_0.4.2382.0_x64__8wekyb3d8bbwe
> Faulting package-relative application ID: App

> **Source: Application Error / ID: 1000**
> Faulting application name: dwm.exe, version: 10.0.18362.267, time stamp: 0x6468b8f9
> Faulting module name: ntdll.dll, version: 10.0.18362.267, time stamp: 0xc00f8a30
> Exception code: 0xc000000d
> Fault offset: 0x000000000010f220
> Faulting process id: 0x2cec0
> Faulting application start time: 0x01d5696eb2d23787
> Faulting application path: C:\WINDOWS\System32\dwm.exe
> Faulting module path: C:\WINDOWS\SYSTEM32\ntdll.dll
> Report Id: cd25779a-d818-438f-b423-2ddebb809148
> Faulting package full name: 
> Faulting package-relative application ID: 

> **Source: Dwminit / ID: 0**
> The Desktop Window Manager process has exited. (Process exit code: 0x000000ff, Restart count: 2, Primary display device ID: AMD Radeon(TM) Vega 8 Graphics)

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Windows Terminal should stay open until it is closed like any other program.

# Actual behavior

<!-- What's actually happening? -->
Windows Terminal closes/crashes/faults unexpectedly.",DHowett-MSFT;zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-09-12T14:56:34Z,2019-11-06T18:56:55Z,JeremyTBradshaw,edjacob25;DHowett-MSFT;aarongreenwald;zadjii-msft;JeremyTBradshaw,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,miniksa,
microsoft/terminal,2741,"Every copyOnSelect action crashes the Terminal now # Environment

```none
Windows build number: Win32NT     10.0.18362.0     Microsoft Windows NT 10.0.18362.0

Windows Terminal version (if applicable): 0.4.2382.0  (installed via Microsoft Store, profiles.json attached)

[profiles.txt](https://github.com/microsoft/terminal/files/3607091/profiles.txt)


```

# Steps to reproduce

With the latest version of Windows Terminal, using the attached `profiles.json` file with `copyOnSelect = True`, every time I copy text the Terminal will hang for 1-2 seconds and then crash. After the most recent update to 0.4.2382.0, I enabled `copyOnSelect` and only saw this crash maybe once a day. Since yesterday (9/11), it happens every time I copy text. No settings changes happened, but I do heavily use the Terminal every day with lots of copy/pasting, so as of yesterday my workflow is severely interrupted

# Expected behavior

copyOnSelect adds the selected text to clipboard, and Terminal continues to operate as intended

# Actual behavior

As soon as the selection period is over, the Terminal hangs for 1-2 seconds with a spinning cursor, then crashes. No text is copied to the clipboard

**Also, here is the Feedback Hub posting:** https://aka.ms/AA627yk
",carlos-zamora,Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-09-12T19:12:08Z,2019-09-16T17:55:15Z,JDQuackers,zadjii-msft;JDQuackers;carlos-zamora;spatiebot;mcpiroman,zadjii-msft,cinnamon-msft,cinnamon-msft,,carlos-zamora,
microsoft/terminal,2746,"Alt-Backspace followed by Enter does not behave properly Pressing Alt+Backspace, then some other characters, followed by Enter will not trigger the right inputs for a shell through WSL. This issue is pretty subtle and it can be tricky to observe in my experience, so I have 2 test cases below to demonstrate this issue.

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): 0.4.2382.0 (latest available on the Windows Store)

Any other software? Ubuntu 18.04.3 LTS in WSL 1; Linux Mint with GNOME Terminal 3.28.1
```

# Test case 1

## Steps to reproduce

1. Open a Bash terminal
2. Type `echo foo` (don't press Enter)
3. Press Alt+Backspace to delete the word (the command should now read `echo`)
4. Type `bar` (the command should now read `echo bar`)
5. Press Enter

## Expected behavior

`bar` should be printed. This is the behavior when using WSL via vanilla Command Prompt, or using GNOME Terminal on a standalone Linux distro.

## Actual behavior

Nothing happens. Pressing Alt+Backspace then pressing Enter inputs an escape sequence that would be expected from Alt+Enter, which Bash silently ignores by default.

To see this more visibly, run `bind -x '""\e\r"":""echo whoops""'` then repeat the above steps. Now, `whoops` will be printed, since the above steps will input the escape sequence for Alt+Enter (`\e\r`).

# Test case 2

## Steps to reproduce

1. Open a Bash terminal
2. Run `cat > sample.txt`
3. Type `foo` followed by Alt+Backspace followed by `bar` followed by Enter
4. Press Ctrl+D to return to the prompt
5. Run `hexdump -C sample.txt`

## Expected behavior

`hexdump` should print the following output:

```
00000000  66 6f 6f 62 61 72 0a                              |foobar.|
00000007
```

This is the behavior when using WSL via vanilla Command Prompt, or using GNOME Terminal on a standalone Linux distro.

## Actual behavior

`hexdump` prints the following output:

```
00000000  66 6f 6f 62 61 72 1b 0a                           |foobar..|
00000008
```

Just like before, we can see the sequence for Alt+Enter (`\e\r`, or `1b 0a` in hex) is actually registered where we expected to see just `\r` (`0a` in hex).",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-2,2019-09-13T09:59:45Z,2019-10-04T15:47:40Z,kylewlacy,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,2770,"ConPTY mangles U+1F600 to U+FFFD # Environment

Windows build number: 10.0.18362.356  
Windows Terminal version: 0.4.2382.0

Also reproducible with Alacritty on https://github.com/jwilm/alacritty/pull/2438 with its ConPTY backend (`enable_experimental_conpty_backend: true`), and *not* with its WinPTY backend.

# Steps to reproduce

Type U+1F600. (Ways of achieving this are discussed below.)

# Expected behavior

U+1F600, `棣冩綻, should be the input.

# Actual behavior

U+FFFD, REPLACEMENT CHARACTER, gets sent through instead.

This doesn閳ユ獩 affect most characters. This is the only such character that I regularly use that is affected. U+1F600 and U+1F700 are two examples of affected characters, while U+1F5FF and U+1F601 are examples of characters that are not affected.

----

# How to reproduce if you閳ユ獧e not sure

If you don閳ユ獩 have an IME that lets you insert such characters, you can install [WinCompose](https://github.com/samhocevar/wincompose) and type <kbd>Compose</kbd><kbd>1</kbd><kbd>f</kbd><kbd>6</kbd><kbd>0</kbd><kbd>0</kbd><kbd>Enter</kbd>, or put a line like this into %USERPROFIEL%\\.XCompose:

```
<Multi_key> <colon> <D> : ""棣冩"" U1F600
```

閳 which will allow you to use <kbd>Compose</kbd><kbd>:</kbd><kbd>D</kbd>.

To inspect what閳ユ獨 been sent, I like to use Vim with its `ga` command.",miniksa,Product-WSL;Product-Conpty;Area-Input;Issue-Bug;Needs-Tag-Fix,2019-09-16T13:54:49Z,2019-10-17T23:09:45Z,chris-morgan,DHowett-MSFT;chris-morgan;miniksa;benhillis,DHowett-MSFT;miniksa,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2782,"Autoinsertion of profiles causes exponential explosion when you add a {name:}-only profile ![image](https://user-images.githubusercontent.com/14316954/64999312-2d6b1100-d89c-11e9-9fae-ffe02deeb62d.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2019-09-16T23:08:37Z,2019-09-17T17:20:52Z,DHowett-MSFT,,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,2794,"hiding all profiles makes terminal very upset It does this,

![image](https://user-images.githubusercontent.com/14316954/65074148-10d8e280-d949-11e9-95e7-750df4f782b7.png)

and then this,

![image](https://user-images.githubusercontent.com/14316954/65074157-16362d00-d949-11e9-9819-d3b7df5971aa.png)

and then this:

![image](https://user-images.githubusercontent.com/14316954/65074166-1c2c0e00-d949-11e9-8074-f5db6feb4f23.png)",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Severity-Crash;Product-Terminal,2019-09-17T19:46:23Z,2019-09-19T16:54:37Z,DHowett-MSFT,zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,2805,"JSON patching is hard `git push github HEAD:refs/heads/dev/migrie/b/json-patching-is-hard` thanks @DHowett-MSFT for putting this out there


> user settings is ""{}"" -- AppendDynamic transforms that into , { guid, name commandline }, {guid, name, ...}{}

> user settings is {""profiles"":[]} gets transformed into something lovecraftian too

Let's add some tests for these, and fix them. ",DHowett,Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Priority-2,2019-09-18T19:59:13Z,2021-12-09T17:04:06Z,zadjii-msft,DHowett-MSFT;zadjii-msft,zadjii-msft;cinnamon-msft,zadjii-msft,zadjii-msft;cinnamon-msft;DHowett,cinnamon-msft;DHowett,zadjii-msft,
microsoft/terminal,2807,"Copy pasting from WSL to clipboard crashes the terminal and breaks copypaste system wide with very severe side effects # Environment

Windows version: 10.0.18362.0
Terminal version: 0.4.2382.0

ESET Endpoint Security Antivirus 7.1.2053.0
Razer Blade 2019 15"" laptop with default drivers.

# Steps to reproduce

Use WSL on the terminal and copy paste text back and forth from the terminal to other parts of the system. At some point the terminal will crash on copy. 

# Expected behavior

The string would be on the clipboard and windows would continue functioning properly. 

# Actual behavior

After the crash I'm fully unable to use Windows clipboard functionalities. Some places like explorer show both copy&paste disabled until restart but also clipboard actions from other software like vim are broken. At the same time radio boxes in Windows UI elements like installers stop working (wtf?)  and some of the start menu shortcuts like windows+x also stop functioning until I restart the computer. 

This seems rare, but I already reinstalled the system that I'm experiencing this on once, as I thought that some of the system files must be corrupt, but now I'm getting the same problem again. In both cases the first sign of trouble was the copy paste functionality of the terminal and everything else is fully working, so I think it might actually be related even though this seems very obscure. ",carlos-zamora,Resolution-Fix-Committed;Area-Interaction;Issue-Bug;Severity-Crash;Needs-Triage;Needs-Attention;Product-Terminal;Area-Quality,2019-09-19T08:36:16Z,2019-09-30T22:52:28Z,Razumihin,zadjii-msft;carlos-zamora;Razumihin;DHowett-MSFT,carlos-zamora;DHowett-MSFT,carlos-zamora;DHowett-MSFT,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,2815,"Bug Report: if historySize >= 32728 a maximize doesn't redraw the terminal # Environment

```none
Windows build number: 10.0.18980.1
Windows Terminal version (if applicable): 0.4.2382.0

Any other software?
```

# Steps to reproduce

1. Set historySize of a profile to 32728 or bigger.
2. Open a tab for that profile.
3. Run commands so that there is a bunch of scroll space (running `nano` on Ubuntu is easier).
4. Maximize the window.

# Expected behavior

The terminal should redraw itself to occupy all the available space.

# Actual behavior

The terminal keeps using the previously available space, not occupying the extra one. Some screenshots:

1. After maximizing on Ubuntu:
![maximized on ubuntu](https://user-images.githubusercontent.com/1441704/65267363-21d64f00-db15-11e9-9c03-63e1cc62c8df.png)

2. After maximizing on cmd:
![maximized on cmd](https://user-images.githubusercontent.com/1441704/65267505-6a8e0800-db15-11e9-8ba3-178a7aaa1813.png)
_(Note the last `dir` output kept going but it was cut midway)_

# Other relevant information

A manual resize of the window does correctly trigger a redraw on Ubuntu. Not on cmd, which just keeps using the window space it had when the tab was opened.
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2019-09-19T17:48:19Z,2020-03-18T22:22:27Z,mcornella,DHowett-MSFT;j4james;zadjii-msft,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,2861,"Crash to desktop when running an invalid Export Certificate Powershell command  <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

Platform ServicePack Version      VersionString
-------- ----------- -------      -------------
 Win32NT             10.0.18362.0 Microsoft Windows NT 10.0.18362.0

Windows Terminal 
0.4.2382.0

Powershell version
$PSVersionTable.PSVersion                                                                                                                                                                                                   Major  Minor  Build  Revision
-----  -----  -----  --------
5      1      18362  145

Any other software?
no

# Steps to reproduce
1. Type a poorly formed Export-Certificate powershell command such as 
Export-Certificate -Type CERT -FilePath ""cert:\LocalMachine\my\blah"" -Force
2.  Don't supply any details and hit enter when prompted for 
   ""Supply values for the following Parameters  CERT:
3.  Get a great long exception stack trace that you can't read before windows closes as it crashes to desktop ending the WindowsTerminal process.

# Expected behavior
Get a stack trace, and the terminal doesn't actually close and crash back to desktop.

# Actual behavior
Closes window and Crashes back to desktop after printing out stack trace.
",miniksa,Product-Powershell;Needs-Repro;Resolution-External;Issue-Bug;Severity-Crash;Needs-Tag-Fix;Priority-1,2019-09-24T06:16:26Z,2020-02-28T20:50:42Z,Choke101,zadjii-msft;Choke101;DHowett-MSFT;miniksa,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2865,"Bug Report: Control+Space not sent to terminal emulator. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Version 10.0.18362.356
Windows Terminal version 0.4.2382.0

Any other software? yes, **mine** (also a terminal emulator)
```

# Steps to reproduce

Best way to see this (if you don't have key tracing on in our own terminal app),
fire up a [TMUX](https://github.com/tmux/tmux) session, have it configured with at least one more line, like this:
```
bind ^space next-window
```
which basically states, that Ctrl+Space will cause the terminal to switch to the next window.

Except, that on Windows Terminal (or my terminal emulator, using ConPTY), it doesn't. :-)

<!-- A description of how to trigger this bug. -->

# Expected behavior

TMUX windows switching (i.e.: NUL-byte sent to PTY slave)

# Actual behavior

Action Ignored.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Input;Area-VT;Issue-Bug;Needs-Author-Feedback,2019-09-24T16:03:52Z,2020-05-24T07:00:14Z,christianparpart,zadjii-msft;christianparpart;tompazourek;DHowett;kellytrinh;hjmus;cwfparsonson;latipun7;heeh;impguard;lzybkr,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,287,"Scrollbar blocks console 10 Pro Insider Preview 1809 Build 18252.1000, though I think this is also an issue for the previous version.

The scrollbar is blocking about 1.5 char on the right side when the window is maximized or docked at left/right half of the screen. The scrollbar is not blocking anything under any other window size.

Window maximized
![image](https://user-images.githubusercontent.com/10731263/46925641-e5dc6500-cffa-11e8-8c92-a1b5c7e5ea85.png)

Normal
![image](https://user-images.githubusercontent.com/10731263/46925654-01477000-cffb-11e8-8740-47d55eea8e7b.png)

",miniksa,Product-Conhost;Needs-Repro;Area-Interaction;Issue-Bug;Needs-Tag-Fix;Resolution-No-Repro,2018-10-15T01:56:37Z,2021-10-04T14:06:10Z,bn-d,zadjii-msft;miniksa;bn-d;moritzfalke,zadjii-msft;miniksa,miniksa;zadjii-msft,miniksa,,zadjii-msft,
microsoft/terminal,2881,"Crash when right click copying text Windows Terminal Preview crashes when using right click to copy multiple lines of text in PowerShell 7.0.0-preview.4.

[Feedback Hub link with crash](https://aka.ms/AA6486q)

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): 0.5.2661.0

Any other software?

PowerShell 7.0.0-preview4

```

# Steps to reproduce

1. Open PowerShell Core 7 Preview-4 in Windows Terminal
1. Left click select multiple lines, and then right click.

# Expected behavior

Right click should copy text.

# Actual behavior

Crash. Occurs 100% of the time following these steps. I've tried it 6 times and got the crash all 6  times.

I believe this is a regression as this did not occur in the previous version of Windows Terminal Preview.
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-09-24T19:53:55Z,2019-09-30T22:52:28Z,drichardson,DHowett-MSFT;ZedG2;drichardson,zadjii-msft;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2883,"colorScheme.background is ignored # Steps to reproduce

1. Set your profiles.json file as indicated at the bottom.
2. Open up a tab with the Windows PowerShell profile.

# Expected behavior

The background color should be Dracula's black (`#282A36`).

# Actual behavior

The background color for the Windows PowerShell profile is still the default PowerShell dark blue, even though Dracula is the active color scheme.

# Workaround

My current workaround is to additionally specify the background in the profile itself. It seems to me like this is an issue of precedence--the background in the colorscheme should override any global defaults for a given shell.

profiles.json:

<details>

```
{
    ""$schema"": ""https://aka.ms/terminal-profiles-schema"",
    ""globals"" : 
    {
        ""alwaysShowTabs"" : true,
        ""defaultProfile"" : ""{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"",
        ""initialCols"" : 120,
        ""initialRows"" : 30,
        ""keybindings"" : 
        [
            {
                ""command"" : ""closePane"",
                ""keys"" : 
                [
                    ""ctrl+w""
                ]
            },
            {
                ""command"" : ""duplicateTab"",
                ""keys"" : 
                [
                    ""ctrl+shift+t""
                ]
            },
            {
                ""command"" : ""newTab"",
                ""keys"" : 
                [
                    ""ctrl+t""
                ]
            },
            {
                ""command"" : ""newTabProfile0"",
                ""keys"" : 
                [
                    ""ctrl+shift+1""
                ]
            },
            {
                ""command"" : ""newTabProfile1"",
                ""keys"" : 
                [
                    ""ctrl+shift+2""
                ]
            },
            {
                ""command"" : ""newTabProfile2"",
                ""keys"" : 
                [
                    ""ctrl+shift+3""
                ]
            },
            {
                ""command"" : ""newTabProfile3"",
                ""keys"" : 
                [
                    ""ctrl+shift+4""
                ]
            },
            {
                ""command"" : ""newTabProfile4"",
                ""keys"" : 
                [
                    ""ctrl+shift+5""
                ]
            },
            {
                ""command"" : ""newTabProfile5"",
                ""keys"" : 
                [
                    ""ctrl+shift+6""
                ]
            },
            {
                ""command"" : ""newTabProfile6"",
                ""keys"" : 
                [
                    ""ctrl+shift+7""
                ]
            },
            {
                ""command"" : ""newTabProfile7"",
                ""keys"" : 
                [
                    ""ctrl+shift+8""
                ]
            },
            {
                ""command"" : ""newTabProfile8"",
                ""keys"" : 
                [
                    ""ctrl+shift+9""
                ]
            },
            {
                ""command"" : ""nextTab"",
                ""keys"" : 
                [
                    ""ctrl+tab""
                ]
            },
            {
                ""command"" : ""openSettings"",
                ""keys"" : 
                [
                    ""ctrl+,""
                ]
            },
            {
                ""command"" : ""prevTab"",
                ""keys"" : 
                [
                    ""ctrl+shift+tab""
                ]
            },
            {
                ""command"" : ""scrollDown"",
                ""keys"" : 
                [
                    ""ctrl+shift+down""
                ]
            },
            {
                ""command"" : ""scrollDownPage"",
                ""keys"" : 
                [
                    ""ctrl+shift+pgdn""
                ]
            },
            {
                ""command"" : ""scrollUp"",
                ""keys"" : 
                [
                    ""ctrl+shift+up""
                ]
            },
            {
                ""command"" : ""scrollUpPage"",
                ""keys"" : 
                [
                    ""ctrl+shift+pgup""
                ]
            },
            {
                ""command"" : ""splitHorizontal"",
                ""keys"" : 
                [
                    ""ctrl+shift+h""
                ]
            },
            {
                ""command"" : ""splitVertical"",
                ""keys"" : 
                [
                    ""ctrl+shift+d""
                ]
            },
            {
                ""command"" : ""switchToTab0"",
                ""keys"" : 
                [
                    ""alt+1""
                ]
            },
            {
                ""command"" : ""switchToTab1"",
                ""keys"" : 
                [
                    ""alt+2""
                ]
            },
            {
                ""command"" : ""switchToTab2"",
                ""keys"" : 
                [
                    ""alt+3""
                ]
            },
            {
                ""command"" : ""switchToTab3"",
                ""keys"" : 
                [
                    ""alt+4""
                ]
            },
            {
                ""command"" : ""switchToTab4"",
                ""keys"" : 
                [
                    ""alt+5""
                ]
            },
            {
                ""command"" : ""switchToTab5"",
                ""keys"" : 
                [
                    ""alt+6""
                ]
            },
            {
                ""command"" : ""switchToTab6"",
                ""keys"" : 
                [
                    ""alt+7""
                ]
            },
            {
                ""command"" : ""switchToTab7"",
                ""keys"" : 
                [
                    ""alt+8""
                ]
            },
            {
                ""command"" : ""switchToTab8"",
                ""keys"" : 
                [
                    ""alt+9""
                ]
            }
        ],
        ""requestedTheme"" : ""dark"",
        ""showTabsInTitlebar"" : true,
        ""showTerminalTitleInTitlebar"" : true,
        ""wordDelimiters"" : "" ./\\()\""'-:,.;<>~!@#$%^&*|+=[]{}~?\u2502""
    },
    ""profiles"" : 
    [
        {
            ""acrylicOpacity"" : 0.5,
            ""closeOnExit"" : true,
            ""colorScheme"" : ""Dracula"",
            ""commandline"" : ""powershell.exe"",
            ""cursorColor"" : ""#FFFFFF"",
            ""cursorShape"" : ""bar"",
            ""fontFace"" : ""Consolas"",
            ""fontSize"" : 10,
            ""guid"" : ""{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"",
            ""historySize"" : 9001,
            ""icon"" : ""ms-appx:///ProfileIcons/{61c54bbd-c2c6-5271-96e7-009a87ff44bf}.png"",
            ""name"" : ""Windows PowerShell"",
            ""padding"" : ""0, 0, 0, 0"",
            ""snapOnInput"" : true,
            ""startingDirectory"" : ""%USERPROFILE%"",
            ""useAcrylic"" : false
        },
        {
            ""acrylicOpacity"" : 0.75,
            ""closeOnExit"" : true,
            ""colorScheme"" : ""Campbell"",
            ""commandline"" : ""cmd.exe"",
            ""cursorColor"" : ""#FFFFFF"",
            ""cursorShape"" : ""bar"",
            ""fontFace"" : ""Consolas"",
            ""fontSize"" : 10,
            ""guid"" : ""{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"",
            ""historySize"" : 9001,
            ""icon"" : ""ms-appx:///ProfileIcons/{0caa0dad-35be-5f56-a8ff-afceeeaa6101}.png"",
            ""name"" : ""cmd"",
            ""padding"" : ""0, 0, 0, 0"",
            ""snapOnInput"" : true,
            ""startingDirectory"" : ""%USERPROFILE%"",
            ""useAcrylic"" : true
        },
        {
            ""guid"": ""{b453ae62-4e3d-5e58-b989-0a998ec441b8}"",
            ""hidden"": false,
            ""name"": ""Azure Cloud Shell"",
            ""source"": ""Windows.Terminal.Azure""
        }
    ],
    ""schemes"" : 
    [
        {
            ""background"" : ""#0C0C0C"",
            ""black"" : ""#0C0C0C"",
            ""blue"" : ""#0037DA"",
            ""brightBlack"" : ""#767676"",
            ""brightBlue"" : ""#3B78FF"",
            ""brightCyan"" : ""#61D6D6"",
            ""brightGreen"" : ""#16C60C"",
            ""brightPurple"" : ""#B4009E"",
            ""brightRed"" : ""#E74856"",
            ""brightWhite"" : ""#F2F2F2"",
            ""brightYellow"" : ""#F9F1A5"",
            ""cyan"" : ""#3A96DD"",
            ""foreground"" : ""#F2F2F2"",
            ""green"" : ""#13A10E"",
            ""name"" : ""Campbell"",
            ""purple"" : ""#881798"",
            ""red"" : ""#C50F1F"",
            ""white"" : ""#CCCCCC"",
            ""yellow"" : ""#C19C00""
        },
        {
            ""background"" : ""#282C34"",
            ""black"" : ""#282C34"",
            ""blue"" : ""#61AFEF"",
            ""brightBlack"" : ""#5A6374"",
            ""brightBlue"" : ""#61AFEF"",
            ""brightCyan"" : ""#56B6C2"",
            ""brightGreen"" : ""#98C379"",
            ""brightPurple"" : ""#C678DD"",
            ""brightRed"" : ""#E06C75"",
            ""brightWhite"" : ""#DCDFE4"",
            ""brightYellow"" : ""#E5C07B"",
            ""cyan"" : ""#56B6C2"",
            ""foreground"" : ""#DCDFE4"",
            ""green"" : ""#98C379"",
            ""name"" : ""One Half Dark"",
            ""purple"" : ""#C678DD"",
            ""red"" : ""#E06C75"",
            ""white"" : ""#DCDFE4"",
            ""yellow"" : ""#E5C07B""
        },
        {
            ""background"" : ""#FAFAFA"",
            ""black"" : ""#383A42"",
            ""blue"" : ""#0184BC"",
            ""brightBlack"" : ""#4F525D"",
            ""brightBlue"" : ""#61AFEF"",
            ""brightCyan"" : ""#56B5C1"",
            ""brightGreen"" : ""#98C379"",
            ""brightPurple"" : ""#C577DD"",
            ""brightRed"" : ""#DF6C75"",
            ""brightWhite"" : ""#FFFFFF"",
            ""brightYellow"" : ""#E4C07A"",
            ""cyan"" : ""#0997B3"",
            ""foreground"" : ""#383A42"",
            ""green"" : ""#50A14F"",
            ""name"" : ""One Half Light"",
            ""purple"" : ""#A626A4"",
            ""red"" : ""#E45649"",
            ""white"" : ""#FAFAFA"",
            ""yellow"" : ""#C18301""
        },
        {
            ""background"" : ""#073642"",
            ""black"" : ""#073642"",
            ""blue"" : ""#268BD2"",
            ""brightBlack"" : ""#002B36"",
            ""brightBlue"" : ""#839496"",
            ""brightCyan"" : ""#93A1A1"",
            ""brightGreen"" : ""#586E75"",
            ""brightPurple"" : ""#6C71C4"",
            ""brightRed"" : ""#CB4B16"",
            ""brightWhite"" : ""#FDF6E3"",
            ""brightYellow"" : ""#657B83"",
            ""cyan"" : ""#2AA198"",
            ""foreground"" : ""#FDF6E3"",
            ""green"" : ""#859900"",
            ""name"" : ""Solarized Dark"",
            ""purple"" : ""#D33682"",
            ""red"" : ""#D30102"",
            ""white"" : ""#EEE8D5"",
            ""yellow"" : ""#B58900""
        },
        {
            ""background"" : ""#FDF6E3"",
            ""black"" : ""#073642"",
            ""blue"" : ""#268BD2"",
            ""brightBlack"" : ""#002B36"",
            ""brightBlue"" : ""#839496"",
            ""brightCyan"" : ""#93A1A1"",
            ""brightGreen"" : ""#586E75"",
            ""brightPurple"" : ""#6C71C4"",
            ""brightRed"" : ""#CB4B16"",
            ""brightWhite"" : ""#FDF6E3"",
            ""brightYellow"" : ""#657B83"",
            ""cyan"" : ""#2AA198"",
            ""foreground"" : ""#073642"",
            ""green"" : ""#859900"",
            ""name"" : ""Solarized Light"",
            ""purple"" : ""#D33682"",
            ""red"" : ""#D30102"",
            ""white"" : ""#EEE8D5"",
            ""yellow"" : ""#B58900""
        },
        {
            ""background"" : ""#282A36"",
            ""black"" : ""#21222C"",
            ""blue"" : ""#BD93F9"",
            ""brightBlack"" : ""#6272A4"",
            ""brightBlue"" : ""#D6ACFF"",
            ""brightCyan"" : ""#A4FFFF"",
            ""brightGreen"" : ""#69FF94"",
            ""brightPurple"" : ""#FF92DF"",
            ""brightRed"" : ""#FF6E6E"",
            ""brightWhite"" : ""#FFFFFF"",
            ""brightYellow"" : ""#FFFFA5"",
            ""cyan"" : ""#8BE9FD"",
            ""foreground"" : ""#F8F8F2"",
            ""green"" : ""#50FA7B"",
            ""name"" : ""Dracula"",
            ""purple"" : ""#FF79C6"",
            ""red"" : ""#FF5555"",
            ""white"" : ""#F8F8F2"",
            ""yellow"" : ""#F1FA8C""
        }
    ]
}
```

</details>",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2019-09-25T00:04:32Z,2019-09-28T01:20:04Z,mglezer,DHowett-MSFT;mglezer;OdinTech3;0x14Rp;GeneralistDev;zadjii-msft;TCB13,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2890,"Preview 0.5 asset fails to install (hangs on 'Installing required frameworks 16%') # Environment

```
Windows build number: Microsoft Windows [Version 10.0.18362.295]
Windows Terminal version (if applicable): 0.5.2661.0
Any other software? N/A
```

# Steps to reproduce

In https://github.com/microsoft/terminal/issues/2647 I reported that the Github preview asset 0.4 hung when installing behind a company proxy server.  This was fixed by manually installing dependency package: VCLibs.140.

Now, on installing Terminal Preview 0.5, using the GitHub release asset, the same problem happens. There is no indication of the missing dependency. This is on the same machine so I assume VCLibs.140 is still present.

![image](https://user-images.githubusercontent.com/7724321/65578765-5e1f0a80-df6e-11e9-9e48-d0911162f752.png)
",bitcrazed,Resolution-External;Issue-Bug;Area-Build;Product-Terminal,2019-09-25T07:27:56Z,2019-11-15T09:14:08Z,DavidA2014,zadjii-msft;DavidA2014;bitcrazed,bitcrazed,zadjii-msft,zadjii-msft,,DavidA2014,
microsoft/terminal,2907,"Crash if Narrator open # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18991.1000]
Windows Terminal version (if applicable): 0.5

Any other software?
```

# Steps to reproduce

1. Ensure Windows Terminal isn't open
2. Open Narrator (if it isn't open already)
3. Open Windows Terminal

# Expected behavior

Windows Terminal opens

# Actual behavior

Crash :(
",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Product-Terminal;Priority-0,2019-09-25T23:41:38Z,2020-02-10T20:16:09Z,carlos-zamora,carlos-zamora;DHowett-MSFT,carlos-zamora;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,carlos-zamora,,,
microsoft/terminal,2922,Terminal takes an unexpected dirt nap when backgroundImage contains environment variables I literally can't believe we're not expanding environment variables.,bitcrazed,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-09-26T22:13:32Z,2019-11-16T00:58:25Z,DHowett-MSFT,nzain;zadjii-msft,DHowett-MSFT,DHowett-MSFT;bitcrazed,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2929,"CUU and CUD should not move ""across"" margins # Environment

Windows build number: Version 10.0.18362.295
Also tested with a recent commit 7faf3342e0187841d590fd018452c5c69fd52271

# Steps to reproduce

In a conhost WSL shell, execute the following command:

    echo -e ""\e[6;19r\e[24H\e[99ACUU\e[1H\e[99BCUD\e[r""

This does the following:

- sets the top and bottom [`DECSTBM`](https://vt100.net/docs/vt510-rm/DECSTBM.html) margins to 6 and 19
- moves to line 24 (i.e. below the bottom margin)
- executes the [`CUU`](https://vt100.net/docs/vt510-rm/CUU.html) sequence with a count of 99, to move up 99 lines
- writes out *CUU*
- moves to line 1 (i.e. above the top margin)
- executes the [`CUD`](https://vt100.net/docs/vt510-rm/CUD.html) sequence with a count of 99, to move down 99 lines
- writes out *CUD*

# Expected behavior

Quoting from the DEC STD 070 manual:

> If the Active Position is at or below the Top Margin when the CUU control is executed, and an attempt is made to move the Active Position above the Top Margin, the control will be executed until the Active Position reaches the Top Margin. The Active Position will not move beyond the Top Margin. 

Similarly for the `CUD` command:

> If the Active Position is at or above the Bottom Margin when the CUD control is executed, and an attempt is made to move the Active Position below the Bottom Margin, the control will be executed until the Active Position reaches the Bottom Margin. The Active position will not move beyond the Bottom Margin. 

So I would expect the `CUU` sequence to stop on line 6, the top margin, and the `CUB` sequence to stop on line 19, the bottom margin.

This is what the output looks like in XTerm:

![image](https://user-images.githubusercontent.com/4181424/65733165-3ee6c100-e0c5-11e9-9d53-5490453c6b02.png)

# Actual behavior

In the Windows console, the movement isn't constrained by the margins. As a result, the `CUU` sequences ends up at the top of the viewport, and the `CUD` sequences ends up at the bottom.

![image](https://user-images.githubusercontent.com/4181424/65733174-473efc00-e0c5-11e9-9bf3-cf3cfb47ec28.png)

Note that this isn't a regression of #170. We do get it right if the initial cursor position was inside the margins. It's just when it starts off outside the margins that it's not being constrained.

The complication is that you sometimes *don't* want the cursor position constrained. For example, if you're moving up (with `CUU`), and you started off above the top margin, then there's no need to constrain the position below that margin.",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Area-VT;Issue-Bug;Priority-2,2019-09-27T00:23:53Z,2019-10-01T17:42:34Z,j4james,DHowett-MSFT;j4james;egmontkob;zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2944,"Copying text still includes white space instead of newlines Hi everyone, 

I thought this was addressed in #2797, but it didn't. It might be a duplicate of #174. 

The problem
---

In short, copying + pasting is very weird with newlines. In some cases, it seems to copy only *some* of them:

![image](https://user-images.githubusercontent.com/7847742/65805801-55555100-e187-11e9-9216-89556dfeaad7.png)

But using `clear` in the WSL seems to reliably and effectively completely break copying. 
![image](https://user-images.githubusercontent.com/7847742/65806217-cf3a0a00-e188-11e9-84ba-5ee17b1ceaae.png)

It doesn't copy any whitespaces, instead, it copies the buffer as-is.

The same effect seems to occur with PowerShell. Here without a `clear` beforehand: 
![image](https://user-images.githubusercontent.com/7847742/65806287-1e803a80-e189-11e9-9c2c-c335a3e34def.png)

And here with a clear beforehand: 
![image](https://user-images.githubusercontent.com/7847742/65806308-2e981a00-e189-11e9-8b07-c0a0c198180d.png)

System info 
---

The selected console is a standard WSL Ubuntu, as detected by the terminal:

```js
    {
      ""guid"": ""{2c4de342-38b7-51cf-b940-2309a097f518}"",
      ""hidden"": false,
      ""name"": ""Ubuntu"",
      ""source"": ""Windows.Terminal.Wsl""
    }
```

If it's a powershell, it's similar:
```js
    {
      // Make changes here to the powershell.exe profile
      ""guid"": ""{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"",
      ""name"": ""Windows PowerShell"",
      ""commandline"": ""powershell.exe"",
      ""hidden"": false
    },
```

Nothing in the config has been changed, besides adding two (unrelated) profiles. In the screenshot, the Windows Terminal was freshly opened.

Version information of Windows Terminal:
```
Windows Terminal (Preview)
Version: 0.5.2681.0
```

System + Build Info: 
![image](https://user-images.githubusercontent.com/7847742/65805934-d3195c80-e187-11e9-9f7a-2b9b07fe42c7.png)

If I can help with providing anything else, please do ask. ",carlos-zamora,Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix,2019-09-27T22:46:04Z,2019-11-30T14:21:30Z,moritzuehling,moritzuehling,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,moritzuehling,
microsoft/terminal,2952,"Bell does not work or does not exist Many terminals have `bell` (_beep_), a sound which is activated when the user uses completion or make a mistake typing a command. WT does not seem to have it or I have not understood how to set it. I have tries wit Ubuntu, CMD, PS and my setting of MSYS2. Notice the bell/beep works using MinTTY...

",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-VT;Issue-Bug;Priority-2,2019-09-28T11:48:17Z,2019-09-30T22:38:53Z,angelog0,j4james;zadjii-msft;angelog0;DHowett-MSFT,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,2963,"Profiles Schema: ""null"" is not allowed for ""background"" but it is # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.356]
Windows Terminal version (if applicable): 0.5.2681.0

Any other software?
Visual Studio Code: 1.38.1
```

# Steps to reproduce

1. Open `profiles.json` in Visual Studio Code
1. In one of the profiles with a default background color (e.g. the one for PowerShell) add: `""background"": null,`
1. In Windows Terminal, observe how the background color of this profile is reset to the one of its `colorScheme`.

# Expected behavior

I should not get a schema warning about using `null` for `background`.

# Actual behavior

I get the following schema warning:

> Incorrect type. Expected ""string"".
",cinnamon-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix,2019-09-29T06:24:27Z,2019-11-12T19:18:23Z,skrysmanski,,zadjii-msft,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,2964,"Profiles Schema: ""name"" in a profile is required when its not # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.356]
Windows Terminal version (if applicable): 0.5.2681.0

Any other software?
Visual Studio Code: 1.38.1
```

# Steps to reproduce

1. Open `profiles.json` in Visual Studio Code
1. In one of the profiles remove the `name` property (i.e. to have it use the name it inherits from the `defaults.json`).

# Expected behavior

I should not get a schema warning.

# Actual behavior

I'm getting the following schema warning:

> Missing property ""name"".",leonMSFT,Issue-Docs;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Priority-3;Area-Schema,2019-09-29T06:28:00Z,2020-04-21T21:46:00Z,skrysmanski,zadjii-msft;skrysmanski;DHowett-MSFT;leonMSFT,zadjii-msft;cinnamon-msft,DHowett-MSFT,leonMSFT,,leonMSFT,
microsoft/terminal,2988,"Other applications open behind the Terminal window - (ConPTY window handle z-order shenanigans with `GetConsoleWindow`) <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement

When I open File explorer from terminal using command such as `start .` control should shift to explorer window but it remains in terminal.

# Proposed technical implementation details (optional)

when file explorer starts control should shift to explorer and any further keyboard interaction should be targeted to explorer window.
You can verify how `ConEmu` or `cmd` works to validate this.
",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Issue-Bug;Area-User Interface;Priority-1;zInbox-Bug,2019-09-30T15:59:07Z,2022-04-28T18:17:21Z,amithegde,amithegde;zadjii-msft;cactusbash;SpitFire-666;KalleOlaviNiemitalo;DHowett;Fred-Vatin;arkrumbe;fpqc;IanMoroney;grossag;dracan;OMA2k,amithegde;zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,zadjii-msft,
microsoft/terminal,3052,"Regression in line wrapping from #2924 When you get to the end of a line in Terminal, it now disagrees with conhost as to where the next line goes.

Terminal:

```
aaaaaaaaaa|
          |
aaaa      |
```

Conhost:

```
aaaaaaaaaa|
aaaa      |
```

Possible regression from #2924.",miniksa,Resolution-Fix-Committed;Area-Output;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Priority-1,2019-10-04T01:31:32Z,2019-10-16T00:33:33Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT;cinnamon-msft,,DHowett-MSFT,
microsoft/terminal,3064,"White border at the bottom of the window. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18995.0
Windows Terminal version (if applicable): 0.5.2762.0
```

# Steps to reproduce

Open Terminal app.

# Expected behavior

Should not show a white border on the bottom of the window.

# Actual behavior

Shows a 1 pixel thin white border on the bottom of the window.
![grafik](https://user-images.githubusercontent.com/2971735/66225365-8e864780-e6d8-11e9-943d-efa6741be223.png)

",DHowett-MSFT;greg904,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-10-04T16:57:27Z,2019-11-04T23:45:40Z,danielniccoli,carlos-zamora;sourajitk;DHowett-MSFT;saschanaz;AzAgarampur;ricardosantos9521;zadjii-msft;danielniccoli,carlos-zamora,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,3079,"Powershell: Ctrl-Alt-? does not work in Windows Terminal <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.388
Windows Terminal version (if applicable): 0.5.2762.0

Powershell version:
PSVersion                      5.1.18362.145                                                                           
PSEdition                      Desktop                                                                                  PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}       
BuildVersion                   10.0.18362.145                                                                       
CLRVersion                     4.0.30319.42000                                                                          
WSManStackVersion              3.0                                                                                      
PSRemotingProtocolVersion      2.3                                                                                      
SerializationVersion           1.1.0.1              
```

# Steps to reproduce

- Open Powershell tab
- Press Ctrl-Alt-? (Ctrl-Alt-Shift-/)

# Expected behavior
it should display Powershell existing key binding 
Basic editing functions
```
=======================
Enter            AcceptLine         Accept the input or move to the next line if input is missing a closing token.
Shift+Enter      AddLine            Move the cursor to the next line without attempting to execute the input
Backspace        BackwardDeleteChar Delete the character before the cursor
Ctrl+h           BackwardDeleteChar Delete the character before the cursor
Ctrl+Home        BackwardDeleteLine Delete text from the cursor to the start of the line
Ctrl+Backspace   BackwardKillWord   Move the text from the start of the current or previous word to the cursor to th...
Ctrl+C           Copy               Copy selected region to the system clipboard.  If no region is selected, copy th...
Ctrl+c           CopyOrCancelLine   Either copy selected text to the clipboard, or if no text is selected, cancel ed...
Ctrl+x           Cut                Delete selected region placing deleted text in the system clipboard
```
# Actual behavior
it displays weird characters:
`^_  `

",zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2019-10-05T14:23:16Z,2020-06-08T22:31:29Z,baget,DHowett-MSFT;PawelK0;zadjii-msft;DarthJahus,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,zadjii-msft,,
microsoft/terminal,3093,"Terminal: add support for showing/hiding the cursor (DECSET/DECRST 25, DECTCEM) <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Win32NT 10.0.18362.0
Windows Terminal version (if applicable): 0.5.2762.0
```

# Steps to reproduce

    printf '\e[?25l'

# Expected behavior

The cursor should become invisible.

# Actual behavior

The cursor remains visible and blinking. It is often misplaced on subsequent operations, though.

E.g. press the Up arrow, it brings back the previous printf command to the command line. Press the Left arrow, the cursor doesn't move. Press Backspace, the letter `l` is removed (that is, the logical cursor did indeed move to the left in the previous step), the cursor now blinks at the right edge.",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Area-VT;Issue-Bug;Product-Terminal;Priority-1,2019-10-06T12:22:41Z,2020-03-13T17:39:43Z,egmontkob,DHowett-MSFT;j4james;zadjii-msft,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT;zadjii-msft,,,,
microsoft/terminal,3126,"Clear-Host does not clear the previous content (Powershell) # Environment

```none
Windows build number: Microsoft Windows NT 10.0.18362.0
Windows Terminal version (if applicable): 0.5.2762.0
```

# Steps to reproduce

```
# open Terminal with powershell
# open git repo with more than 100 commits
git log -100 # to fill in the entire screen with text
Clear-Host
# scroll up
```

# Expected behavior

Cannot scroll up, `Clear-Host` cleared the terminal, all previous output is gone.

# Actual behavior

Scrolling up shows previous output. This repros with both Powershel 6.2.3 and 5.2.1.
This does not happen with the powershell terminal, which correctly removes all previous output.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Area-VT;Issue-Bug;Priority-2,2019-10-09T01:00:31Z,2020-04-30T21:53:32Z,cdmihai,j4james;ezhikov;zadjii-msft;DHowett-MSFT;miniksa;PrzemyslawKlys;dragonwolf83,miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,,,,
microsoft/terminal,3136,"Window Border expands when showTabsInTitlebar is enabled <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

I originally opened #2333 which was supposed to be resolved by #2150 but I am still seeing the issue in 0.5

# Environment

```none
Windows build number: Microsoft Windows NT 10.0.18362.0
Windows Terminal version (if applicable): 0.5.2762.0


```

# Steps to reproduce
Set showTabsInTitlebar to true.

# Expected behavior

![working](https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/07/title-bar-v03.png)

# Actual behavior
![true](https://i.imgur.com/zU6WXCR.png)


When showTabsInTitlebar is false

![false](https://i.imgur.com/Crck80B.png)

<!-- What's actually happening? -->
",DHowett-MSFT;greg904,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-10-09T12:39:20Z,2019-11-04T23:45:41Z,RRitts,DHowett-MSFT;RRitts;zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,3156,"Dark titlebar in classic CMD is broken in Insider builds <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18985.1 (Sorry for being outdated, I haven't been able to update to a more recent Insider build)
Windows Terminal version (if applicable): N/A

Any other software? No
```

# Steps to reproduce

Open cmd.exe compiled from this repo or built in Windows.

# Expected behavior

The titlebar is black, like in the current stable Windows.

# Actual behavior

The titlebar isn't black: 
![image](https://user-images.githubusercontent.com/6440374/66656102-57012900-ec0b-11e9-9f8c-2e241b294569.png)

",DHowett-MSFT,Product-Conhost;Resolution-Fix-Available;Issue-Bug;Area-User Interface,2019-10-11T13:43:33Z,2019-11-16T04:17:35Z,sylveon,sylveon;DHowett-MSFT;raddinet,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,sylveon,
microsoft/terminal,3166,"Cursor artifact under the bottom row <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): 0.5.2762.0
```

# Steps to reproduce

Prefer bar or box cursor shape for more prominent behavior.

Produce more than a screenful of output so that the cursor is in the bottom row.

Resize the window so that there's a noticeable gap (a partial row) under the bottom text row.

Again make sure that the cursor is in the bottom row.

When the cursor is visible (that is, not in ""off"" state while blinking), scroll back by exactly 1 line e.g. by hitting Ctrl+Shift+Up.

# Expected behavior

Option 1: Hide the cursor.

Option 2: Display the partial cursor, and display the corresponding line of the terminal buffer too in this partial row. Also, make sure the cursor keeps blinking as desired.

# Actual behavior

The cursor is displayed in the partial bottom row (although no text is printed here 閳 the next prompt in case of this screenshot). Furthermore, it stops blinking.

![wt-cursor](https://user-images.githubusercontent.com/5750745/66703477-5b186e00-ed13-11e9-9b0f-407adfcd6c99.png)
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Area-Rendering;Issue-Bug;Product-Terminal;Priority-2,2019-10-12T15:13:48Z,2020-03-13T15:51:12Z,egmontkob,,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,zadjii-msft,,,
microsoft/terminal,3169,"Extraordinarily sluggish response to input over busy ssh session <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]

`Microsoft Windows [Version 10.0.18999.1]`

Windows Terminal version (if applicable):
`0.5.2762.0`

Any other software? 
`ssh`, `cmd`
```

# Steps to reproduce

1. ssh to an Ubuntu 18.04 host; log in to `bash` session.
2. start `byobu`
2. run command
```$ while :; do echo 'All work and no play makes Jack a dull boy.';  done```
3. press `F2` key to create new `byobu` window
4. press `F3` and `F4` to toggle screens back and forth several times

# Expected behavior
Steps  4 and 5 respond quickly.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
Steps 4 and 5 can take very long times to process the keystroke and respond.
Sometimes 10, 20, 30 seconds, sometimes immediate.

<!-- What's actually happening? -->

Compare to doing the same process from `cmd.exe` (in its native window), which responds immediately as expected.

Ctrl-C also is sluggish. 

[edited to correct EB and AB and add Ctrl-C comment]
",zadjii-msft,Help Wanted;Area-Performance;Issue-Bug;Needs-Author-Feedback;No-Recent-Activity;Product-Terminal;Priority-1,2019-10-12T21:28:40Z,2020-04-22T16:00:10Z,hwinkler,ZimGil;hwinkler;zadjii-msft,DHowett-MSFT;cinnamon-msft;zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,3207,"Vertical resizing doesn't redraw properly <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18990.0
Windows Terminal version (if applicable): After 1909 release, built from master, latest commit: https://github.com/microsoft/terminal/commit/df26c677efcb815a3b66a974345c9d3483cab678

Any other software?
```

# Steps to reproduce
Resize the Terminal from the bottom or double click to make it full screen. Any vertical resizing will do it.
<!-- A description of how to trigger this bug. -->

# Expected behavior
Everything draws properly and the background color fills the window.
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
The background doesn't fill and black rectangles fill it instead. Improper redrawing.

![verticalredrawbug](https://user-images.githubusercontent.com/48369326/66854980-3d2b5300-ef37-11e9-987d-84b94350b422.gif)

<!-- What's actually happening? -->
",DHowett-MSFT,Resolution-Fix-Committed;Area-Interaction;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-10-15T17:35:11Z,2019-10-17T21:56:05Z,cinnamon-msft,,cinnamon-msft,DHowett-MSFT,cinnamon-msft,,miniksa,
microsoft/terminal,3216,"conhost.exe crash after ERROR_SHARING_VIOLATION exception when using dwShareFlags=0 screen buffers # Environment

```none
Windows build number: 10.0.18362.418
Windows cmd.exe version: 10.0.18362.1
Windows conhost.exe version: 10.0.18362.1
```

# Steps to reproduce

Build this program as C or C++ in Visual Studio, and run it manually from the command line in a cmd.exe window:
```c
#include <stdio.h>
#include <windows.h>

int main(int argc, char** argv) {
	const HANDLE in = GetStdHandle(STD_INPUT_HANDLE);
	const HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
	const HANDLE csb = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	const BOOL success = SetConsoleActiveScreenBuffer(csb);
	char buffer[1];
	DWORD dwRead = 0;
	ReadFile(in, buffer, sizeof(buffer), &dwRead, NULL); // Fails with GetLastError() == ERROR_SHARING_VIOLATION (makes sense)
	const BOOL success2 = SetConsoleActiveScreenBuffer(out);
	return 0;
}
```

# Expected behavior (as on Windows 7)

The program quickly exits (edit: after hitting enter!) and returns the user to the command prompt.

# Actual behavior (Windows 10)

The program exits, conhost.exe throws an exception and then crashes, causing the terminal window to close.  An adplus log for conhost.exe is attached, but some excerpts:

### [ADPlus_log_34e8_2019-10-15_17-25-27-407.log](https://github.com/microsoft/terminal/files/3731926/ADPlus_log_34e8_2019-10-15_17-25-27-407.log)

#### Initial choking on ERROR_SHARING_VIOLATION
```
...
0:003> g
onecore\windows\core\console\open\src\server\objectheader.cpp(58)\conhost.exe!00007FF6EAD2B3F3: (caller: 00007FF6EAD5C77C) ReturnHr(1) tid(3300) 80070020 The process cannot access the file because it is being used by another process.
onecore\windows\core\console\open\src\host\readdatacooked.cpp(81)\conhost.exe!00007FF6EAD5C798: (caller: 00007FF6EAD515F1) Exception(1) tid(3300) 80070020 The process cannot access the file because it is being used by another process.

(20b4.3300): C++ EH exception - code e06d7363 (first chance)
FirstChance_eh_CPlusPlusEH
...
Call stack below ---
 # ... : Call Site
00 ... : KERNELBASE!RaiseException+0x69
01 ... : ucrtbase!CxxThrowException+0xad
02 ... : conhost!wil::details::ThrowResultExceptionInternal+0x55
03 ... : conhost!wil::details::ReportFailure+0x220f8
04 ... : conhost!wil::details::ReportFailure_Hr+0x44
05 ... : conhost!wil::details::in1diag3::Throw_Hr+0x26
06 ... : conhost!COOKED_READ_DATA::COOKED_READ_DATA+0x154
07 ... : conhost!std::make_unique<COOKED_READ_DATA,InputBuffer * __ptr64,INPUT_READ_HANDLE_DATA * __ptr64,SCREEN_INFORMATION & __ptr64,__int64,unsigned short * __ptr64,unsigned long const & __ptr64,CommandHistory * __ptr64 const & __ptr64,std::basic_string_view<unsigned short,std::char_traits<unsigned short> > const & __ptr64,0>+0xad
08 ... : conhost!_ReadLineInput+0x101
09 ... : conhost!DoReadConsole+0x14a
0a ... : conhost!ApiRoutines::ReadConsoleAImpl+0x9a
0b ... : conhost!ApiDispatchers::ServerReadConsole+0x3f7
0c ... : conhost!ConsoleIoThread+0x20c9f
0d ... : KERNEL32!BaseThreadInitThunk+0x14
0e ... : ntdll!RtlUserThreadStart+0x21

(20b4.3300): C++ EH exception - code e06d7363 (first chance)
FirstChance_eh_CPlusPlusEH
...
Call stack below ---
 # ... : Call Site
00 ... : KERNELBASE!RaiseException+0x69
01 ... : ucrtbase!CxxThrowException+0xad
02 ... : conhost!wil::details::ResultFromCaughtExceptionInternal+0x6c
03 ... : conhost!wil::details::ReportFailure_CaughtExceptionCommon+0x63
04 ... : conhost!wil::details::ReportFailure_CaughtException+0x4d
05 ... : conhost!wil::details::in1diag3::Return_CaughtException+0x1b
06 ... : conhost!`_ReadLineInput'::`1'::catch$59+0x25
07 ... : ucrtbase!CallSettingFrame+0x20
08 ... : ucrtbase!__FrameHandler3::CxxCallCatchBlock+0xe8
09 ... : ntdll!RcConsolidateFrames+0x6 (TrapFrame @ 00000076`7497bea8)
0a ... : conhost!_ReadLineInput+0x101
0b ... : conhost!DoReadConsole+0x14a
0c ... : conhost!ApiRoutines::ReadConsoleAImpl+0x9a
0d ... : conhost!ApiDispatchers::ServerReadConsole+0x3f7
0e ... : conhost!ConsoleIoThread+0x20c9f
0f ... : KERNEL32!BaseThreadInitThunk+0x14
10 ... : ntdll!RtlUserThreadStart+0x21

onecore\windows\core\console\open\src\host\stream.cpp(524)\conhost.exe!00007FF6EAD528B2: (caller: 00007FF6EAD519EE) ReturnHr(2) tid(3300) 80070020 The process cannot access the file because it is being used by another process.
onecore\windows\core\console\open\src\host\readdatacooked.cpp(81)\conhost.exe!00007FF6EAD5C798: (caller: 00007FF6EAD515F1) Exception(1) tid(3300) 80070020 The process cannot access the file because it is being used by another process.
```

#### Access violation on cleanup
```
(20b4.3300): Access violation - code c0000005 (first chance)
FirstChance_av_AccessViolation
...
Call stack below ---
 # ... : Call Site
00 ... : conhost!ConsoleObjectHeader::FreeIoHandle+0x4
01 ... : conhost!ConsoleHandleData::_CloseOutputHandle+0x2c
02 ... : conhost!IoDispatchers::ConsoleCloseObject+0x48
03 ... : conhost!ConsoleIoThread+0x248
04 ... : KERNEL32!BaseThreadInitThunk+0x14
05 ... : ntdll!RtlUserThreadStart+0x21
Creating C:\dumps\20191015_172527_Crash_Mode\MINIDUMP_FirstChance_av_AccessViolation_conhost.exe__34e8_2019-10-15_17-25-40-330_20b4.dmp - mini user dump
Dump successfully written

(20b4.3300): Access violation - code c0000005 (!!! second chance !!!)
SecondChance_av_AccessViolation
...
Call stack below ---
 # ... : Call Site
00 ... : conhost!ConsoleObjectHeader::FreeIoHandle+0x4
01 ... : conhost!ConsoleHandleData::_CloseOutputHandle+0x2c
02 ... : conhost!IoDispatchers::ConsoleCloseObject+0x48
03 ... : conhost!ConsoleIoThread+0x248
04 ... : KERNEL32!BaseThreadInitThunk+0x14
05 ... : ntdll!RtlUserThreadStart+0x21
Creating C:\dumps\20191015_172527_Crash_Mode\FULLDUMP_SecondChance_av_AccessViolation_conhost.exe__34e8_2019-10-15_17-25-40-396_20b4.dmp - mini user dump
Dump successfully written
```

# Workarounds

- Pass `FILE_SHARE_READ | FILE_SHARE_WRITE` to [CreateConsoleScreenBuffer](https://docs.microsoft.com/en-us/windows/console/createconsolescreenbuffer)'s second parameter, despite the docs stating that ""This parameter can be zero"".
- Don't read stdin while an unshared screen buffer is active
- Use Windows 7",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Server;Issue-Bug;Severity-Crash;Needs-Tag-Fix;Priority-1,2019-10-16T00:40:24Z,2019-11-05T22:22:56Z,MaulingMonkey,DHowett-MSFT;miniksa,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,miniksa,
microsoft/terminal,3252,"REGRESSION: HTML Copy Broken # Environment

Occurs in commit 9c7e8ce1e38dafc019edca1b562fcbf43ed9652c (master as of Oct. 18, 4:50 PM PST ).

# Steps to reproduce

make a selection
copy it
paste to ms word

# Expected behavior

formatted text

# Actual behavior

formatted text paste does nothing
pasting text only works fine
",mcpiroman,Product-Conhost;Resolution-Fix-Committed;Area-Interaction;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2019-10-18T23:45:08Z,2019-10-21T20:42:54Z,carlos-zamora,carlos-zamora;DHowett-MSFT;0xabu,carlos-zamora,carlos-zamora,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,3275,"[0.6] Cannot launch elevated due to MUX 2.2 update Discovered in internal flights of 0.6 preview, we cannot launch elevated. It appears related to the MUX 2.2 ingestion. @DHowett-MSFT is looking into workarounds right now. This is ship blocking.",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2019-10-21T19:31:35Z,2019-10-22T18:48:10Z,miniksa,,miniksa,miniksa,miniksa,,DHowett-MSFT,
microsoft/terminal,3303,"Terminal crashes when dragged to another monitor <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number:  Microsoft Windows [Version 10.0.18362.418]
Windows Terminal version (if applicable): 0.6.2951.0
```

# Steps to reproduce

1. Open Windows Terminal with ""only one tab open""
2. Drag to another monitor with a lower resolution (from 2160p to 1080p)

# Expected behavior

Terminal is dragged onto another monitor

# Actual behavior

It crashes.
Funny thing: The terminal doesn't crash when I have more than one tab open.
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Tracking-External,2019-10-23T23:53:23Z,2019-12-04T18:27:02Z,skylarnam,DHowett-MSFT;winstonhenke;CosmicCatnap;lbalmont;adrianmoya;zadjii-msft;Julien-Marcou;LukaszMendakiewicz;9jaGuy;skylarnam;greg904;aaroneuph;flickerfly;waltiam;decstewartje,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,3320,"Writing random output to console output handle fails with no last error set # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.19002.1000]

Any other software?
WSL2
```

# Steps to reproduce
https://github.com/microsoft/WSL/issues/4495
1. Install Ubuntu 18.04 distro from store
2. `for i in /bin/*; do head ${i}; done`
3. Observe wsl window hang or crash

# Expected behavior

Contents of the files are displayed, no hang / crash.

# Actual behavior

WSL window will close, or hang.  Seems like an issue with (or around) Utf8ToWideCharParser::_InvolvedParse.
",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Output;Issue-Bug;Severity-Crash;Needs-Tag-Fix;Priority-1,2019-10-24T20:33:13Z,2019-10-31T17:50:35Z,benhillis,jstarks;benhillis;DHowett-MSFT,zadjii-msft,DHowett-MSFT,DHowett-MSFT,,miniksa,
microsoft/terminal,3425,"Terminal has white borders in dark mode (Update ThemeUtils::SetWindowFrameDarkMode to use new DWM API) From #3394:
> I'd be most comfortable merging this without the dark theme fix (which I know will cause there to be white borders around the entire window instead of just at the bottom) and then bringing in the dark theme changes when the other fix has flowed back down from Windows.",DHowett-MSFT,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-2,2019-11-03T14:31:53Z,2020-03-05T21:28:56Z,greg904,DHowett-MSFT;greg904;andrew-boyarshin;michalhudecek;DHowett;lukeblevins;Stanzilla;Piroro-hs;gwojan;spencerwooo,DHowett-MSFT,DHowett-MSFT,,,greg904,
microsoft/terminal,3440,"Windows Terminal does not open with button displaying ""maximized"" state <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.418]
Windows Terminal version (if applicable): 0.6.2951.0

```

# Steps to reproduce

Set `""launchMode"": ""maximized""` within `profiles.json`


# Expected behavior

Windows Terminal opens maximized.


# Actual behavior

Windows Terminal opens with maximum screen size, but not maximized (see screenshots).
wrong (actual implementation): ![wrong](https://user-images.githubusercontent.com/4560672/68200105-7fd4ce00-ffbf-11e9-8ab8-376373701524.png)
correct: ![correct](https://user-images.githubusercontent.com/4560672/68200162-9d099c80-ffbf-11e9-92e6-b3fd1e707934.png)



",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2019-11-05T10:31:03Z,2020-05-21T23:27:34Z,mu88,trajano,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,3442,"Windows Terminal works once, and then refuses to start afterwards Feedback Hub ref: https://aka.ms/AA6h5a5

# Environment
```none
Windows build number: Microsoft Windows [Version 10.0.18363.449]
Windows Terminal version (if applicable): 0.6.2951.0
```

# Steps to reproduce
* Install via Microsoft Store
* Run once, change no settings, just exit the application
* Try to run the application again. Refuses to start

Uninstalling and re-installing allows me to run it once before it stops working again.
The following shows in Event Viewer:
```none
Faulting application name: WindowsTerminal.exe, version: 1.0.1910.22001, time stamp: 0x5daf7ab2
Faulting module name: ucrtbase.dll, version: 10.0.18362.387, time stamp: 0x4361b720
Exception code: 0xc0000409
Fault offset: 0x000000000006db8e
Faulting process ID: 0x648
Faulting application start time: 0x01d593d9ad986ce2
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_0.6.2951.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\Windows\System32\ucrtbase.dll
Report ID: 12631cc9-d497-4e43-b19a-b38d76e9dc8e
Faulting package full name: Microsoft.WindowsTerminal_0.6.2951.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App
```

# Expected behavior
* Expect application to start repeatably

# Actual behavior
* Windows Terminal not starting after first run",DHowett-MSFT,Issue-Bug;Severity-Crash;Needs-Attention;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro,2019-11-05T13:10:55Z,2020-01-29T23:22:42Z,dalgibbard,DHowett-MSFT;dalgibbard;nizmow;dgibbard-cisco,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,3490,"Flattening the window loses scrollback lines <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): 0.6.2951.0
```

# Steps to reproduce

- `ssh` to a Linux box
- `seq 100`
- shrink the window vertically (fewer lines)
- scroll back

# Expected behavior

See the numbers from 1 to 100

# Actual behavior

Lines get permanently lost as the window is made smaller, e.g. the sequence goes like ... 70 71 72 73 78 79 80 81 ...",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-1,2019-11-08T21:32:24Z,2020-03-13T00:43:37Z,egmontkob,zadjii-msft,zadjii-msft;cinnamon-msft,zadjii-msft,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,3493,"Consider not wrapping the alternate screen on resize <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement

VTE only rewraps the contents of the (normal screen + its scrollback buffer) on a resize event. It doesn't rewrap the contents of the alternate screen.

Rationale:

The alternate screen is used by applications which repaint it after a resize event. So it doesn't really matter.

However, in that short time window, after resizing the terminal but before the application catches up, this prevents vertical lines (e.g. the user interface of `mc`) from becoming ugly tilted.",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2019-11-08T22:17:10Z,2022-04-15T02:33:34Z,egmontkob,,egmontkob;zadjii-msft;cinnamon-msft,zadjii-msft;DHowett,zadjii-msft,,,
microsoft/terminal,3494,"Maintain scrollbar position during resize <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement

Currently, if you drag back the scrollbar and then resize the window, the viewport jumps back to the ""regular"" position (the end of the data buffer, and the bottom position of the scrollbar).

It would be better to (approximately) maintain the scrolled position, so that the user keeps seeing whichever data was previously shown.

In VTE we usually track the position at the bottom of the viewport and try to keep that at the bottom; except when fully scrolled back to the top. More details in [doc/rewrap.txt](https://gitlab.gnome.org/GNOME/vte/blob/master/doc/rewrap.txt).",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2019-11-08T22:23:02Z,2020-03-16T12:55:26Z,egmontkob,zadjii-msft,egmontkob;zadjii-msft;cinnamon-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,3499,"Double cursors in neovim terminal buffer (and fzf, probably more) # Environment

```none
Windows build number: 10.0.18362.418
NVIM v0.3.8
```

# Steps to reproduce

Open Neovim in WSL Windows Terminal and open a terminal buffer (:ter). Then enter insert mode.

# Actual behavior

There will be two cursors.",zadjii-msft,Resolution-Fix-Committed;Area-VT;Issue-Bug;Product-Terminal;Priority-2,2019-11-09T11:53:28Z,2020-03-13T17:39:43Z,schffp,zadjii-msft;schffp;mkarbo;surajp;DHowett-MSFT;ErickTucto,zadjii-msft;cinnamon-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,3507,"ctrl + # not being processed by Bash correctly I'm sorry if this has been reported before, spent some time searching through the issues but couldn't find it.

Right now, if I type ctrl-NUM, it seems like it's not being picked up by the terminal app properly. Specifically, I've been trying to get the ctrl-6 vim behaviour to work, but I can't figure out if it's possible.

Thanks!",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Area-Input;Area-VT;Issue-Bug;Product-Terminal;Priority-2,2019-11-10T03:49:50Z,2020-03-18T22:39:23Z,impguard,Luuk34;zadjii-msft;miniksa;j4james;impguard;daiyousei-qz;bolov,zadjii-msft;cinnamon-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,3508,"Wrong text size when running 閳ユ笩udo apt update閳 # Environment

```none
Windows build number: 10.0.18363.448
Windows Terminal version (if applicable): 0.6.2951.0

Any other software? None
```

# Steps to reproduce

Run `sudo apt update`.

# Expected behavior

The line with `閳ユ損t list --upgradable閳ユ獋 should display with the correct text size, as in Windows Console:

![image](https://user-images.githubusercontent.com/11819816/68539913-1856be00-03c5-11ea-9128-bd2e8afc835b.png)

I'm using the Simplified Chinese language edition of Windows, and Windows Console uses SimSun, 12pt as default font.

# Actual behavior

The same line in Windows Terminal displays with the wrong text size:

![image](https://user-images.githubusercontent.com/11819816/68539917-2c9abb00-03c5-11ea-9050-c50e7fb808c6.png)

The font I use is Noto Sans Mono CJK SC, 12pt.",miniksa,Resolution-Duplicate;Area-Rendering;Area-Fonts;Issue-Bug;Product-Terminal,2019-11-10T06:25:53Z,2019-11-11T20:44:16Z,win98se,etern;zadjii-msft;miniksa,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,3518,"Pasting doesn't trigger `snapOnInput` behavior # Description of the new feature/enhancement

I'd consider this a bug, since nearly every terminal does it, but it's also a missing feature:

Windows 10: 10.0.18908.0
Windows Terminal: 0.6.2951.0\

When scrolled up so the prompt isn't visible, pasting or typing should scroll to the prompt.

Example:
 - I just scrolled up to copy something
 - I found it and pasted it (into the prompt)
 - I then want to see my prompt, and would expect the terminal to have scrolled down


",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal,2019-11-11T14:58:13Z,2019-11-13T02:12:44Z,mikemaccana,zadjii-msft;mikemaccana,mikemaccana;zadjii-msft,zadjii-msft;miniksa,zadjii-msft,,,
microsoft/terminal,3536,"TerminalAppLocalTests failing when running unit tests locally # Environment

Windows build number: Version 10.0.18362.356
Windows Terminal version (if applicable): commit e2994ff8908f5a8418f24f2e2954a6c163f910b6

Any other software?
Visual Studio Community 2019 Version 16.3.8

# Steps to reproduce

1. Checkout a recent version of the Terminal.
2. Build the code.
3. Execute `runut` in the tools directory.

# Expected behavior

I'm used to having a few failures in the `TerminalInputModifierKeyTests`, and I know a couple of `TabTests` are blocked, but the rest of the tests I would usually expected to pass.

# Actual behavior

Recently I've been getting failures in `TerminalAppLocalTests` that I've never had before:

    TerminalAppLocalTests::SettingsTests::TryCreateWinRTType [Failed]
    TerminalAppLocalTests::KeyBindingsTests::ManyKeysSameAction [Failed]
    TerminalAppLocalTests::KeyBindingsTests::LayerKeybindings [Failed]
    TerminalAppLocalTests::KeyBindingsTests::UnbindKeybindings [Failed]

The `TryCreateWinRTType` test is failing because it's throwing an unidentified C++ exception (I think in the `TerminalSettings` constructor):
```
StartGroup: TerminalAppLocalTests::SettingsTests::TryCreateWinRTType
Error: Caught an unidentified C++ exception
EndGroup: TerminalAppLocalTests::SettingsTests::TryCreateWinRTType [Failed]
```
The `KeyBindingsTests` are failing because the `KeyChordSerialization::FromString` method is throwing an exception for all of the key chords, so nothing gets added to the `appKeyBindings` in the `LayerJson` call. The test output isn't particularly informative, but here's an example of one of them:

```
StartGroup: TerminalAppLocalTests::KeyBindingsTests::ManyKeysSameAction
Verify: IsTrue(parseResult)
Verify: IsTrue(parseResult)
Verify: IsTrue(parseResult)
Verify: IsNotNull(appKeyBindings)
Verify: AreEqual(0u, appKeyBindings->_keyShortcuts.size())
Error: Verify: AreEqual(1u, appKeyBindings->_keyShortcuts.size()) - Values (1, 0) [File: C:\Users\James\CPP\terminal\src\cascadia\LocalTests_TerminalApp\KeyBindingsTests.cpp, Function: TerminalAppLocalTests::KeyBindingsTests::ManyKeysSameAction, Line: 63]
EndGroup: TerminalAppLocalTests::KeyBindingsTests::ManyKeysSameAction [Failed]
```

Are these failures expected when running the tests locally or is it just me?",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Terminal;Area-CodeHealth,2019-11-12T16:26:48Z,2019-12-03T19:29:49Z,j4james,zadjii-msft;j4james,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,3553,"Possible regression of emoji rendering since 0.6 @DHowett-MSFT my man. I'm seeing regression on current master https://github.com/microsoft/terminal/commit/306e75163929161b130872dcae890686da57790d

![閸ュ墽澧朷(https://user-images.githubusercontent.com/4710575/68740302-ba74e100-0625-11ea-8ca4-c02fbf7cc099.png)

_Originally posted by @skyline75489 in https://github.com/microsoft/terminal/issues/3546#issuecomment-553266974_",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-TerminalConnection;Product-Terminal;Needs-Tag-Fix;Severity-Blocking,2019-11-13T14:34:20Z,2019-11-16T01:02:39Z,zadjii-msft,zadjii-msft;skyline75489;DHowett-MSFT;JustinGrote;miniksa,zadjii-msft,,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,358,"Parameter values of more than 5 digits are not supported * Your Windows build number:

Microsoft Windows [Version 10.0.17763.195]

* What you're doing and what's happening:

I was trying to see how well the October update of the console dealt with [Vttest](https://invisible-island.net/vttest/vttest.html), and also determine the cause of any failures. In most cases it was just a matter of missing functionality (which I can understand might not be a priority), but the ""leading zeros"" test (the last screen of the ""Test of cursor movements"") feels like it could be a bug.

The point of the test was to determine whether leading zeros were supported in parameter values. And while the Windows console does handle them some of the time, it fails when the parameter value is more than 5 digits long. For example, consider these two sequences for setting the text color to green:

    printf ""\033[00032mGREEN\033[m\n""
    printf ""\033[000032mGREEN?\033[m\n""

The first one works (3 leading zeros, total length 5), but the second one fails (4 leading zeros, total length 6). This is a screenshot of those sequences in the WSL bash shell:

![image](https://user-images.githubusercontent.com/4181424/51447598-b46ce700-1d17-11e9-8f7f-3cc52cd2c7a5.png)

And for comparison, this is what they look like in XTerm:

![image](https://user-images.githubusercontent.com/4181424/51447613-d2d2e280-1d17-11e9-8766-df966fb33554.png)

Most of the time I'd expect this kind of edge case to be handled differently by everyone, and not worth worrying about, but this is one case that actually seems to be quite consistently implemented - every terminal emulator I've tried has supported an unlimited number of leading zeros.
 
* What's wrong / what should be happening instead:

I'd expect the console to handle any number of leading zeros in an escape sequence parameter value. 11 digits ought to be enough to pass the current version of Vttest, but I think it would be preferable if there were no limit to the length, since that's what everyone else seems to support.
",zadjii-msft,Work-Item;Product-Conhost;Help Wanted;Area-VT;Issue-Bug;Needs-Tag-Fix,2019-01-21T01:09:15Z,2019-06-10T16:59:31Z,j4james,miniksa;FarPointer;zadjii-msft;DHowett-MSFT;j4james,miniksa;zadjii-msft;DHowett-MSFT,miniksa;DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,3581,"Reordering tabs crashes when Terminal is running elevated <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

Windows build 10.0.18362.0
Windows Terminal version (if applicable): 0.6.3161.0

# Steps to reproduce

Launch Terminal as administrator.
Create a couple of tabs.
Try to reorder the tabs via click+drag

# Expected behavior

Tabs are reordered

# Actual behavior

Terminal crashes
",DHowett-MSFT,Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Priority-1,2019-11-14T18:51:25Z,2020-03-11T15:52:10Z,DJackman123,DHowett-MSFT;Alacritous;miniksa,DHowett-MSFT;miniksa;cinnamon-msft,DHowett-MSFT;miniksa,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,,
microsoft/terminal,3603,"Dropdown menu no longer displays bound keys (after #3391) This no longer works on 0.6.3181.0; possible regression from #3391?

![image](https://user-images.githubusercontent.com/14316954/68997963-360ea200-0861-11ea-9625-96e73ce5253f.png)

If I write a new binding with the legacy name `newTabProfile3`, I get this:

![image](https://user-images.githubusercontent.com/14316954/68997999-6f471200-0861-11ea-9b70-1f7b50ef0468.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-11-16T19:08:57Z,2019-11-21T23:09:51Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,3604,"`{increase,decrease}FontSize` don't seem to work # Environment

```none
Windows build number: 19H1 RTM
Windows Terminal version (if applicable): 0.6.3181.0
```

# Steps to reproduce

Press the key bound to `increaseFontSize` (like <kbd>Ctrl+=</kbd> from the default settings).

# Expected behavior

Font size increases.

# Actual behavior

Font size somewhat languishes, wonders what it is doing with its life, goes nowhere.",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix,2019-11-16T19:15:16Z,2019-11-20T15:45:44Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,leonMSFT,,zadjii-msft,
microsoft/terminal,3608,"Numeric input not accepted by choice.exe I discovered that choice.exe does not accept numeric input in Terminal whereas it does in the old Windows Console. I am on Windows 10 (update 19.03).
I wrote the following MWE:
```bat
@echo off

:_menu
cls
@echo Choose:
@echo   (1) Chocolate
@echo   (2) Vanilla
@echo   (S) Strawberry
@echo   (Q) Quit
@echo.

set _CHOICEOPTS_=q12s

rem -- Choice.com can't be launched in x64 environment ; use builtin ""choice.exe"" command
if exist %SystemRoot%\system32\choice.exe (
    choice.exe /n /c %_CHOICEOPTS_% /M ""Your choice : ""
)else (
    choice /n /c:%_CHOICEOPTS_% ""Your choice : ""
)

set /A _choice_=%ERRORLEVEL%-1
GOTO _menu%_choice_%


:_menu0
GOTO _exit
:_menu1
@echo You chose chocolate
pause
GOTO _menu
:_menu2
@echo You chose vanilla
pause
GOTO _menu
:_menu3
@echo You chose strawberry
pause
GOTO _menu
:_exit
exit /B 0
```
In Windows console, when I press 1 or 2, I get the expected output, but in Windows Terminal nothing happens (as if 1 and 2 are not accepted by choice.exe).
Could you investigate what is happening? I am ready to provide any relevant information.
Best regards.",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2019-11-17T17:09:56Z,2020-06-08T22:31:30Z,pasccom,DHowett-MSFT;pasccom;leonMSFT;skyline75489;j4james;tavrez;zadjii-msft,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,3609,"Clicking the current tab to raise the window should focus the text area # Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version: 0.6.2951.0

Any other software? Nope
```

# Steps to reproduce

1. Start Terminal
1. Focus another window
1. Re-focus Terminal by clicking on the active tab
1. Enter text using your keyboard

# Expected behavior

Raising the Terminal window should focus the text area no matter how you do it.

Works as expected if you click any other tab than the currently active.

# Actual behavior

Text input is ignored even though the Terminal window has focus. Text input is restored when clicking the text area or focusing another tab.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-2,2019-11-17T18:33:11Z,2021-05-11T23:55:49Z,FaffeF,egmontkob;zadjii-msft;gfody;mle-ii;FaffeF;DHowett;vefatica;JFLarvoire;DJackman123,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,3626,"black lines in background when using midnight commander or neovim <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.476
Windows Terminal version (if applicable): 0.6.2951.0
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
Run midnight commander `mc` with fontSize equal to 12 and with `cascadia code` or `consolas` font.
It is worth noting that with fontSize 14 or 10 the background renders correctly without black lines.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Background should be blue with no black lines
![Screenshot (29)](https://user-images.githubusercontent.com/16341131/69148356-03b4ad00-0acc-11ea-95ac-49948d6b1e0a.png)


# Actual behavior

<!-- What's actually happening? -->
Background has black lines
![Screenshot (31)](https://user-images.githubusercontent.com/16341131/69148364-09aa8e00-0acc-11ea-9774-b53cb50f3990.png)

",carlos-zamora,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-2,2019-11-19T13:09:58Z,2020-03-28T00:15:51Z,ducaale,j4james;egmontkob;phelps-matthew;george-tsiros;michalwidera;PhilDim1;sHAsHiLx;ducaale;DHowett-MSFT;ihor-sviziev,DHowett-MSFT,DHowett-MSFT,,,,
microsoft/terminal,3638,"nextTab and prevTab keyboard shortcuts don't scroll tab bar to keep active tab in view <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18362.476]
Windows Terminal version : 0.6.2951.0
```

# Steps to reproduce

- Open Terminal and create enough new tabs that some tabs aren't visible without scrolling
- Hit the nextTab or PrevTab keyboard shortcuts repeatedly (Ctrl+Tab and Ctrl+Shift+tab by default)

# Expected behavior

As the active tab changes, the tab bar should automatically scroll to keep the active tab visible.

# Actual behavior

As the active tab changes, the tab bar doesn't scroll, which can make it difficult to tell which tab is currently active,
",Don-Vito,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2019-11-20T16:43:28Z,2021-01-20T17:38:05Z,KevKeating,zadjii-msft;Don-Vito,zadjii-msft;cinnamon-msft,DHowett-MSFT,DHowett-MSFT;DHowett;zadjii-msft,DHowett;zadjii-msft,,
microsoft/terminal,3639,"Should Input Pane display policy be Automatic from #1919 

Code TODO to Investigate if the CoreTextInputPaneDisplayPolicy should be Manual or Automatic.

Current setting is Manual, however, it's TBD what impact this has with the software keyboard. 
`_editContext.InputPaneDisplayPolicy(Core::CoreTextInputPaneDisplayPolicy::Manual);`

See for more info about the properties: [CoreTextInputPaneDisplayPolicy Enum](https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Text.Core.CoreTextInputPaneDisplayPolicy#fields)
",leonMSFT,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-User Interface;Area-TerminalControl;Product-Terminal;Priority-2,2019-11-20T18:59:37Z,2020-03-10T17:55:57Z,philnach,,philnach;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,leonMSFT,,,
microsoft/terminal,3640,"TSFInputControl determine proper Width for TextBlock  from #1919 

Code TODO to determine proper dynamic width for the TextBlock in the TSFInputControl.  Ideally the Width should be set to the starting point of the cursor to the end of the border of the containers (Parent) control (i.e.: TerminalControl).  Today it's set to a fixed width of 200.  The size should take into account any scaling if applicable.",leonMSFT,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-User Interface;Area-TerminalControl;Product-Terminal;Priority-1,2019-11-20T19:17:47Z,2020-03-10T17:17:02Z,philnach,leonMSFT,philnach;zadjii-msft;cinnamon-msft;DHowett-MSFT,DHowett-MSFT;cinnamon-msft;leonMSFT,leonMSFT,,leonMSFT,
microsoft/terminal,3657,"Improve wrap around/edge behavior when inputing text in IME When the cursor is near the right side or bottom of the window, does the canvas appear hanging off the side of the window, or is it clipped by the bounds of the window?

If it's clipped, should we file a follow up to try and position the canvas heuristically based on the cursor position relative to the bounds of the window, to keep it in bounds?

_Originally posted by @zadjii-msft in https://github.com/_render_node/MDExOlB1bGxSZXF1ZXN0Mjk2Mzk0Mjcw/pull_requests/unread_timeline_

Terminal should do better than the original and wrap around and edge behavior when inputting text in the IME.  Current behavior isn't any better than the original command-line (inputted text is off screen).  But input should wrap around like in Notepad.",leonMSFT,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Area-User Interface;Area-TerminalControl;Product-Terminal;Priority-1,2019-11-21T19:25:32Z,2020-03-19T19:15:14Z,philnach,,philnach;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,leonMSFT,,,
microsoft/terminal,3710,"fullscreen not working on all displays <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): 0.7.3291.0
```

# Steps to reproduce
Entering fullscreen only works on two of my three monitors.
On the third one terminal just maximizes and shows nothing but black/gray and a bright white titlebar.

![image](https://user-images.githubusercontent.com/13918530/69661858-73eea000-1083-11ea-83f2-b90d8a3783a4.png)
",DHowett-MSFT,Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro;Priority-1,2019-11-26T18:30:44Z,2020-02-15T19:23:08Z,kort3x,encladeus;kort3x;LoZeno;hoshinomahiro;DHowett-MSFT;Elevate08;ajaykumarkannan;BundyB;Aarklendoia;LuanVSO;moswald;SkyTrix,zadjii-msft,DHowett-MSFT,DHowett-MSFT,,kort3x,
microsoft/terminal,3729,"Alt arrow keys do nothing; key unbinding broken? <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version:  0.7.3291.0

Any other software?
- Ubuntu 16.04.3 LTS
- byobu version 5.106
- tmux 2.1
```
# Note

This issue is a follow-on to #3101.  In that issue superfluous keys were being generated.  Now it appears no keys are being generated.  Alt arrows are dead to me.

# Steps to reproduce

- Start Byobu:  byobu
- Create a new Byobu tab:  F2
- Press alt left or alt right to switch between the tabs

# Expected behavior

Byobu switches between the two tabs.

# Actual behavior

Nothing happens.
",zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2019-11-27T05:11:32Z,2020-03-18T17:52:44Z,paulwhiting,paulwhiting;sivaramn;DHowett-MSFT;yveslange;zadjii-msft;onefuncman;samba2;demfabris;finlaybob,DHowett-MSFT,DHowett-MSFT,,,paulwhiting,
microsoft/terminal,3743,"suppressApplicationTitle doesn't seem to work in all cases # Environment

```none
Windows build number: Version 10.0.18363.476
Windows Terminal version: Version: 0.7.3291.0
```

# Steps to reproduce

I created a profile like this:

```json
{
    ""name"": ""VS2017 Developer CMD"",
    ""tabTitle"": ""VS2017 Developer CMD"",
    ""commandline"": ""cmd.exe /k \""C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/Common7/Tools/VsDevCmd.bat\"""",
    ""icon"": ""ms-appx:///ProfileIcons/{0caa0dad-35be-5f56-a8ff-afceeeaa6101}.png"",
    ""suppressApplicationTitle"": true,
    ""startingDirectory"": ""C:/Source""
},
```

# Expected behavior

The title of the tab should be `VS2017 Developer CMD`.

# Actual behavior

The title of the tab is `VS2017 Developer CMD - C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/Common7/Tools/VsDevCmd.bat`

![Knipsel](https://user-images.githubusercontent.com/3225656/69727651-40fbe900-1123-11ea-9428-e760e9cf37e0.png)

",cinnamon-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix,2019-11-27T13:38:50Z,2019-12-04T22:57:45Z,ffes,4k3or3et,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,carlos-zamora,
microsoft/terminal,3745,"Needs to input twice to insert a single Chinese symbol # Environment

```none
Windows build number: 18363.476
Windows Terminal version (if applicable): 0.7.3291.0
```

# Steps to reproduce
1. switch to Microsoft Chinese Input Method
2. press `shift` + `/` to insert a Chinese `閿涚剫

# Expected behavior
`閿涚剫 successfully inserted

# Actual behavior
I have to press `shift` + `/` twice to insert a single `閿涚剫

Same problem with other Chinese symbols, such as `閵嗗グ, `閵嗗獖, `閵嗘亝, `閵嗘叢 and etc.",leonMSFT;lhecker,Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-1,2019-11-27T14:00:25Z,2020-03-12T15:28:57Z,hez2010,spindensity;mkitzan;zadjii-msft;lhecker;leonMSFT;zyy1998;Lemmingh,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,leonMSFT,
microsoft/terminal,3782,"Keybindings ""copy"" and ""copyTextWithoutNewlines"" seem to have opposite behaviors <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 19033.1
Windows Terminal version (if applicable): 0.7.3291.0

Any other software? WSL
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
1. Set keybindings as following:
```json
    ""keybindings"": [
        { ""command"": ""copy"", ""keys"": [ ""ctrl+c"" ] },
        { ""command"": ""copyTextWithoutNewlines"", ""keys"": [ ""ctrl+shift+c"" ] }
]
```

2. copy multiple lines of text from terminal with ""ctrl+c"", paste to notepad
3. copy multiple lines of text from terminal with ""ctrl+shift+c"", paste to notepad

# Expected behavior

Step 2 should paste texts with line breaks
Step 3 should paste texts without line breaks (one line with a lot of spaces)

# Actual behavior
Step 2 results in one line of texts
Step 3 results in multiple line of text
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Priority-1,2019-11-29T23:39:49Z,2019-12-04T00:27:56Z,MichaelTong,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,3788,"Increase Font With CTRL + not working on German keyboard # Environment

```none
Windows build number: Version 10.0.18363.476
Windows Terminal version (if applicable):  0.7.3291.0
```
German Windows 10 with German keyboard layout.

# Steps to reproduce
- open a Powershell or Ubuntu Window
- press CTRL + ""-"" to decrease the font size -> works as expected
- press CTRL + ""+"" -> nothing happens

# Expected behavior
- the font size should increase agin

# Actual behavior
The font size stays unchanged.
",carlos-zamora;DHowett-MSFT,Resolution-Won't-Fix;Help Wanted;Issue-Bug;Area-Settings;Product-Terminal;Priority-1,2019-11-30T20:36:04Z,2020-03-24T22:33:09Z,samba2,Migod11;nwaelti;carlos-zamora;einarpersson;kort3x;DHowett-MSFT;VikingScientist;unageek;padelt,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,DHowett-MSFT,,carlos-zamora,
microsoft/terminal,3791,"Text Cursor Indicator does not move with cursor 
# Environment

```none
Windows build number: 10.019033.0
Windows Terminal version (if applicable): 0.7.3291.0

Any other software? -
```

# Steps to reproduce

Turn text cursor indicator in windows settings, and start wt

# Expected behavior


Text Cursor Indicator follows text cursor, works fine in Windows Console

# Actual behavior

Text cursor is displayed, but does not follow cursor
<img width=""455"" alt=""Annotation 2019-12-01 085324"" src=""https://user-images.githubusercontent.com/17233518/69911484-6edf7700-141c-11ea-973c-573d6e24696b.png"">

",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Area-Accessibility;Product-Terminal;Priority-2,2019-12-01T08:26:48Z,2020-03-18T18:01:06Z,Migod11,DHowett-MSFT;shanselman,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,3827,"Thread race condition on refreshing the screen and listening to keyboard signal? I use WSL Ubuntu 18.04.
I wrote a program that dumps tons of logs to stdout and I want to use `<Ctrl-C>` to terminate this program.

Then it does not work, it seems the main thread is too busy (refreshing the screen logs) to listen to `<Ctrl-C>` signal.",zadjii-msft,Area-Performance;Area-Input;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Resolution-No-Repro;Priority-1,2019-12-04T05:03:35Z,2020-04-16T05:08:50Z,were,zadjii-msft;were,DHowett-MSFT;cinnamon-msft;zadjii-msft,DHowett-MSFT;zadjii-msft,zadjii-msft,,were,
microsoft/terminal,3839,"Followup from suppressApplicationTitle PR #3837 > er, this is not in the right place and will never trigger 棣冩М 
> 
> It needs to be after line 98, `UpdateSettings`, because these values are never being set to anything otherwise..
> 
> _Originally posted by @DHowett-MSFT in https://github.com/microsoft/terminal/pull/3837_",cinnamon-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-12-04T23:37:29Z,2019-12-06T17:50:28Z,DHowett-MSFT,,zadjii-msft,DHowett-MSFT,DHowett-MSFT,,cinnamon-msft,
microsoft/terminal,3848,"Weird blue selection after closing neovim (WSL) # Environment

```none
Windows build number: Microsoft Windows Version 10.0.18362.476
Windows Terminal version: microsoft-windows-terminal 0.7.3291.0
```

# Steps to reproduce

1. Open terminal in wsl mode
2. Open neovim
3. Resize the window
4. Quit neovim 

# Actual behavior

A weird blue ""selection"" appears
`clear` gets rid of it

![blue](https://user-images.githubusercontent.com/35227426/70251754-6a9abd00-1780-11ea-86cd-8390494e3e44.png)",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Area-VT;Issue-Bug;Product-Terminal;Priority-2,2019-12-05T15:58:57Z,2021-04-21T21:34:28Z,schffp,DHowett-MSFT;j4james;mingsxs;zadjii-msft;schffp;s10g;jdebp;jazzdelightsme,DHowett-MSFT;zadjii-msft,DHowett-MSFT,,,,
microsoft/terminal,386,"Bad characters occasionally displayed when writing lots of identical UTF-8 lines * Your Windows build number:  (Type `ver` at a Windows Command Prompt)
Microsoft Windows [Version 10.0.18342.8]
(But this happens on all versions of Windows since at least Windows 7.)

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
In the cmd.exe console, set to code page 65001, type a large UTF-8 file containing hundreds of short lines with just the characters ""鐪夐埀鐪夐埀鐪夐埀鐪夐埀鐪夐埀""

* What's wrong / what should be happening instead:
95% of the lines are displayed correctly, but about 5% contain spurious characters. Ex: ""鐪夐敓鏂ゆ嫹閿熺煫灏栧亾鐪夐埀鐪夐埀鐪夐埀""
This happens with any application, not just cmd.exe's built-in TYPE command. So I suspect this is a bug in the UTF-8 to Unicode conversion routine in the console output handler.
For more details, and files and scripts for reproducing it, see the discussion thread on this forum: https://www.dostips.com/forum/viewtopic.php?f=3&t=9017

",miniksa,Work-Item;Product-Conhost;Area-Output;Issue-Bug;Needs-Tag-Fix;Priority-2,2019-03-12T09:18:14Z,2022-01-04T14:21:46Z,JFLarvoire,zadjii-msft;german-one;DHowett-MSFT;miniksa,zadjii-msft;miniksa;DHowett-MSFT,miniksa,miniksa,,zadjii-msft,
microsoft/terminal,3861,"dx: selection color initialized to bad value, breaks wpf control The DX engine sets the selection color (a `D2D1::ColorF`) to a raw `COLORREF` on construction; implementors that do not override this color will get something strange indeed.

```
R: 0x00
G: 0x00
B: 0x00
A: 0xFFFFFF
```",zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Area-WPFControl,2019-12-06T02:11:54Z,2019-12-06T18:37:56Z,DHowett-MSFT,,DHowett-MSFT;zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,3869,"Unexpected behavior of closeOnExit # Environment

Windows 10 version 10.0.18362.0
Windows Terminal 0.7.3291.0
PowerShell Core version 6.2.3

# Steps to reproduce

Created a manual profile for PowerShell Core (as an automatic profile won't get added when it's installed as a dotnet global tool), like this:

```json
    {
      ""guid"": ""{1ba0ecbe-ee5f-4f20-80fc-c7f3376445ca}"",
      ""name"": ""PowerShell Core"",
      ""commandline"": ""%USERPROFILE%\\.dotnet\\tools\\pwsh.exe"",
      ""startingDirectory"": ""%USERPROFILE%"",
      ""hidden"": false,
      ""fontFace"": ""Cascadia Mono PL"",
      ""fontSize"": 13,
      ""colorScheme"": ""Gruvbox Dark""
    }
```

Create a new PowerShell Core window, then run a native command (.exe) that takes a bit of time to run and then immediately hit `Ctrl+C`.

In my case, I've tested this running both java applications as well as `kubectl get pods --all-namespaces` for my kubernetes cluster.

# Expected behavior

I'd expect the native application to handle the `Ctrl+C`, terminate, and get back to the PowerShell Core prompt.

# Actual behavior

The entire Windows Terminal tab is getting killed, as if the shell had been terminated.

What appears to be going on here is related to the `closeOnExit` setting. My original profile used the default value for this, and apparently, Windows Terminal is mistaking the child process terminating due to `Ctrl+C` as the PowerShell Core shell terminating, so it's killing the tab window.

Setting `closeOnExit: false` seems to work around this, and lets the tab open, but the default behavior is very surprising, and seems like a bug tracking which process terminated.",DHowett,Product-Powershell;Issue-Bug;Area-TerminalConnection;Needs-Tag-Fix;Tracking-External,2019-12-06T14:35:40Z,2021-11-01T13:15:01Z,tomasr,DHowett-MSFT;tomasr;bgshacklett;Kirlac;kolbeck;Dan-J-D;Ennea;Rezrazi;DHowett;zadjii-msft;SoraxOriginali,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,3875,"Title event handler attached to control on tab discards title variable https://github.com/microsoft/terminal/blob/9145903e118bfa3b48749694689aec3a191bc4ac/src/cascadia/TerminalApp/Tab.cpp#L320-L328

I'm trying to make the Telnet and Azure connection types set a title when they start up on the tab.

They're calling the ESC]0;<title>BEL sequence on the output handlers to make it happen.

Turns out that title makes it all the way to here and then is completely discarded in favor of whatever's already on the title.",zadjii-msft,Resolution-Fix-Available;Issue-Bug;Area-TerminalControl;Product-Terminal;Area-CodeHealth;Priority-3,2019-12-06T21:55:35Z,2021-07-13T19:58:12Z,miniksa,miniksa;DHowett-MSFT;zadjii-msft,miniksa;DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,3881,"Windows terminal unbound keys are not being recorded by applications  <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment
Win32NT 10.0.18362.0 Microsoft Windows NT 10.0.18362.0
```none
Any other software?
```
Windows Terminal version `0.7.3291.0`
Vim version `8.1.2102` (Windows vim, not WSL)

# Steps to reproduce
Unbind a key chord the following way:

```
    ""keybindings"" : 
    [        
        {
            ""command"" : ""none"",
            ""keys"" : 
            [
                ""ctrl+shift+up""
            ]
        }
    ]
```


# Expected behavior
The key chord should now be useable by applications running inside the Windows terminal. For example Vim or Emacs.


# Actual behavior
The applications do not receive the key chord at all.

",DHowett-MSFT,Resolution-Duplicate;Area-Input;Issue-Bug;Product-Terminal,2019-12-08T00:08:01Z,2020-01-23T22:33:15Z,maximebl,DHowett-MSFT;maximebl,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,3896,"Dropdown menu no longer displays bound keys again (after #3825) This no longer works. Possible regression from #3825?

![image](https://user-images.githubusercontent.com/14316954/70494962-10706380-1ac2-11ea-9ac6-1dec452b573c.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2019-12-10T04:25:42Z,2019-12-11T04:23:25Z,DHowett-MSFT,,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,3897,"A `{""action"": ""newTab"", ""profile"": ""NameOfProfile""}` binding causes a crash https://github.com/microsoft/terminal/blob/402b7ff0e055a56baa5e9b4ee127b9ed75658191/src/cascadia/TerminalApp/TerminalPage.cpp#L420-L429

```
00 (Inline Function) --------`-------- TerminalApp!winrt::impl::consume_Windows_Foundation_IReference<winrt::Windows::Foundation::IReference<int>,int>::Value+0x4 [E:\BA\22\s\src\cascadia\TerminalApp\lib\Generated Files\winrt\Windows.Foundation.h @ 627] 
01 0000006b`126fda10 00007ffa`9189fc7e TerminalApp!winrt::TerminalApp::implementation::TerminalPage::_OpenNewTab+0xef [E:\BA\22\s\src\cascadia\TerminalApp\TerminalPage.cpp @ 420] 
02 0000006b`126fdb70 00007ffa`91852338 TerminalApp!winrt::TerminalApp::implementation::TerminalPage::_HandleNewTab+0x13e [E:\BA\22\s\src\cascadia\TerminalApp\AppActionHandlers.cpp @ 145] 
```

It is in the ETL generator 閳界櫢绗 ",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2019-12-10T04:30:16Z,2019-12-11T02:04:34Z,DHowett-MSFT,zadjii-msft,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,3907,"SetConsoleScreenBufferSize(something < viewport) crashes ConPTY host 1. A pseudoconsole host is a headless console
2. Headless consoles have no minimum size
3. `SetConsoleScreenBufferSize(new)` checks to make sure the following are true:
   * `new` is within _minimum size_
   * `new` is within _current viewport size_
4. `SetConsoleScreenBufferSize` only does this check if a console is headful (i.e. not headless)

https://github.com/microsoft/terminal/blob/381b11521aaaa9a84eea2a308e65d4c5097cc57d/src/host/getset.cpp#L509-L519

5. When we're attached to a conpty, it _happily_ resizes the buffer to be smaller than the viewport.
6. The next time the whole screen is invalidated (or whenever luck strikes, really), the renderer tries to render the whole viewport, which is now outside the bounds of the buffer.

This part of the check should _probably_ be moved outside of the ""are we headful"" block;
https://github.com/microsoft/terminal/blob/381b11521aaaa9a84eea2a308e65d4c5097cc57d/src/host/getset.cpp#L514-L515

Trivial repro code:

```cpp
#include <Windows.h>
int main(int argc, char *argv[])
{
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleScreenBufferSize(hStdOut, {10,10});
	return 0;
}
```

This purchases a nice plot of land overlooking a cemetery for both WSL interop _and_ Windows Terminal. :smile:",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Server;Issue-Bug;Severity-Crash;Needs-Tag-Fix,2019-12-11T00:23:22Z,2019-12-31T18:29:28Z,DHowett-MSFT,zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,miniksa,
microsoft/terminal,391,"Extra character inserted when writing ~  or ` with vscode and french keyboard layout 


* Your Windows build number: My build is : Microsoft Windows [version 10.0.18362.1]
Using vscode 1.32.3 with conpty enabled.

* What you're doing and what's happening: 
When trying to type some specific character with a french keyboard layout, an extra character (""鑼"") is added. For now I spotted 2 characters, ~ and `.
More precisely, if I press ""alt gr"" and 2 at the same time, a ""鑼"" is added. If I then press space, then I have ""鑼厏"" in the prompt.
If I press ""alt gr"" and seven at the same time, a ""鑼"" is added. If I then press space, then I have ""鑼卄"" in the prompt.

![3Pqo1WSEh2](https://user-images.githubusercontent.com/6413475/54755361-18137380-4be6-11e9-9db4-587e530826d5.gif)


* What's wrong / what should be happening instead:
What should happen is that no ~ is added.
",zadjii-msft,Work-Item;Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-0,2019-03-21T13:32:10Z,2020-04-07T19:22:28Z,vlj,vlj;zadjii-msft;LiHRaM;LRA-QC;fle108;DHowett-MSFT,zadjii-msft;miniksa;cinnamon-msft;DHowett-MSFT,miniksa;DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,3911,"Cancel selection on key press, then discard key press <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement
Currently when cancelling a selection by pressing a key the key gets put on the command line (just like when no selection is going on). I would like to cancel selections without the key I pressed getting through to the terminal. The little selection box is bugging me when I am running some program that I don't want to provide input to, but at the same time I want to remove the selection box.

<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

# Proposed technical implementation details (optional)

<!-- 
A clear and concise description of what you want to happen.
-->
",leonMSFT,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2019-12-11T09:05:54Z,2020-01-31T01:15:37Z,BartXZX,zadjii-msft;DHowett-MSFT;BartXZX,BartXZX;zadjii-msft;DHowett-MSFT;cinnamon-msft,zadjii-msft;DHowett-MSFT;cinnamon-msft,cinnamon-msft,,,
microsoft/terminal,3917,"Panel split background ignores `requestedTheme`, follows system app mode # Environment

```none
Windows build number: 10.0.18362.476
Windows Terminal version (if applicable): 0.7.3382.0
```

# Steps to reproduce

Have Windows configured in ""light mode"", and configure Terminal with `requestedTheme` set to `dark`. Split a tab in two or more panels.

# Expected behavior

The split background should be dark, matching the tabs. The current panel is highlighted with the accent colour.

# Actual behavior

The split background is light, matching the system theme (in particular the ""app mode"" setting), and ignores the `requestedTheme` Terminal setting. Next to a light grey line, the accent colour is less visible.

The opposite is also true: set windows to ""dark mode"", Terminal to ""light mode"", and the splits will follow the system settings.

![image](https://user-images.githubusercontent.com/584584/70645288-9c0dff80-1c3c-11ea-948a-785e9c30e5c8.png)
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2019-12-11T17:36:40Z,2022-12-09T21:26:19Z,dreadnaut,zadjii-msft;dreadnaut;DHowett,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,,,,microsoft/terminal#12356;
microsoft/terminal,3972,"Input goes into different window when changing languages # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18363.535]
Windows Terminal version (if applicable): Version: 0.7.3451.0
```
Windows Terminal was installed by chocolatey.

# Steps to reproduce

1. Open Windows Terminal.
2. Use 闋冩粚姒块煥(The key that switches English <-> Korean) to change input to Korean.
3. Open new window.
4. Type any Korean. (Let's say we input `鑷ч洰姗傚珶`)

# Expected behavior

Of course, Korean characters must be inputed into new window.

# Actual behavior

Sometimes Korean characters are inputed into previous window.
(If you open multiple windows at step 3, input goes into one of the window you open but I'm not sure which one is it.)

This only happens with Korean characters. More precisely, in this bug state all Korean characters will be inputed into previous window and all non-Korean characters such as numbers `123` or symbols `!@#` will be inputed into current window.

# Sometimes?

Yes. Unfortunately, this bug sometimes appears and I couldn't figure out the exact condition. But it happens quite often, and if you failed reproducing bug, you can just try again by opening new window. (You don't have to turn off whole windows terminal, but turning off is better)

This gif shows the bug when you open one window and when you open multiple window.

![ezgif-2-a3982cece4bc](https://user-images.githubusercontent.com/28638469/70863306-1797e580-1f8a-11ea-9990-fd9ec2ddf178.gif)
",leonMSFT,Help Wanted;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-1,2019-12-15T13:48:37Z,2020-03-12T15:02:45Z,CookieHCl,leonMSFT;CookieHCl,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,leonMSFT,,leonMSFT,
microsoft/terminal,3976,"All forms of UIA navigation appear to skip entries when going back and are unable to go forwards <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
- Hook up the WPF control from the dev/zorio/wpf-uia-tree branch into a simple WPF application.
- Print text to the screen (e.g. ""foo bar baz\r\nfoo2 bar2 baz2"")
- Attempt to navigate said text with NVDA
# Expected behavior
Word, character and line navigation should work as expected.
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
All navigation forms appear to skip entries moving backwards and get stuck moving forwards, for example, I have observed the following:

- Reading the line ""foo bar baz"" from right to left as word units ends up reading out ""baz, b, foo""
- Attempting to read the same line left to right reads out ""foo"" continuously.
- Reading the characters in that line will exhibit similar behaviour, unable to navigate rightwards and skipping entries when navigating leftwards.

<!-- What's actually happening? -->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal,2019-12-16T19:22:34Z,2020-01-31T20:59:40Z,ZoeyR,carlos-zamora;ZoeyR,ZoeyR;carlos-zamora,carlos-zamora;DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,3984,"The first keystroke after dismissing the find dialog is eaten ### Repro Steps:

1. Open the find dialog
2. Type some text
3. Press <kbd>esc</kbd> to dismiss the dialog
4. type some characters

### Actual behavior:
The first character typed after dismissing doesn't get sent to the `TermControl`

### Expected
All the characters typed after dismissing the dialog should be sent to the `TermControl`/`TerminalConnection`",KaiyuWang16,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2019-12-17T16:26:37Z,2020-01-02T22:13:05Z,zadjii-msft,KaiyuWang16;DHowett-MSFT;zadjii-msft,zadjii-msft,zadjii-msft;DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,3987,"If the `WslDistroGenerator` takes more than 10s to generate profiles, we should just terminate it I think we're doing a `WaitForSingleObject`, it should be a `WaitForMultipleObjects`, because we're getting like 6% of our crashes are hangs here or something. I forget the exact numbers, but we could do better.
",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Priority-1,2019-12-17T16:26:45Z,2020-03-16T18:14:26Z,zadjii-msft,,zadjii-msft;DHowett-MSFT;cinnamon-msft,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,,,
microsoft/terminal,404,"Rendering of colors introduces small artifact during rendering to the console On Linux the color boxes shown below don't have the  artifact of the very thin black lines separating each color box from each other. 

CMD.exe
![image](https://user-images.githubusercontent.com/4319522/55361456-32323900-54a5-11e9-94a6-78ccc1bcb1cc.png)

compare to running the equivalent code in bash.  
![image](https://user-images.githubusercontent.com/4319522/55362953-8d662a80-54a9-11e9-955c-3ae9563431a8.png)
",miniksa,Product-Conhost;Area-Rendering;Issue-Bug;Needs-Tag-Fix,2019-04-01T22:10:11Z,2020-07-23T01:52:16Z,musm,miniksa;musm;DHowett,miniksa,miniksa,miniksa,,musm,
microsoft/terminal,4061,"Terminal failed to start if ""C:\Program.exe"" exists <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows NT 10.0.18363.0

Windows Terminal version: Version: 0.7.3451.0

A program named ""C:\Program.exe"" by myself
```
Here is the source code of C:\Program.exe
```c
#include <windows.h>
int WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd)
{
    MessageBox(NULL, ""C:\\Program.exe Executed!"", ""Bug"", MB_OK);
    return 0;
}
```
my profile
```json
        {
            ""guid"": ""{58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2530}"",
            ""hidden"": false,
            ""name"": ""Debian"",
            ""fontFace"": ""缁涘庣獩閺囧哥綍姒涙垳缍 SC"",
            ""source"": ""Windows.Terminal.Wsl""
        },
```
# Steps to reproduce

rename the exe to ""Program.exe"" and place it at C:\ then run Windows Terminal

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Windows Terminal starts normally

# Actual behavior

<!-- What's actually happening? -->
C:\Program.exe is executed. And after it exits, Windows Terminal exit with an error

<img width=""101"" alt=""閹规洝骞"" src=""https://user-images.githubusercontent.com/32010059/71454626-8e27b500-27cc-11ea-9b9e-f2e0505b9ba9.PNG"">
<img width=""744"" alt=""閹规洝骞"" src=""https://user-images.githubusercontent.com/32010059/71454670-ccbd6f80-27cc-11ea-8796-ab898147467a.PNG"">
<img width=""333"" alt=""閹规洝骞3"" src=""https://user-images.githubusercontent.com/32010059/71454675-cdee9c80-27cc-11ea-9bb3-f1db0344592e.PNG"">
",DHowett-MSFT,Resolution-Fix-Committed;Product-Conpty;Area-Server;Issue-Bug;Needs-Tag-Fix;Priority-1,2019-12-26T02:53:55Z,2020-01-11T01:48:06Z,everything411,Luuk34;everything411;zadjii-msft;eryksun,zadjii-msft;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,4106,"When changing cursor shape using DECSCUSR escape sequences, the cursor shape doesn't change until the cursor is moved <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): 0.7.3451.0

Any other software?
`pwsh + PSReadLine`
```

# Steps to reproduce

I tried to fix https://github.com/PowerShell/PSReadLine/issues/1233 in PSReadLine by always applying the standard escape sequences, so the cursor shape can be changed when switching between Insert and Command modes in the VI edit mode.

A quick fix looks like this: https://github.com/daxian-dbw/PSReadLine/commit/d29dad98426992c2d9f3b92cebedd7d85c4a0fac
It works fine in the terminals on Linux and macOS.
However, in Windows Terminal and VS Code terminal, the cursor shape doesn't changed immediately after writing out the escape sequences. The change happens only after the cursor is moved.

# Expected behavior

The behavior should be the same as on Linux.
1. type <kbd>Esc</kbd> to switch from insert mode to command mode. Cursor shape is changed to steady block.
2. type <kbd>i</kbd> to switch from command mode to insert mode. Cursor shape is changed to blinking bar.
3. type <kbd>a</kbd> to insert the character `a`.

![linux](https://user-images.githubusercontent.com/127450/71749029-3111ac00-2e29-11ea-9c42-e9bf2fe0febd.gif)

# Actual behavior

This is what happens in Windows Terminal.
1. type <kbd>Esc</kbd> to switch from insert mode to command mode. Cursor shape is changed to steady block.
2. type <kbd>i</kbd> to switch from command mode to insert mode. Cursor shape doesn't change.
3. type <kbd>a</kbd> to insert the character `a`. Cursor shape is changed to blinking bar. Moving the cursor with <kbd>LeftArrow</kbd> or <kbd>RightArrow</kbd> will also trigger the cursor shape change.

![winterminal](https://user-images.githubusercontent.com/127450/71749201-9bc2e780-2e29-11ea-84ba-02804f4be95a.gif)

",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-VT;Issue-Bug;Needs-Tag-Fix;Priority-2,2020-01-03T21:10:48Z,2020-03-12T23:31:46Z,daxian-dbw,zadjii-msft,zadjii-msft;cinnamon-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,411,"Terminal layout issue (column count seems off by one ?) * Your Windows build number:  (Type `ver` at a Windows Command Prompt)
Microsoft Windows [version 10.0.17763.437]

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
using git command line in the terminal in a zsh shell
git command output layout is messed up (seems like the number of column of the terminal is off by one)
![git_messed](https://user-images.githubusercontent.com/13847288/56122214-2600ae00-5f72-11e9-83c7-dd795fd0db70.PNG)

* What's wrong / what should be happening instead:
Wen I open a Ubuntu terminal with WSL, the git commend output layout is messed up. I have to use `reset` and it fixes the layout in the following commands.",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Area-Output;Area-VT;Issue-Bug;Needs-Tag-Fix;Priority-2,2019-04-15T10:13:17Z,2019-09-19T20:23:08Z,AloyseTech,j4james;zadjii-msft;AloyseTech;DHowett-MSFT,miniksa;zadjii-msft,miniksa,,,zadjii-msft,
microsoft/terminal,4116,"ConPTY pass-through sequences are being truncated # Environment

Windows build number: Version 10.0.18362.418
Windows Terminal version (if applicable): commit d711d731d7d00259b2e0fe5847928c9f1c1121ed

# Steps to reproduce

1. Open a bash shell in Windows Terminal
2. Execute the sequence: `printf ""\e[?999h 12345 Hello World""`

# Expected behavior

999 isn't a supported mode, so that should be ignored and passed through to the conpty client. Then the text ` 12345 Hello World` should be output.

# Actual behavior

The unrecognized mode sequence gets truncated, losing the final character. and then the start of the text that is output is also truncated, leaving just `ello World`.

What's happening is that the missing character leaves the state machine in a state where it's waiting for a final character, so it ends up eating the characters that follow, until it gets to the `H` in `Hello World`.

I believe this is a regression caused by PR #3956. I think it's the calculation of the `_run` variable that is off by 1, but it may be more complicated than that:

https://github.com/microsoft/terminal/blob/d711d731d7d00259b2e0fe5847928c9f1c1121ed/src/terminal/parser/stateMachine.cpp#L1252

Also note that `_run` is initialized in more than one place.",miniksa,Resolution-Fix-Committed;Product-Conpty;Area-VT;Issue-Bug;Severity-Blocking;Priority-1,2020-01-05T16:52:54Z,2020-01-08T19:16:50Z,j4james,j4james;miniksa,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,4118,"Issues pasting into the new terminal.  # Environment

Windows build number: 10.0.18362.535
Windows Terminal version (if applicable): 0.7.3451.0

# Steps to reproduce

1. Open the program
2. Open a new Ubuntu terminal tab
3. Go to another piece of software (Can be anything like a browser, notepad etc) and copy a string.
4. Paste into the new terminal tab. 

# Expected behavior

The string would be pasted into the terminal tab instantly

# Actual behavior

The is either a delay of 1-4s before the string gets pasted into the terminal or it doesnt get pasted at all. 

# Other comments

I have reproduced this bug on a self built computer, surface book 2 and a surface laptop 3. 
",leonMSFT,Help Wanted;Needs-Repro;Area-Interaction;Issue-Bug;Needs-Author-Feedback;No-Recent-Activity;Product-Terminal;Priority-2,2020-01-05T17:38:43Z,2020-03-27T10:00:18Z,martinowren,zadjii-msft;martinowren;DHowett-MSFT;cinnamon-msft;ZhaoMJ,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,,
microsoft/terminal,412,"Reports of native crashed using ConPTY under Windows 32-bit (Build 18362 and 18877) We got 2 reports of VS Code crashing by simply opening the terminal when ConPTY is enabled, switching to winpty fixes the issue: https://github.com/Microsoft/vscode/issues/72190",DHowett-MSFT,Area-Interop;Needs-Repro;Resolution-External;Product-Conpty;Issue-Bug,2019-04-17T19:37:38Z,2019-05-30T17:35:44Z,Tyriar,DHowett-MSFT;Tyriar;oising;ZoeyR,DHowett-MSFT,,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,4131,"[REGR #3956] Terminal incorrectly splits part of escape sequence # Environment 

```none
Windows build number: 10.0.19041.0
Windows Terminal version (if applicable): Dev build @ 4882917
    Fix flipped sense in TerminalDispatch::CursorPosition (#4113)

Any other software?

PowerShell: 7.0.0-rc.1 and PowerShell 6.1.3
oh-my-posh: 2.0.342
```

# Steps to reproduce

```powershell
# Start powershell

# Install posh-git from the gallery
Install-Module posh-git -Scope CurrentUser

# Install oh-my-posh from the gallery, enter Y or A at the prompt
Install-Module oh-my-posh -Scope CurrentUser

# Load the oh-my-posh module
Import-Module oh-my-posh

# Set the theme to Paradox
Set-Theme Paradox
```

# Expected behavior

Prompt is printed cleanly (as seen in the store release v0.7.3451.0):

![image](https://user-images.githubusercontent.com/1771233/71899502-e003ff80-3129-11ea-9ea1-21294335aadf.png)

# Actual behavior

Right-most character of prompt is cut off (see timestamp) and part of an escape sequence has bled back to the beginning of the line (see ""97ms""):

![image](https://user-images.githubusercontent.com/1771233/71899610-180b4280-312a-11ea-8145-f1a6ae90cb5e.png)

The existing prompt corrects itself after resizing the window, but subsequent prompts repeat the behavior:

![image](https://user-images.githubusercontent.com/1771233/71899684-38d39800-312a-11ea-9a9d-b7f42753ee94.png)

This happens at any buffer size

# Related Issues

Possibly related to #4037 (seems to be splitting an escape sequence) and/or #635 (although the ""snap back"" behavior is not exhibited)?",miniksa,Resolution-Duplicate;Product-Conpty;Area-VT;Issue-Bug;Severity-Blocking,2020-01-07T13:51:45Z,2020-01-08T19:17:36Z,Sidneys1,DHowett-MSFT;miniksa;Sidneys1;zadjii-msft,DHowett-MSFT;miniksa,,miniksa,,miniksa,
microsoft/terminal,4148,"Tabbed IME fails to insert symbols with a chinese input method # Environment

```none
Windows build number: 19041.1
Windows Terminal version (if applicable): `911a9dd`
```

# Steps to reproduce

* Use a `Chinese (Simplified, China)` input method (with a `Microsoft Pinyin` keyboard 閳 the default)
* Open the tabbed IME using <kbd>Win</kbd><kbd>.</kbd>
* Insert a few symbols from the symbol tab
* Defocus/Close the IME
* Bring up the Chinese/Pinyin IME again by pressing any keyboard key
* Insert a Chinese character

# Expected behavior

All characters are inserted instantly into the shell prompt.

# Actual behavior

Characters aren't inserted until you defocus/close the IME and bring it up again by pressing a regular keyboard key. [Demo](https://drive.google.com/file/d/1xh-Y7j4l2Ns1oudhNoGu_3ESSFN4NhPj/view)
",leonMSFT,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Product-Terminal;Priority-1,2020-01-08T17:08:18Z,2020-02-26T18:36:03Z,lhecker,,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,leonMSFT,,,
microsoft/terminal,4166,"We're not sizing the drag handle correctly all the time; it cuts off parts of the window sometimes <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

Windows Version: 10.0.19041.0 (""slow ring"" is enabled)

![image](https://user-images.githubusercontent.com/603112/72106066-c1775180-333f-11ea-94a8-6b3341278541.png)

Terminal Version (0.7.3451.0); from the Windows Store

![image](https://user-images.githubusercontent.com/603112/72106171-e966b500-333f-11ea-925b-5a1df34c1899.png)

Native resolution: 2560 x 1440 (14"" Lenovo X1 Carbon); scaling set at 125% (changed from 150% during this issue).

# Steps to reproduce

Change the scaling ratio on your screen.

# Expected behavior

Terminal window scales / adjusts automatically (which happens), but the controls for minimizing / maximizing disappear.

_Honestly, not sure what is the expected behavior as many apps don't adjust properly, but after opening a new window, existing window at random starts showing the controls is why I raised this issue._

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

(two instances I had open, when I changed the scaling ratio)

![image](https://user-images.githubusercontent.com/603112/72105865-65143200-333f-11ea-8581-1d4aed137392.png)

After opening a new window, randomly, the first window starts showing the minimize/maximize controls.

![image](https://user-images.githubusercontent.com/603112/72105987-9a208480-333f-11ea-8101-ffbdc3877430.png)

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-3,2020-01-09T21:32:40Z,2020-03-06T22:14:36Z,burhan,DHowett-MSFT;zadjii-msft,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,zadjii-msft,DHowett-MSFT,
microsoft/terminal,4201,"Control-Alt-z is sending the code for Control-z when i type (in emacs) control-alt-z (C-M-z) the terminal interprets it as control-z.

i can type other C-M combos. for eaxmple C-M-f is different from C-f.
but it doesn't work for C-M-z. i can get the right behavior using:
ESC (and release) and then pressing C-z

curiously it does work properly in the regular wsl.exe application.



",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-2,2020-01-13T21:34:59Z,2020-03-16T16:59:49Z,amareshjoshi,zadjii-msft,DHowett-MSFT;zadjii-msft;cinnamon-msft,DHowett-MSFT;zadjii-msft,zadjii-msft,,,
microsoft/terminal,4224,"fullscreen from maximized still doesn't work properly; title bar issue? cutout region issue? # Environment

```none
Windows build number: Windows 10 1909 build 18363.535
Windows Terminal version (if applicable): 0.8.10091.0
shell:powershell
```

# Steps to reproduce

1.launch windows terminal
2.maximize windows terminal
2.press ctrl+enter into fullscreen mode

# Expected behavior
terminal should be a maximize state

# Actual behavior

but title bar has error state in fullscreen
![閹佃勬暈 2020-01-15 090830](https://user-images.githubusercontent.com/34188127/72396146-b2950280-3776-11ea-85a7-41eec0cab634.png)

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-2,2020-01-15T01:11:08Z,2020-03-13T22:20:39Z,0xcaffebabe,Tr4pSec;zadjii-msft;drk-mtr,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,4226,"Korean IME does not work as expected # Environment

```none
Windows build number: Windows 10 2004 19041.21
Windows Terminal version (if applicable): 0.8.10091.0

Any other software?
```

# Steps to reproduce

- Run Windows PowerShell tab
- Typing text `$x = '闋冩粔绔'`

![image](https://user-images.githubusercontent.com/1297346/72399443-8afb6580-3789-11ea-8503-b078fe857f6b.png)

# Expected behavior

- The resulted text should be `$x = '闋冩粔绔'`

# Actual behavior

- But the resulted text was `$x = '闋冩粔鐘閵婃爣绔'`
",leonMSFT,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2020-01-15T02:25:42Z,2020-03-04T20:01:02Z,rkttu,yjh0502;zadjii-msft;simnalamburt;DHowett-MSFT;leonMSFT;rkttu;cupsos;ioklo;hatsunearu,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,,
microsoft/terminal,4254,"Neofetch in wsl2(debian) crashes the terminal <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 19041.21
Windows Terminal version (if applicable):  0.8.10091.0

Any other software?
Debian in WSL2
```

# Steps to reproduce
 1) Open terminal (has wsl2 as default shell)
 2) run neofetch

<!-- A description of how to trigger this bug. -->

# Expected behavior
 To show the output of neofetch
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
 Terminal crashes without any output
<!-- What's actually happening? -->
",miniksa;zadjii-msft,Product-Conhost;Resolution-Fix-Available;Area-VT;Issue-Bug;Priority-2,2020-01-16T05:03:37Z,2021-07-13T18:06:49Z,Nithsua,aoahonen;nizmow;miniksa;j4james;PratesM;skyline75489;MinchinWeb;ckrailo;rashil2000;mkitzan;sgtnasty;finia2NA;zadjii-msft;armak;DHowett-MSFT;ntnlabs;ZhaoMJ,zadjii-msft,,,,zadjii-msft,
microsoft/terminal,4255,"Duplicate copyOnSelect actions <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

Platform ServicePack Version      VersionString
-------- ----------- -------      -------------
 Win32NT             10.0.18362.0 Microsoft Windows NT 10.0.18362.0

Windows Terminal Version 0.8.10091.0

# Steps to reproduce

Open WSL Ubuntu terminal
Select a block on text with copyOnSelect enabled (for example ""TEST1"")
  Ensure block of text remains highlighted
Switch to notepad instance
Paste selected text into Notepad
Make some change to text, (for example change string to ""TEST999"")
Copy string inside Notepad
Highlight Windows Terminal
Paste string into Windows Terminal

# Expected behavior

TEST999 is pasted into Windows Terminal window

# Actual behavior

TEST1 is pasted into Windows Terminal window

# Notes

It appears that each time the window is made active, a new copyOnSelect action is performed if there is some text previously highlighted. I would expect the Terminal to only perform the copy operation the very first time the text is highlighted.
",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Area-TerminalControl;Product-Terminal;Severity-DataLoss;Priority-0,2020-01-16T11:06:49Z,2020-02-20T18:30:11Z,maguiresf,,DHowett-MSFT;cinnamon-msft,DHowett-MSFT;cinnamon-msft,leonMSFT,,,
microsoft/terminal,4282,"Behaviour of click-and-drag text selection depends inconsistently on prior pane and application focus state # Environment

```none
Windows build number: 10.0.18363.592
Windows Terminal version: 0.8.10091.0
```

NB: I have copy-on-select enabled, although I suspect it doesn't matter.

# Steps to reproduce

 1. Open a tab with one pane.
 2. Remove focus from windows terminal (i.e. focus another app).
 3. Click and drag to select some text in the terminal. Notice that this first click focused the window, but didn't select anything.
 4. Click and drag again to select some text in the terminal. Now the text is selected.

The need for step 4 isn't ideal (other apps don't work this way), but it is reasonably intuitive and easy to recover from. But let's see what happens when we have two panes open and we try to select the ""wrong"" one:

 1. Open a second pane in the same tab.
 2. Remove focus from the terminal. Notice how one pane stays selected/""focused"" even if the window as a whole lacks focus.
 3. Click and drag to select some text in the terminal *in the original (deselected) pane*. Like the single-pane case, the first click focused the terminal window, but nothing else happened.
 4. Click and drag again in the deselected pane. Still nothing happens. 
 5. Get annoyed, single click the pane to focus it, then select the text you wanted.

I've also noticed that, once an unfocused pane has a selection, clicking and dragging in that pane seems to ignore the click point (perhaps it never gets the click event?) and treat the drag as a continuation of the prior selection.

# Expected behavior

I should be able to select text by clicking and dragging over it:
 * regardless of the prior focus state of the pane I'm selecting in
 * regardless of the prior focus state of the terminal window
 * regardless of what was previously selected (i.e. a new click-drag should always start a new selection)

# Actual behavior

Described above.

The fact that each pane has its own selection (so you can select text concurrently in multiple panes) might be a useful feature, but it seems to cause a lot of strange inconsistencies with text selection and copy/paste.",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-3,2020-01-17T19:02:17Z,2020-02-13T00:32:50Z,0xabu,DHowett-MSFT;carlos-zamora,DHowett-MSFT;carlos-zamora,DHowett-MSFT;carlos-zamora,DHowett-MSFT;carlos-zamora,carlos-zamora,,
microsoft/terminal,4288,"Maximize and minimize window buttons incorrect rendering <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable):0.8.10091.0
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Minimize the Windows Terminal window
2. Open enough terminal tabs to fill tabs space without tabs being resized.
3. Maximize the Windows Terminal window with the window maximize button.
4. Minimize the Windows Terminal window with the window minimize button.
5. Get an incorrect rendering of the minimize and maximize buttons.

On step 2 you will probably need to play with the Windows Terminal window size to reproduce the issue. For some window sizes, it renders normally and for some not. If you add too many terminal tabs the issue is not reproducible.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Normal rendering of the window minimize and maximize buttons after minimizing the Windows Terminal window

# Actual behavior

<!-- What's actually happening? -->
See attached screenshots.
![image](https://user-images.githubusercontent.com/5882133/72663459-b2f1ff80-39fb-11ea-9dcf-2bc9a423e47f.png)
![image](https://user-images.githubusercontent.com/5882133/72663470-c9985680-39fb-11ea-883a-5c781926e60a.png)
![image](https://user-images.githubusercontent.com/5882133/72663479-d9179f80-39fb-11ea-8504-c83ad35e4878.png)



",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-2,2020-01-18T12:08:14Z,2020-03-09T17:54:34Z,JekRock,zadjii-msft;DHowett-MSFT;greg904,zadjii-msft;cinnamon-msft,DHowett-MSFT;cinnamon-msft,,,DHowett-MSFT,
microsoft/terminal,4299,"Using the wrong data type for a setting in profiles.json gives misleading ""Missing '}' or object member name"" error <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.0
Windows Terminal version (if applicable): 0.8.10091.0


Any other software? 
```

# Steps to reproduce

1. Edit profiles.json
2. Add a setting value with an inappropriate data type, eg:
```
{
  // ...
  ""profiles"": [
    {
      ""guid"": ""..."",
      // ...
      ""fontSize"": ""12""  // <-- string instead of number
    }
  ]
}
```

# Expected behavior
The 'Failed to reload settings' message box should present a message explaining that the offending setting has the wrong type.

# Actual behavior

The 'Failed to reload settings' message box presents the following:
> Settings could not be reloaded from file. Check for syntax errors, including trailing commas.
> * Line 34, Column 9
>   Missing '}' or object member name
> Temporarily using the Windows Terminal default settings.
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Priority-2,2020-01-19T23:06:19Z,2020-03-20T20:35:52Z,icheatatlan,zadjii-msft,zadjii-msft;cinnamon-msft,cinnamon-msft,zadjii-msft,,,
microsoft/terminal,4385,"10X Terminal concatenates early input with ""cls"" command <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Windows 10X build 19553
Windows Terminal version (if applicable): 0.8.3521.0
```

# Steps to reproduce

I launched the Windows Terminal Universal (Preview) app, and as it launched I started typing, beginning with the letters ""cm"".

# Expected behavior


# Actual behavior

The first thing the Terminal displayed was

```
M:\windows\system32>cmcls
'cmcls' is not recognized as an internal or external command, operable program or batch file.
```

Evidently Terminal likes to start things off with a ""cls"" to clear the screen, but if you type too early, your input gets concatenated with the secret cls command.",miniksa,Issue-Bug;Area-TerminalConnection;Product-Terminal;Needs-Tag-Fix;Priority-3,2020-01-28T20:45:55Z,2021-12-09T16:07:58Z,bviglietta,miniksa;zadjii-msft,miniksa,miniksa,miniksa,,zadjii-msft,
microsoft/terminal,4434,"Can't type with IME in the search widget <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.592
Windows Terminal version (if applicable): 0.8.10261.0


Any other software? Microsoft Pinyin (Default zh-CN IME)
```

# Steps to reproduce
<!-- A description of how to trigger this bug. -->
Type in the search widget with Microsoft Pinyin

# Expected behavior
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Characters typed are in the search widget.

# Actual behavior
<!-- What's actually happening? -->
Characters typed are in the terminal.
",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2020-02-01T09:22:10Z,2020-02-26T19:28:02Z,flamott,,carlos-zamora;DHowett-MSFT,carlos-zamora;DHowett-MSFT,leonMSFT,,,
microsoft/terminal,4437,"ParseSplitPaneIntoArgs unit test is failing # Environment

Windows build number: Version 10.0.18362.535
Windows Terminal version (if applicable): Commit 55b638801b0eac586f0a3db00e8a375655f8ead0

# Steps to reproduce

1. Build the _OpenConsole_ solution.
2. Run the unit tests with the `runut.cmd` script.

# Expected behavior

All the tests should pass.

# Actual behavior

The `CommandlineTest::ParseSplitPaneIntoArgs` test fails on [line 593](https://github.com/microsoft/terminal/blob/3487664cb0068d49b930e9524d1641bae55a32a9/src/cascadia/LocalTests_TerminalApp/CommandlineTest.cpp#L593) with the message:

```
Error: Verify: AreEqual(SplitState::Vertical, myArgs.SplitStyle()) - Values (1, 4294967295) [File: \terminal\src\cascadia\LocalTests_TerminalApp\CommandlineTest.cpp, Function: TerminalAppLocalTests::CommandlineTest::ParseSplitPaneIntoArgs, Line: 593]
EndGroup: TerminalAppLocalTests::CommandlineTest::ParseSplitPaneIntoArgs [Failed]
```

That particular error looks to me like a mistake in the test itself. If the command line doesn't include a specific style, I would expect the style to be `SplitState::Automatic`. I'm guessing this is the result of a change in behavior as the code evolved. And I believe the tests on [line 653](https://github.com/microsoft/terminal/blob/3487664cb0068d49b930e9524d1641bae55a32a9/src/cascadia/LocalTests_TerminalApp/CommandlineTest.cpp#L653) and [line 707](https://github.com/microsoft/terminal/blob/3487664cb0068d49b930e9524d1641bae55a32a9/src/cascadia/LocalTests_TerminalApp/CommandlineTest.cpp#L707) will fail for the same reason.

Even with those cases fixed, though, there is still a failure which I think is an indication of a real bug in the code. The test on [line 633](https://github.com/microsoft/terminal/blob/3487664cb0068d49b930e9524d1641bae55a32a9/src/cascadia/LocalTests_TerminalApp/CommandlineTest.cpp#L633) is failing because it's expecting the style to be `Vertical` but the return value is `Automatic`. The code that is to blame is in the `AppCommandlineArgs::_buildSplitPaneParser` method:

https://github.com/microsoft/terminal/blob/b6ec670bd8cf8ac7f6f7e67ac28a0210ba56b2c8/src/cascadia/TerminalApp/AppCommandlineArgs.cpp#L220-L230

There are two problems with this code. The first is that the initial branch isn't even passed unless `_splitHorizontal` is true, so the `_splitVertical` case is never handled. The second is that even with that fixed, the `_splitVertical` case will end up setting the style to `Horizontal` rather than `Vertical`.",zadjii-msft,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-CodeHealth;Area-Commandline,2020-02-01T23:50:54Z,2020-08-21T12:50:51Z,j4james,DHowett-MSFT;zadjii-msft,DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,zadjii-msft,
microsoft/terminal,4476,"[ui] Inconsistent ""cmd"" in new tab context menu I just installed the most recent update from Releases.

Note the available shell names: ""Windows PowerShell"", ""cmd"", ""Ubuntu-18.04"", ""Azure Cloud Shell"" and how ""cmd"" is the only one not capitalized and not a proper word. Shouldn't it be ""Command Prompt"" or ""Command Prompt (cmd)""? It is a well-known everywhere-existing shell. It would be nice if it is named consistently.

![image](https://user-images.githubusercontent.com/1041752/73861695-acf28000-483d-11ea-9e49-6e3ebae6fc30.png)",cinnamon-msft;DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Area-Accessibility;Area-Settings;Product-Terminal;Needs-Tag-Fix,2020-02-05T16:34:52Z,2020-04-08T20:41:59Z,vadimkantorov,DHowett-MSFT;vadimkantorov,DHowett-MSFT,DHowett-MSFT,cinnamon-msft,,DHowett-MSFT,
microsoft/terminal,4482,Crash when closing a window containing multiple tabs It looks like it tries to focus a tab that doesn't exist.,leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal,2020-02-05T19:02:16Z,2020-02-11T22:18:39Z,DHowett-MSFT,,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,4485,"Terminal hangs when navigating (back?) by word in Narrator # Environment

```none
Windows build number: Vb
Windows Terminal version (if applicable): 0.9.362.0
```

# Steps to reproduce

Navigate by word.

# Expected behavior

It does not hang.

# Actual behavior

It hangs rather a lot.

We may have a long (very long) loop in...

```
00 (Inline Function) --------`-------- TerminalControl!Microsoft::Console::Types::Viewport::{ctor}+0x5 [E:\BA\19\s\src\types\Viewport.cpp @ 10] 
01 (Inline Function) --------`-------- TerminalControl!Microsoft::Console::Types::Viewport::FromInclusive+0x5 [E:\BA\19\s\src\types\Viewport.cpp @ 26] 
02 (Inline Function) --------`-------- TerminalControl!Microsoft::Console::Types::Viewport::FromExclusive+0x20 [E:\BA\19\s\src\types\Viewport.cpp @ 34] 
03 (Inline Function) --------`-------- TerminalControl!Microsoft::Console::Types::Viewport::FromDimensions+0x33 [E:\BA\19\s\src\types\Viewport.cpp @ 63] 
04 000000e7`190fdab0 00007fff`15a954ee TerminalControl!TextBuffer::GetSize+0xc1 [E:\BA\19\s\src\buffer\out\textBuffer.cpp @ 663] 
05 000000e7`190fdb00 00007fff`15a8dfd2 TerminalControl!TextBufferCellIterator::TextBufferCellIterator+0xee [E:\BA\19\s\src\buffer\out\textBufferCellIterator.cpp @ 43] 
06 (Inline Function) --------`-------- TerminalControl!TextBufferCellIterator::{ctor}+0x1e [E:\BA\19\s\src\buffer\out\textBufferCellIterator.cpp @ 23] 
07 (Inline Function) --------`-------- TerminalControl!TextBuffer::GetCellDataAt+0x1e [E:\BA\19\s\src\buffer\out\textBuffer.cpp @ 119] 
08 (Inline Function) --------`-------- TerminalControl!TextBuffer::GetTextDataAt+0x1e [E:\BA\19\s\src\buffer\out\textBuffer.cpp @ 108] 
09 000000e7`190fdb80 00007fff`15a89fe1 TerminalControl!TextBuffer::MoveToNextWord+0x122 [E:\BA\19\s\src\buffer\out\textBuffer.cpp @ 1219] 
0a 000000e7`190fdc90 00007fff`15a8926b TerminalControl!Microsoft::Console::Types::UiaTextRangeBase::_moveEndpointByUnitWord+0x1d1 [E:\BA\19\s\src\types\UiaTextRangeBase.cpp @ 1129] 
0b 000000e7`190fdd60 00007fff`15a7d127 TerminalControl!Microsoft::Console::Types::UiaTextRangeBase::Move+0xbb [E:\BA\19\s\src\types\UiaTextRangeBase.cpp @ 680] 
```",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Product-Terminal,2020-02-05T22:45:53Z,2020-02-10T23:23:20Z,DHowett-MSFT,carlos-zamora;DHowett-MSFT,DHowett-MSFT;carlos-zamora,carlos-zamora,carlos-zamora,,,
microsoft/terminal,4519,"PR  #3429 broke PublicTerminalCore.dll on Windows 7 <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Windows 7 SP1
Windows Terminal version (if applicable): N/A

Any other software?
```

# Steps to reproduce
Build PublicTerminalCore.dll and run it through depends.exe
<!-- A description of how to trigger this bug. -->

# Expected behavior
The referenced dlls should be the same before this PR as after.
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
PublicTerminalCore now references many dlls which are not available downlevel (specifically the forwarder dlls)
<!-- What's actually happening? -->
",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-1;Area-WPFControl,2020-02-10T18:48:55Z,2020-02-10T20:35:32Z,ZoeyR,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,453,"Setting historySize=32767 causes WindowsTerminal to hang. This bug-tracker is monitored by Windows Console development team and other technical types.  **We like detail!**

If you have a feature request, please post to [the UserVoice](https://wpdev.uservoice.com/forums/266908).  

> **Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**. Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible

* Your Windows build number:  Microsoft Windows [Version 10.0.18885.1001]

* What you're doing and what's happening: Setting historySize to 32767 (0x7FFF) via profile.json settings. I tried 32766 and that also failed, but 32000 was fine. So something on the fringes there is busted.

* What's wrong / what should be happening instead: The console hangs and subsequent attempts to open it also cause hangs.

",metathinker,Issue-Bug;Area-Settings;Severity-Crash;Product-Terminal,2019-05-07T02:31:53Z,2019-05-18T03:57:35Z,doubleyewdee,zadjii-msft,zadjii-msft;miniksa,miniksa,zadjii-msft,,,
microsoft/terminal,455,"Remember to have block and line drawing characters fill their cells properly Just a reminder for the new Windows Terminal, remember to make sure block and line drawing characters fill their cells properly at all zoom levels.
This is really important for ANSI-art and TUI apps.

![ANSIart conhost](https://user-images.githubusercontent.com/25664275/57269801-20861780-7089-11e9-8436-34c5525b3024.png)
![ANSIart WinTerm1](https://user-images.githubusercontent.com/25664275/57269804-22e87180-7089-11e9-9a40-b35e9d0fe89f.png)
![ANSIart WinTerm2](https://user-images.githubusercontent.com/25664275/57269808-254acb80-7089-11e9-9ceb-b074cc27d1cc.png)

See color bleeding and horizontal lines in the larger Windows Terminal tab.
Also, some characters are randomly replaced by 閿 (<?>) characters when changing zoom level or when printing out lot of VT markup.",miniksa,Resolution-Fix-Committed;Area-Rendering;Area-Output;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2019-05-07T03:32:11Z,2020-05-08T21:09:33Z,PhMajerus,zadjii-msft;PhMajerus;shanselman;vblazhkun;DHowett-MSFT;egmontkob;mdtauk;iscooool;sywesk;tryptamic;SiarheiKuchukBelitsoft;miniksa;heaths;ghosty141,zadjii-msft;miniksa,miniksa,miniksa,,miniksa,
microsoft/terminal,4603,"Quickly dragging a tab into the terminal area that has text selected modifies that selection <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number:  10.0.18362.0
Windows Terminal version (if applicable): master (941a44a46491e1a018419eb24c9d92d3b2640e55)

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Make a selection.
2. Quickly drag a tab onto the terminal area.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

The selection is not modified.

# Actual behavior

<!-- What's actually happening? -->

The selection is modified.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Area-TerminalControl;Product-Terminal;Priority-3,2020-02-15T12:37:13Z,2021-07-28T22:27:09Z,greg904,DHowett-MSFT,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,4613,"Crash: `_terminal` (and other members?) used after freed in `TermControl` <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]
Windows Terminal version (if applicable): master (672010a1)

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Open the terminal
2. Put your mouse cursor on the <kbd>+</kbd> button to open a new tab
3. Quickly click with the left mouse button and then click with the middle mouse button to open a tab and close it. If you do it right, you should get this error message (which might be a bug in and of itself?): ![image](https://user-images.githubusercontent.com/56923875/74605546-4c7b0280-50c9-11ea-9e06-07c1c54c2304.png)
4. **Don't click <kbd>OK</kbd> yet!**
5. Focus the terminal window, behind that error message.
6. Repeat 3. Nothing will happen because the application is frozen while you click <kbd>OK</kbd> in the dialog.
7. Click <kbd>OK</kbd> in the dialog.
8. Now, the dialog closes and another dialog with the same error message opens. If it didn't open, you need to start again from 2. You'll need to train to click with the right timing.
9. Click <kbd>OK</kbd> in the new dialog.
10. Terminal crashes!

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

No crash.

# Actual behavior

<!-- What's actually happening? -->

Crash on this line: https://github.com/microsoft/terminal/blob/941a44a46491e1a018419eb24c9d92d3b2640e55/src/cascadia/TerminalControl/TermControl.cpp#L563 because even though we check that `this` is still alive with `weakThis`, `_terminal` is null. Also, it seems that there are other places where we do check `this` but don't check members that could be null now because `Close` was called. It's scary!",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-02-16T13:44:36Z,2020-03-26T23:25:12Z,greg904,DHowett-MSFT;zadjii-msft,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT,zadjii-msft,zadjii-msft,DHowett-MSFT,
microsoft/terminal,4618,"wt command-line cannot consistently parse more than one argument Bottom line: the more arguments I put on `wt` the less likely it is to work. This is currently unusable even for launching the app clean.

Something like this, in a run dialog:
```
wt new-tab -p ""PowerShell Core""; split-pane -H -p ""Windows PowerShell""; split-pane -p cmd
```

Seems to work less than one time in five on my computer. Most of the time I get two panes, not three, and occasionally only one.

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18363.657]
Windows Terminal Version: 0.9.433.0
```

# Steps to reproduce

Run the command above from a run dialog a half dozen times

# Expected behavior

The window should open the same way every time, with three panes, one for each of the shells I have in Windows...

# Actual behavior

Sometimes just PowerShell Core, sometimes both PowerShells, rarely all three including cmd.
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-1;Area-Commandline,2020-02-16T18:18:43Z,2020-03-26T00:03:33Z,Jaykul,opus131;wrexxor;DHowett-MSFT;moswald;brucejo75;nbabanov;3s-217,zadjii-msft;DHowett-MSFT;cinnamon-msft,DHowett-MSFT;cinnamon-msft,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,4646,"Yet another crash on launch, with call stack provided. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): Master branch

Any other software?
```

# Steps to reproduce

Yet another crash on startup issue! (I've checked all the others I can find but nothing seems applicable).

# Expected behavior

Launches!

# Actual behavior

Crashes after briefly showing a blank window.

Details:

I'm building from source as company AD lockdown prevents me from running the application any other way. Previously, building from the 0.8 tag everything was fine. Upgrading to 0.9, I get a crash on launch. I moved to master to check for a resolution, but I get the same behaviour. Since I've build from source I can attach the call stack.

![image](https://user-images.githubusercontent.com/176703/74839519-b1cb2f80-5325-11ea-89d6-fc6185c21588.png)

I've completely cleared my profiles and data directories, but it didn't make a difference. I have Powershell 6, Powershell 7 RC and WSL installed.",DHowett-MSFT,Resolution-Fix-Available;Needs-Repro;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Priority-1,2020-02-19T13:40:18Z,2020-04-14T17:44:40Z,nizmow,DHowett-MSFT;onekopaka;nizmow;shunf4,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,4703,"Conhost: UIA word navigation is slow <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

Windows build number: 1909 (18363.657).

Windows Terminal version (if applicable): Open Console (commit b8e33560f90ff7c4b3294f83bbeabb1b6a74d3e1).

Any other software? Yes, test build of NVDA and Open Console build used [available here](https://codeofdusk.com/UIASlowWordNavTest.zip).

# Steps to reproduce

1. Run the included NVDA build (a patched version of nvaccess/nvda#10784 that uses native UIA word navigation and disables our workarounds in Windows Console).
2. From advanced preferences (press insert+n/right-click tray icon -> preferences -> settings -> advanced), enable UI automation in Windows Console.
3. Run the latest conhost from this repository (a build of commit b8e33560f90ff7c4b3294f83bbeabb1b6a74d3e1 is included in the zip).
4. Attempt to navigate by word (numpad 4/6 with numlock disabled).

# Expected behavior

NVDA quickly reads the previous or next word, similar to Windows Terminal.

# Actual behavior

An approximately one second lag is observed for each word movement.",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Blocking,2020-02-23T23:31:22Z,2020-03-04T23:10:11Z,codeofdusk,codeofdusk;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,4704,"Some kind of unicode regression <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): 4420950337ccdd7bb5bb66d84538d2ea4195c101
Powershell 7-rc3
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
After 4420950337ccdd7bb5bb66d84538d2ea4195c101, characters like `棣冨綌` appear to get corrupted.

I'm using this symbol in my Powershell prompt and it has stopped working as expected.
7d6738cde745655b26119aaf0daa810f615f0360:
![001](https://user-images.githubusercontent.com/13862850/75122418-45289b80-566b-11ea-9c78-cbcbf38ba968.png)
4420950337ccdd7bb5bb66d84538d2ea4195c101:
![002](https://user-images.githubusercontent.com/13862850/75122419-4bb71300-566b-11ea-948b-7dc6e9617db3.png)
```Powershell
$script:pathDelim = [IO.Path]::DirectorySeparatorChar.ToString()
(@($pwd.Path.Split($pathDelim) | select-object -skip 1) -join  $pathDelim).replace([environment]::UserName, ""棣冨綌
```",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Severity-Blocking;Priority-1,2020-02-23T23:41:33Z,2020-02-26T21:55:23Z,djdv,DHowett-MSFT;miniksa;djdv,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,4708,"Shaping and display of certain language is completely incorrect. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Windows 10 2004 (10.0.19041.84)
Windows Terminal version (if applicable): master (at b8e33560f90ff7c4b3294f83bbeabb1b6a74d3e1)
```

# Steps to reproduce
- Download [test file](https://github.com/microsoft/terminal/files/4121097/utf82.txt) from #4375.
- Open the file in Windows notepad.txt and resave it in UTF-16LE encoding. 
- Using `type utf82.txt` from Windows `cmd` to show the content of the file.

# Expected behavior
![image](https://user-images.githubusercontent.com/1834979/75143001-10d3d000-56a9-11ea-8ab5-1c41adf5465e.png)

(This screenshot is from 0.9.433.0)
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
![image](https://user-images.githubusercontent.com/1834979/75142960-031e4a80-56a9-11ea-942a-b9f968d94c99.png)
<!-- What's actually happening? -->",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1,2020-02-24T10:04:40Z,2020-03-02T19:21:08Z,milizhang,milizhang;zadjii-msft;DHowett-MSFT;miniksa,miniksa;cinnamon-msft,miniksa,miniksa,,,
microsoft/terminal,4740,"Duplicate copyOnSelect actions part 2 # Environment

Platform ServicePack Version      VersionString
-------- ----------- -------      -------------
 Win32NT             10.0.18363.0 Microsoft Windows NT 10.0.18363.0

Windows Terminal Version 0.9.433.0

# Steps to reproduce

Please note, this isn't a duplicate of issue #4255 which I reported previously, it's a variation of the same issue which is still present in the latest version where as 4255 is now fixed.

1.  Open WSL Ubuntu terminal
2.  Split pane in two: pane_1 and pane_2
3.  Select a block on text with copyOnSelect enabled (for example ""TEST1"") on pane_1
4.  Ensure block of text remains highlighted
5.  Make pane_2 the active pane
6.  Switch to notepad instance
7.  Paste selected text into Notepad
8.  Make some change to text, (for example change string to ""TEST999"")
9.  Copy string inside Notepad
10. Highlight Windows Terminal, clicking into the last active pane (pane_2)
11. Paste string into Windows Terminal
12. Now highlight the other pane (pane_1) that still has the original string highlighted
13. Paste again

# Expected behavior

In both steps 11 and 13, the last copied string, ""TEST999"", is pasted

# Actual behavior

In step 11, TEST999 is pasted
In step 13, TEST1 is pasted
",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Severity-DataLoss;Priority-0,2020-02-28T14:12:45Z,2020-03-10T14:59:17Z,maguiresf,zadjii-msft;leonMSFT;DHowett-MSFT;maguiresf,zadjii-msft;carlos-zamora,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,4771,"Visual artefacts in splitted window  # Environment
Windows build number: Microsoft Windows [Version 10.0.18363.657]
Windows Terminal version (if applicable): 0.9.433.0

# Steps to reproduce

1. Open Windows Terminal with any config CMD/Powershell/Ubuntu
2. Fill all visible window with some longline text - ex:. ls, dir, cat smth
![image](https://user-images.githubusercontent.com/61321141/75669207-b2e84f00-5c8b-11ea-9a41-00d3d7e4f330.png)
3. Split horizontal
![image](https://user-images.githubusercontent.com/61321141/75669267-d14e4a80-5c8b-11ea-9169-f818143c21ba.png)
4. Focus to the first pane.
5. Output smth short - ex.: ps
![image](https://user-images.githubusercontent.com/61321141/75669358-f9d64480-5c8b-11ea-8940-4ec0cbf5e6e6.png)
6. View artefacts!
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-2,2020-03-02T10:48:00Z,2020-03-13T00:43:38Z,e-Dark,zadjii-msft,zadjii-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,4780,"IME input is missing after #4747 # Steps to reproduce
Try to type an IME sequence of characters, for example, 娴ｇ姵妲搁幋鎴犳畱

# Expected behavior
娴ｇ姵妲搁幋鎴犳畱 should show up on the screen.

# Actual behavior
Only 娴ｇ姵鍨 shows up on the screen. This repros for both Japanese and Korean IME as well (those are the only two others that I've tested).

Looks like every other character doesn't show up.
",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1,2020-03-03T00:03:26Z,2020-03-03T00:29:39Z,leonMSFT,,leonMSFT,leonMSFT,leonMSFT,,,
microsoft/terminal,4803,"Azure Shell can't connect to the internet <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Microsoft Windows [Version 10.0.18363.657]
Windows Terminal version: 0.9.433.0

Any other software? No
```

# Steps to reproduce
Install from store
Open the Azure Cloud Shell
<!-- A description of how to trigger this bug. -->

# Expected behavior
Can connect to Azure Cloud Shell
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

Receive the message: `Could not connect to Azure. You may not have internet or the server might be down.`
<!-- What's actually happening? -->
",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-AzureShell,2020-03-04T18:24:50Z,2020-04-17T00:32:53Z,rido-min,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,4806,"At certain font sizes, ligatures only render in the rightmost cell As of 0.10.641.0.

![image](https://user-images.githubusercontent.com/14316954/75935681-d1d61500-5e34-11ea-89ee-c73788d0514f.png)

if i bump the font size up or down,

![image](https://user-images.githubusercontent.com/14316954/75935691-d7cbf600-5e34-11ea-9437-d8d81761a91a.png)
![image](https://user-images.githubusercontent.com/14316954/75935701-db5f7d00-5e34-11ea-968e-27012d7e5684.png)
",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-03-05T00:26:18Z,2020-03-10T18:12:17Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,4828,"Emoji IME now only shows one letter at a time, overstrikes <kbd>Win+.</kbd>; type ""smile""

You'll see

`s`

`m`

`i`

`l`

`e`

instead of

`smile`",leonMSFT,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2020-03-06T18:46:14Z,2020-03-09T15:28:58Z,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,leonMSFT,leonMSFT,,,
microsoft/terminal,4907,"Crash in Windows Terminal TerminalControl!TextBuffer::Reflow While running a stress test on Windows Terminal version 0.10.721.0, I was able to cause a crash in TerminalControl!TextBuffer::Reflow.

I was running https://github.com/Treit/TerminalStress, the application I wrote some time back to reproduce a different bug (that was since fixed.)

I was running something like 5 instances in parallel in different panes on the same tab, then rapidly pressing Alt+Enter to switch from full screen to normal and back.

[WindowsTerminal11.txt](https://github.com/microsoft/terminal/files/4331632/WindowsTerminal11.txt)

I have attached some additional output from the debugger that might be helpful.",DHowett,Area-Output;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-3,2020-03-13T20:55:42Z,2021-04-13T14:06:59Z,Treit,DHowett-MSFT;Treit;kasper93;DHowett,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,DHowett-MSFT,
microsoft/terminal,4955,"Reflow with long input loses cursor # Environment

```none
Windows Terminal version (if applicable) :0.10.721.0

Any other software?
```

# Steps to reproduce

Not too sure what caused it but I know I have a really long path in the prompt. It's fine when I interact with it at first. But after attempting to run the command, and pasting the same path again, the cursor goes crazy. Specifically, I was ctrl+left and it started happening. Here's a gif:

1. paste long path/command
2. run it (mine failed, derp)
3. press up (populates prompt)
4. ctrl+left to browse the input

# Actual behavior

cursor goes wack

![reflow bug](https://user-images.githubusercontent.com/11050425/76829418-63a03380-67e0-11ea-90ee-3b3187d8d049.gif)",zadjii-msft,Needs-Repro;Product-Conpty;Area-Output;Issue-Bug;Needs-Triage;Product-Terminal;Resolution-No-Repro;Priority-1,2020-03-17T06:49:11Z,2020-03-17T22:04:09Z,carlos-zamora,carlos-zamora;DHowett-MSFT;zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,carlos-zamora,
microsoft/terminal,4963,"Character Overlap during Korean IME Composition <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

**Windows version**

```
Microsoft Windows [Version 10.0.18362.720]
```

**Terminal version**

```
Version: 0.10.761.0
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Open ""Terminal"" app
2. Type `""闊板矅濮㈤煾""` (It means test in Korean)
3. You can probably see the letters overlapping

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

Rather than a long explanation, I'd rather attach the behavior of another operating system terminal.

<img width=""682"" alt=""macos_terminal"" src=""https://user-images.githubusercontent.com/7090315/76889435-ee5c5d80-68c8-11ea-89c2-f12949d95c97.png"">

In the case of MacOS, the cursor is positioned under the letter being combined during the Korean language composition process, and there is no collision of letters.

![linux_terminal](https://user-images.githubusercontent.com/7090315/76889546-22378300-68c9-11ea-9206-87d8362d4497.jpg)

In the Ubuntu 18.04 X Window system environment, if the same operation is performed in the terminal, You can expect that Hangul characters are under the composition process in a cursor shape. And the Hangul characters do not overlap.

# Actual behavior

<!-- What's actually happening? -->

![windows_terminal](https://user-images.githubusercontent.com/7090315/76889842-ab4eba00-68c9-11ea-9876-a05d4181df4a.png)

In `Version: 0.10.761.0`, there is a problem that the Korean characters are overlapped as shown in the picture above.

If this problem is expected to be relatively minor by the core development team, please give a hint to the source code that is expected to be a problem so that I can give you a PR.",leonMSFT,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2020-03-17T18:39:11Z,2020-03-30T23:21:48Z,KennethanCeyer,jdebp;KennethanCeyer;sykwon66;leonMSFT,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,4972,"Resizing window causes app to crash in latest release (v0.10.761.0) <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

Updated to the latest preview release today (v0.10.761.0)

Immediately noticed that any attempts to resize the window either via mouse drag or keyboard shortcut causes the Terminal app to become unresponsive and crash. 

Same behavior for both normal and admin/elevated launches of Terminal app. 

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.
-->

# Environment
```none
Windows build number: 10.0.19582.0
Windows Terminal version (if applicable): 0.10.761.0

Any other software? No
```

# Steps to reproduce
Either:
- Use mouse to resize the Terminal app window
- Use keyboard shortcuts to maximize or split screen the window (via Win+Up/Right/Left)
<!-- A description of how to trigger this bug. -->

# Expected behavior
Normal resizing which broke for me since latest build (v0.9 was resizing fine)
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
Application becomes unresponsive and crashes
<!-- What's actually happening? -->
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Needs-Triage;Product-Terminal;Priority-0,2020-03-18T01:26:39Z,2020-03-18T22:22:27Z,ev-dev,FractalBoy;bjornmonkey;zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,4978,"splitPane causes memory leak in latest release (v0.10.761.0) I updated to the latest release (v0.10.761.0) yesterday and tried out the splitPane functionality today. After configuring some keybindings for that Terminal crashes and consumes my 32GB of memory within seconds.
If I remove the configuration for the sdplitPane keybindings again I cannot reproduce this.

This happens:
* with my default profile (Fedora Remix) instantly
* with the default PowerShell profile instantly by splitPane in horizontal mode
* with the default PowerShell profile after splitPane the first time in vertical mode and then send another one right after

# Environment

```none
Windows build number:  10.0.18363.0
Windows Terminal version (if applicable): 0.10.761.0

Any other software? no
```

# Steps to reproduce

* used the following configuration:
```
// To view the default settings, hold ""alt"" while clicking on the ""Settings"" button.
// For documentation on these settings, see: https://aka.ms/terminal-documentation

{
    ""$schema"": ""https://aka.ms/terminal-profiles-schema"",
    ""copyOnSelect"": true,
    ""defaultProfile"": ""{d3f31bee-5823-5ed8-8e04-f31ed54f2cd9}"",
    ""initialPosition"": ""-1920,0"",
    ""launchMode"": ""maximized"",
    ""profiles"":
    [
        {
            ""guid"": ""{d3f31bee-5823-5ed8-8e04-f31ed54f2cd9}"",
            ""acrylicOpacity"": 0.8,
            ""hidden"": false,
            ""historySize"": 9999999,
            ""name"": ""fedoraremix"",
            ""startingDirectory"" : ""//wsl$/fedoraremix/home/tamler"",
            ""source"": ""Windows.Terminal.Wsl"",
            ""fontSize"": 10,
            ""fontFace"": ""DejaVu Sans Mono for Powerline"",
            ""useAcrylic"": true
        },
        {
            // Make changes here to the powershell.exe profile
            ""guid"": ""{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"",
            ""name"": ""Windows PowerShell"",
            ""commandline"": ""powershell.exe"",
            ""hidden"": false
        },
        {
            // Make changes here to the cmd.exe profile
            ""guid"": ""{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"",
            ""name"": ""cmd"",
            ""commandline"": ""cmd.exe"",
            ""hidden"": false
        },
        {
            ""guid"": ""{b453ae62-4e3d-5e58-b989-0a998ec441b8}"",
            ""hidden"": false,
            ""name"": ""Azure Cloud Shell"",
            ""source"": ""Windows.Terminal.Azure""
        }
    ],

    // Add custom color schemes to this array
    ""schemes"": [],

    // Add any keybinding overrides to this array.
    // To unbind a default keybinding, set the command to ""unbound""
    ""keybindings"": [
        {""command"": ""prevTab"", ""keys"": [""shift+left""] },
        {""command"": ""nextTab"", ""keys"": [""shift+right""] },
        {""command"": ""scrollUpPage"", ""keys"": [""shift+pageup""] },
        {""command"": ""scrollDownPage"", ""keys"": [""shift+pagedown""] },
        {""command"": {""action"": ""splitPane"", ""split"": ""vertical""}, ""keys"": [""ctrl+shift+right""] },
        {""command"": {""action"": ""splitPane"", ""split"": ""horizontal""}, ""keys"": [""ctrl+shift+down""] },
        {""command"": ""copy"", ""keys"": [""ctrl+shift+c""] },
        {""command"": ""paste"", ""keys"": [""ctrl+shift+v""] },
        {""command"": ""paste"", ""keys"": [""shift+insert""] }
    ]
}
```
* open new Powershell profile tab
* use ctrl+shift+down to split down and crash immediately OR ctrl+shift+right twice to crash

# Expected behavior

Split the pane, which actually works with the Powershell profile in vertical mode the first time.

# Actual behavior

splitPane works the first time on a Powershell Profile in vertical mode, but crashes after sending the command again right after the first time.
In horizontal mode it instantly crashes.
In the Fedora Remix profile (default) it crashes regardless of the mode.

Independent of the profile Terminal consumes all of my memory within 20 seconds. Partly screenshot from task manager:
![Terminal-memconsumption](https://user-images.githubusercontent.com/6536990/76936765-c33b3380-68f3-11ea-86ba-5e9ea6215e4b.png)
",zadjii-msft,Resolution-Duplicate;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Priority-0,2020-03-18T07:38:44Z,2020-03-18T13:15:04Z,Armadill0,zadjii-msft;Armadill0,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,5029,"Alt+ Enter rendering error  # Environment

```none
Windows build number: [[Version 10.0.18363.720]]
Windows Terminal version (if applicable):  0.10.761.0

Any other software?
```

# Steps to reproduce
There are two bugs of Alt+Enter behavior.
 Text Disappear && Prompt Duplicate
a.  open terminal with WSL
b. type: ls -la or do whatever will print content over a page
c. **mouse scroll up** to the top
d. type Alt+Enter to Fullscreen
e. text outside orignal windows do not render.
d. scroll down to the bottom: type Alt+Enter several times
f. prompt duplicate several times.

I used zsh with the right side Prompt
![image](https://user-images.githubusercontent.com/17596021/77134780-bae31580-6a25-11ea-998d-0e3f965bf54e.png)


# Actual behavior

![image](https://user-images.githubusercontent.com/17596021/77134938-92a7e680-6a26-11ea-9421-7db56a3d9914.png)



![image](https://user-images.githubusercontent.com/17596021/77134715-76577a00-6a25-11ea-99d7-26255428b82d.png)


# Expected behavior
We need to scroll the terminal  to force a re-rendering.
![image](https://user-images.githubusercontent.com/17596021/77134701-617ae680-6a25-11ea-9754-4dd0c2195a22.png)




<!-- What's actually happening? -->
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Priority-2,2020-03-20T04:10:07Z,2020-03-20T23:51:01Z,Po-wei,zadjii-msft;Po-wei,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,5039,"Clear-Host fails to clear the first line # Environment

```none
Windows build number: 10.0.19041.0
Windows Terminal version: 0.10.761.0

Any other software?
PowerShell Core 7.0.0
NodeJS 12.16.1
coronavirus-tracker-cli 0.6.0 (`npm install -g coronavirus-tracker-cli@0.6.0`)
```

# Steps to reproduce

1. Open PowerShell Core
2. Run `corona` to get output
3. Run `cls` to clear the screen



# Expected behavior

Screen should be fully cleared.

# Actual behavior

The first line retains some characters. This is probably related to the color formatting being used by the CLI. The characters retained are also not from the line that was originally the topmost line.

Output before clearing: 
![2020-03-20_10-59-23](https://user-images.githubusercontent.com/7118719/77176046-e273c580-6a99-11ea-830d-93b00aa23c6b.png)

Output after clearing:
![2020-03-20_10-59-07](https://user-images.githubusercontent.com/7118719/77176055-e56eb600-6a99-11ea-8aff-e216c8f4bbe5.png)

Note: A second `cls` finishes clearing the screen.
",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Area-VT;Issue-Bug;Priority-2,2020-03-20T15:00:51Z,2020-04-09T00:06:26Z,brantburnett,DHowett-MSFT;brantburnett;zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,zadjii-msft;DHowett-MSFT,,
microsoft/terminal,5054,"IME fails very frequently in the v0.10 release <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->
In the middle of typing, IME frequently fails, I tried but still can't figure out how the failure is triggered, but only if I type and delete for a while, it always happen, so I get the chance to record a gif:
![terminal_IME_fail](https://user-images.githubusercontent.com/4412793/77214542-a64c6d80-6b4a-11ea-8ddf-6e9563f4c7c7.gif)

From the gif, you can see the first two characters were typed correctly, after that, nothing from the IME can be typed again.
<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment
Microsoft Windows [閻楀牊婀 10.0.18362.476]
The gif is recorded in v0.10.761.0, and it still happens in v0.10.781.0
I have been using Terminal v0.9, which works fine, the error comes with v0.10
# Steps to reproduce
Can't figure out exactly, keep typing and deleting in a prompt for a while, it always happen
<!-- A description of how to trigger this bug. -->

# Expected behavior
characters from IME can be typd onto terminal
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
IME fails
<!-- What's actually happening? -->
",leonMSFT,Resolution-Fix-Committed;Area-Input;Issue-Bug;Needs-Triage;Product-Terminal;Priority-1,2020-03-21T00:27:14Z,2020-03-25T00:00:19Z,etern,leonMSFT;etern;skyline75489,leonMSFT,,leonMSFT,,,
microsoft/terminal,5098,"Using cleartype anti aliasing makes dark foreground invisible on light background. # Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version: 0.10.781.0
Powershell version: 7.0.0
```

# Steps to reproduce
Setting profile settings to following:
```json
{
    ""useAcrylic"": false,
    ""closeOnExit"" : true,
    ""colorScheme"" : ""Campbell"",
    ""guid"": ""{a3c89eef-1dbe-4ac1-acc5-2412499f8619}"",
    ""hidden"": false,
    ""name"": ""PowerShell 7"",
    ""commandline"" : ""C:\\Program Files\\PowerShell\\7\\pwsh.exe"",
    ""icon"" : ""C:\\Program Files\\PowerShell\\7\\assets\\Powershell_av_colors.ico"",
    ""antialiasingMode"": ""grayscale"",
    ""cursorShape"" : ""bar"",
    ""cursorColor"": ""#121005"",
    ""fontFace"" : ""Consolas"",
    ""fontSize"" : 10,
    ""snapOnInput"" : true,
    ""historySize"" : 9001
}
```
and theme settings to:
```json
{
    ""name"" : ""Campbell"",

    ""foreground"" : ""#020200"",
    ""background"" : ""#ffffff"",
    ""selectionBackground"": ""#121005"",

    ""black"" : ""#0C0C0C"",
    ""blue"" : ""#0037DA"",
    ""brightBlack"" : ""#767676"",
    ""brightBlue"" : ""#3B78FF"",
    ""brightCyan"" : ""#61D6D6"",
    ""brightGreen"" : ""#16C60C"",
    ""brightPurple"" : ""#B4009E"",
    ""brightRed"" : ""#E74856"",
    ""brightWhite"" : ""#121212"",
    ""brightYellow"" : ""#3B78FF"",
    ""cyan"" : ""#3A96DD"",
    ""green"" : ""#13A10E"",
    ""purple"" : ""#881798"",
    ""red"" : ""#C50F1F"",
    ""white"" : ""#CCCCCC"",
    ""yellow"" : ""#C19C00""
}
```

# Expected behavior

Black text `F:\>` is visible. When antialiasingMode is set to cleartype.

# Actual behavior

Black text `F:\>` is invisible after setting antialiasingMode to cleartype (on the right):
![image](https://user-images.githubusercontent.com/11091671/77416329-cbeca780-6dd4-11ea-9e17-eb7ed07ef51b.png)
Same issue with cmd (""acrylicOpacity"" : 0.75):
![image](https://user-images.githubusercontent.com/11091671/77418748-626e9800-6dd8-11ea-9e9e-e4ff4b8b1dc8.png)

",zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1,2020-03-24T11:15:26Z,2020-04-24T17:16:35Z,alexFrankfurt,zadjii-msft,zadjii-msft;DHowett-MSFT,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,5104,"Screen content does not update in tmux # Environment

Windows 10.0.18363.0
tmux over ssh in cygwin

# Steps to reproduce

1. Attach to tmux session
2. Fill the screen for example with `echo test` multiple times
3. Keep printing `test`, you should alternate with some different text to see if console is scrolled properly.

# Expected behavior

Whole screen buffer is redrawn

# Actual behavior

Only first line in terminal is redrawn, the rest of the screen space is static and doesn't update while it should. If the output is one line (i.e without new line). If I do `echo 'test\n'` whole screen is properly redrawn. 

## Bisect result

This is regression from this commit https://github.com/microsoft/terminal/commit/ca33d895a359664c337c6482b853489823c216d3 before that everything was working fine. 

// CC @miniksa ",miniksa,Resolution-Fix-Committed;Area-Rendering;Product-Conpty;Issue-Bug;Priority-1,2020-03-24T17:39:55Z,2020-03-27T22:37:23Z,kasper93,miniksa;skyline75489;DHowett-MSFT;kasper93,zadjii-msft,zadjii-msft;DHowett-MSFT,miniksa,,,
microsoft/terminal,5113,"Terminal breaks copied text at window line wraps, even when the text has no new-line characters I recall this was working in older versions of Terminal and in Windows' copy of the console window, but it seems to have broken more recently.

### Environment

**Windows build number:** 18363.720 (Windows 10 ver. 1909 with update [KB4551762](https://support.microsoft.com/en-us/help/4551762))
**Windows Terminal version:** 0.10.781.0

### Steps to reproduce

1. Open this file in an editor: `C:\Windows\System32\WindowsCodecsRaw.txt`
1. Notice that the last line of the file ""THE SOFTWARE IS PROVIDED"".... is over 500 characters long.
1. Open Terminal to the Command Prompt or PowerShell, then run:
  `type C:\Windows\System32\WindowsCodecsRaw.txt`
1. Drag to select text from multiple in-window lines of the last line of the file, then right-click to copy.
1. Paste the clipping into a new file in Notepad.

### Expected and actual behavior

Expected: the text is all on one line.
Actual: the text is split into multiple lines.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2020-03-25T02:58:02Z,2020-04-09T00:06:26Z,metathinker,metathinker;mg-christian-axelsson;ElvenSpellmaker;ghost;zadjii-msft;skyline75489;paul-michalik;hmageste,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,5143,"Accessibility: jumps in review <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment


Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]: 1909 (18363.720)

Windows Terminal version (if applicable): Terminal as of 5bcf0fc.

Any other software? NVDA, Narrator.


# Steps to reproduce

<!-- A description of how to trigger this bug. -->
1. type:

``` shell
echo 1
echo 2
echo 3
```

2. Using NVDA with Windows Terminal support or Narrator, review a few previous lines of output. You should see the prompt, then 3, 2, 1.
3. wait about three seconds.
4. Try to review previous line again.

# Expected behavior
The screen reader keeps its position, reporting ""2"" for example if the last-reviewed line was ""3"".

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
The screen reader reads the prompt again, then starts back over with 3, almost as if the cursor bounced back.
<!-- What's actually happening? -->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1,2020-03-27T05:10:26Z,2020-04-01T15:56:21Z,codeofdusk,codeofdusk;carlos-zamora,carlos-zamora,carlos-zamora,carlos-zamora,,,
microsoft/terminal,5144,"Background tabs shouldn't actually render their contents I noticed that while running the tests in the Terminal that we always spend CPU/GPU time rendering a TermControl, even if the hosting tab is in the background. I'm not 100% certain about this, but it sure seemed like this was happening on my slaptop.

IIRC conhost does some logic to no-op rendering when it's minimized - `TermControl` should probably do something similar, including for when the tab isn't visible.

### Basic Repro

1. Open two tabs
2. In the first one, run the unit tests, or anything else that'll generate a ton of output.
3. Switch to the other tab, and do nothing in it.

### Expected

The GPU usage for the Terminal should be at the baseline usage for a terminal that's _not_ doing anything.

### Actual

GPU seemed to be getting the workout it normally does processing boatloads of output",miniksa,Resolution-Duplicate;Area-Rendering;Area-Performance;Issue-Bug;Product-Terminal,2020-03-27T16:42:50Z,2020-03-27T17:15:11Z,zadjii-msft,DHowett-MSFT;zadjii-msft,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,5161,"Scrolling down in VIM scrolls up duplicated vim status lines # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18363.720]   
Windows Terminal version (if applicable): 0.10.781.0

vim for Windows (official git build): VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Jan 16 2020 08:26:10)
```

# Steps to reproduce

- Start vim: `vim` (the one that comes with `git version 2.26.0.windows.1`)
- Press `i`
- Press `ENTER` until it starts scrolling the screen
- (to exit vim): `ESC` and then type `:q!` and then `ENTER` 棣冩

# Expected behavior

The status line stays where it's supposed to be, at the bottom of the screen.

# Actual behavior

Every time a the screen is scrolled down, the last line (white status line) is scrolled up, and a new white status line is printed at the bottom. This results in two white lines, then 3, etc...

This does not reproduce if I use the old cmd.exe (started by eg. Explorer, not wt.exe)
",DHowett-MSFT;zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Issue-Bug,2020-03-28T12:26:57Z,2020-04-09T00:06:26Z,0xd4d,avysk;0xd4d;DHowett-MSFT;zadjii-msft;PistachioCake,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,5167,"Issue when running ncdu via SSH in Git Bash # Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): 0.10.781.0

Any other software?

Git for Windows: 2.26.0
```

# Steps to reproduce

1. Create a profile with the `commandline`: `%PROGRAMFILES%/Git/bin/bash.exe -li`.
2. SSH into a Debian64 machine (I'm using VirtualBox).
3. Run `ncdu`.

# Expected behavior

Proper output/rendering.

# Actual behavior

When I run `where ssh`, there are 2 SSH binaries:

* `C:\Program Files\Git\usr\bin\ssh.exe` (OpenSSH_8.2p1, OpenSSL 1.1.1e  17 Mar 2020)
* `C:\Windows\System32\OpenSSH\ssh.exe` (OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5)

I see different incorrect rendering between each of the 2.

1. Using the first (which is the default), I see rendering similar/the same as #4697 (which was closed without a resolution). See screenshot 1 below.
2. Using the second, the rendering is broken in a different way. See screenshot 2 below.

Why do they differ? What is missing in both cases?

* Inside the VM:
    * TERM: `cygwin`
    * LANG: `en_ZA.UTF-8`
    * LC_ALL: ``

![ncdu1](https://user-images.githubusercontent.com/261509/77849078-451b3e80-71c9-11ea-887e-3a3604a96454.gif)
![ncdu2](https://user-images.githubusercontent.com/261509/77849080-49dff280-71c9-11ea-874c-981ddb63d082.gif)",DHowett-MSFT,Resolution-External;Product-Conpty;Area-VT;Issue-Bug;Needs-Attention,2020-03-29T12:29:33Z,2020-04-03T15:57:28Z,glen-84,DHowett-MSFT;glen-84,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,5169,"TryDuplicateBadTab and TryDuplicateBadPane unit tests are hanging when run locally # Environment

Windows build number: Version 10.0.18362.657
Windows Terminal version (if applicable): Commit 28d108bf32de4dce061d80a2bd160cd617c7e698

# Steps to reproduce

1. Build the OpenConsole solution from a recent commit
2. Run the unit test with `runut.cmd /name:*TabTests::TryDuplicate*`

# Expected behavior

The unit tests should execute successfully.

# Actual behavior

The `TestHostApp` window opens up and the test then appears to be stuck. Closing the window manually doesn't help, but if you instead kill the `TestHostApp` process, it will at least continue with the rest of the tests.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-CodeHealth;Priority-2;Needs-Bisect,2020-03-29T19:21:10Z,2020-08-18T21:50:03Z,j4james,zadjii-msft,zadjii-msft,DHowett-MSFT,zadjii-msft,,miniksa,
microsoft/terminal,5187,"Add ctrl+c/ctrl+v to settings.json <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement
We should add `copy` and `paste` key bindings as `ctrl+c/v` in the settings.json file so people can see them and have the option to remove them.

Additionally, there should be a comment in the file explaining that `ctrl+shift+c/v` are still shipped by default so they have a backup key binding if they choose to remove the above bindings.

This would also close #3058 

<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

# Proposed technical implementation details (optional)

<!-- 
A clear and concise description of what you want to happen.
-->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Issue-Task,2020-03-30T22:41:19Z,2020-04-09T23:21:23Z,cinnamon-msft,levicki;zadjii-msft;DHowett,cinnamon-msft,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,5188,"Add comments and settings to settings.json for discoverability <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement
We should add comments above each major section with the link to our documentation.

Additionally, we should add the following settings to settings.json so people can find them easily:

## Settings
- `""copyOnSelect"": false`

## Key bindings
- `{ ""command"": ""find"", ""keys"": ""ctrl+shift+f"" }`
This would also be bound in defaults.json, but we can explain `""unbound""/null` in a comment above it.
- `{ ""command"": {""action"": ""splitPane"", ""split"": ""auto"", ""splitMode"": ""duplicate""}, ""keys"": ""alt+shift+d"" }`
This is a common panes use case and it also demonstrates the fact that we have panes and shows how the key bindings are formatted.


<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

# Proposed technical implementation details (optional)

<!-- 
A clear and concise description of what you want to happen.
-->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Issue-Task,2020-03-30T22:50:45Z,2020-04-09T23:21:24Z,cinnamon-msft,,cinnamon-msft,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,5189,"Make sure default settings are all set in defaults.json <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement
We need to make sure that all of our default settings are actually set in defaults.json. This just requires a sweep of our settings.

<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

# Proposed technical implementation details (optional)

<!-- 
A clear and concise description of what you want to happen.
-->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Issue-Task,2020-03-30T22:54:44Z,2020-04-09T23:13:57Z,cinnamon-msft,,cinnamon-msft,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,5195,"About and Close all dialogs do not correctly show all UI elements <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [10.0.18363.720]
Windows Terminal version: latest unreleased build from master

Any other software? No
```

# Steps to reproduce
<!-- A description of how to trigger this bug. -->
1. Windows default app mode: light
2. Windows terminal requestedTheme: dark
3. Open **About** or **Close all** dialog
4. Observe not all graphical elements are visible
  a. On the **About** dialog, hover over a hyperlink and observe it disappear
  b. On the **Close all** dialog, observe that the **Cancel** button is not visible (but is active because it Cancels when clicking the area where the button is located.

# Expected behavior
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
1. **About** dialog: Can see the hyperlink when hovering over it with mouse cursor
2. **Close all** dialog: Can see the **Cancel** button.


# Actual behavior
<!-- What's actually happening? -->

1. **About** dialog: Cannot see the hyperlink when hovering over it with mouse cursor

![help](https://user-images.githubusercontent.com/8571098/78051634-e3e49e00-7375-11ea-8433-fa24f3bdd594.jpg)

2. **Close all** dialog: Cannot see the **Cancel** button.

![close-all](https://user-images.githubusercontent.com/8571098/78051667-ef37c980-7375-11ea-8d37-5640dc83b738.jpg)





",DHowett-MSFT,Resolution-Duplicate;Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-1,2020-03-31T16:39:14Z,2020-04-03T00:45:05Z,encladeus,DHowett-MSFT;encladeus;carlos-zamora,DHowett-MSFT;zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,5203,"Resizing a Terminal with retro terminal effects hangs the Terminal This is on the selfhost 0.11.912.0 release, but also repro'd on the last 0.11 preview. Unsure if it repros on earlier builds also.

Add the following to a profile:

```json
""experimental.retroTerminalEffect"": true
```

Then open a tab with that profile and try resizing the Terminal. 

### Expected 
The Terminal should not hang.

### Actual 
It hangs 棣冩З 



Looks like we're waiting for the read lock at the top of `TermControl::RenderEngineSwapChainChanged` on the `RenderThread`. This is higher on the stack than `Renderer::_PaintFrameForEngine`, which I believe has a write lock. But it's the same thread, so we should be fine, right?

Oh no the main thread also is waiting on the write lock 棣冩Щ 
```
03 TerminalControl!std::unique_lock<std::shared_mutex>::{ctor}+0x8 
04 TerminalControl!Microsoft::Terminal::Core::Terminal::LockForWriting+0x14
05 TerminalControl!winrt::Microsoft::Terminal::TerminalControl::implementation::TermControl::_SwapChainSizeChanged+0x37
06 TerminalControl!winrt::Microsoft::Terminal::TerminalControl::implementation::TermControlT<winrt::Microsoft::Terminal::TerminalControl::implementation::TermControl>::Connect::__l10::<lambda_87fbcfa1739d624dde571db8710dac26>::operator()+0x77 
```

Wait no, that's fine. The main thread doesn't _have_ the lock, it's just waiting for it. That's fine. I think the problem is the render thread can't seem to re-enter the lock

because it's a `shared_mutex` not a [`recursive_mutex`](https://en.cppreference.com/w/cpp/thread/recursive_mutex)",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-04-01T14:15:39Z,2020-04-07T00:15:32Z,zadjii-msft,DHowett-MSFT,zadjii-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,5205,"Ctrl+Alt+Shift+2 doesn't send NUL in VT input mode @zadjii-msft:
> Okay so <kbd>Ctrl+Alt+Space</kbd> was fixed for conhost, but it looks like it's still broken in the Terminal 棣冩З Now it's just generating a `^@`, a single NUL.
> 
> I think the Terminal is synthesizing the right sequence, but maybe conpty is generating the wrong input for it now, or maybe the input that's generated by conpty doesn't get re-translated back to `^[^@` correctly. I can try to keep investigating to figure out where the miscommunication is, if you need help.





@lhecker:
> @zadjii-msft Yeah I was just about to say that as well.
>
> As I wrote above the most puzzling thing for me though is if you change [this if condition (line 510)](https://github.com/microsoft/terminal/pull/4192/files#diff-3895074b0184ca0d36ef271db540a282R510) to a simple `ch != 0` - which _should_ be correct as well.
> If you attach a debugger you'll see that `TerminalInput` _definitely_ invokes `_pfnWriteEvents` with a `\x1b\x00` sequence.
> But then showkey shows a `^[^R` sequence instead. How can this happen? > I don't understand how such a benign change to the if condition can cause this. :disappointed: 

Okay I maybe saw what happened here.

1. On a en-us keyboard, '@' is <kbd>shift+2</kbd>. 
2. When conpty sees a `\x1b\x0`, it converts it to [Shift_down, Ctrl_down, Alt_down, 2_down, 2_up, Alt_up, Ctrl_up, Shift_up].
    - I did not pay a ton of attention to the keys that got synthesized here. I need to re-investigate the [2_down, 2_up]
3. When we get back to `TerminalInput::HandleKey`, we end up skipping that branch, because the `ch` was `0n50`, which is `0x32`, which is `'2'`.

I'm not sure what's exactly the right behavior here. I'd think we probably should send a different key, but I'll need to investigate more. It's possible that the `ch != 0` change would work just fine, but I want to make sure that the upstream input from conpty is _actually_ correct.
I've got a [braindead fix](https://github.com/microsoft/terminal/commit/77eee7066e5606f32359ec5ea8b291e42aa86ca9) that would fix `showkey -a`, but that doesn't really resolve the issue here for Win32 applications unfortunately, so I'm gonna file a separate issue to track this investigation.

_Originally posted by @zadjii-msft in https://github.com/microsoft/terminal/pull/4192#issuecomment-607326733_",lhecker,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Priority-2,2020-04-01T15:45:13Z,2021-02-08T15:33:38Z,zadjii-msft,zadjii-msft;lhecker;DHowett-MSFT,zadjii-msft,,zadjii-msft,zadjii-msft,,
microsoft/terminal,523,"Right click does not paste data copied from other apps In existing Terminals, eg Fluent Terminal, Hyper, Terminus, I can copy something from eg a web browser and paste it into the terminal with a right mouse click,

This does not work on Windows Terminal. Instead the contents of a second clipboard are pasted.



## Your Windows build number:  (Type `ver` at a Windows Command Prompt)

```
ver : The term 'ver' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ ver
+ ~~~
+ CategoryInfo          : ObjectNotFound: (ver:String) [], CommandNotFoundException
+ FullyQualifiedErrorId : CommandNotFoundException
```

I think you mean 棣冩:

```
$ [Environment]::OSVersion.VersionString
Microsoft Windows NT 10.0.18890.0
```

## What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)

### To replicate

 - Copy something from a web page or other app
 - Paste using right click

## What's wrong / what should be happening instead:

### What happens

The contents of a second clipboard are pasted - whatever the most recent selected text pas

### What should happen

The content from the web page or desktop app is pasted
",carlos-zamora,Area-Interaction;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2019-05-07T16:39:29Z,2019-07-18T15:41:57Z,mikemaccana,zadjii-msft;Jaykul;carlos-zamora;will;mikemaccana,zadjii-msft;miniksa,miniksa;zadjii-msft,zadjii-msft,,carlos-zamora,
microsoft/terminal,5239,"ESC key press in CMD prompt <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]
Windows Terminal version (if applicable):

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

<!-- What's actually happening? -->
",DHowett-MSFT,Resolution-External;Product-Conpty;Area-Output;Issue-Bug,2020-04-04T19:42:16Z,2020-04-28T17:54:33Z,luke1961,luke1961;zadjii-msft;DHowett-MSFT;jdebp,DHowett-MSFT;zadjii-msft,,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,5243,"UIA: delay when reaching prompt with word navigation <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd] 1909 (18363.752)
Windows Terminal version (if applicable): Open Console (4f8acb4)

Any other software? NVDA, Narrator
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

1. Open Open Console.
2. With either NVDA or Narrator, move to the start of the console and begin navigation by word.
3. After reaching the word ""reserved"" (of the copyright text), move to the next word.

# Expected behaviour
The prompt is quickly read.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behaviour
A lag is observed before the prompt is read. A reduced lag (or none at all) is observed in Windows Terminal.

<!-- What's actually happening? -->
",carlos-zamora,Product-Conhost;Issue-Bug;Area-Accessibility;Needs-Tag-Fix;Priority-1,2020-04-05T00:34:51Z,2021-09-17T22:19:16Z,codeofdusk,codeofdusk;DHowett-MSFT;carlos-zamora,DHowett-MSFT,,,,carlos-zamora,
microsoft/terminal,5264,"Rename `requestedTheme` to `theme` Because `requestedTheme` isn't a good name, and `theme` as a generic name has the potential for future expansion (to take an object, depending on how #3327 lands), I propose we do the above renaming.

```json
""theme"": ""light""
```

```json
""theme"": ""dark""
```

```json
""theme"": ""system""
```

```json
""theme"": { ""object, later""... }
```

In the future, we can seamlessly transition to a theme-enlightened world by introducing themes named ""light"", ""dark"" and ""system"" in whatever the theming system #3327 introduces evolves into.
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Issue-Task,2020-04-06T23:59:46Z,2020-04-07T19:14:07Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,527,"Assertion Failure calculating glyph spacing with certain UTF-8 chars  * Your Windows build number:  (Type `ver` at a Windows Command Prompt)

10.0.18362.53

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)

Attempting to display the contents of an UTF-8 encoded text file, and an assertion failure occurs in `std::vector`, in turn caused by an array index out of bounds exception in `CustomTextLayout.cpp` with `_textClusterColumns`:

```cpp
   for (auto i = run.glyphStart; i < (run.glyphStart + run.glyphCount); i++)
        {
            // Advance is how wide in pixels the glyph is
            auto& advance = _glyphAdvances[i];

            // Offsets is how far to move the origin (in pixels) from where it is
            auto& offset = _glyphOffsets[i];

            // Get how many columns we expected the glyph to have and mutiply into pixels.
            const auto columns = _textClusterColumns[i];    // <<< HERE
```

* What's wrong / what should be happening instead:

it shud wurkkk.

I've attached the UTF-8 ""torture test"" text file that triggers the exception. I'm guessing this could be useful to integrate into your CI. Don't forget to `chcp 65001` before `cat`'ing it in cmd ;)

[UTF-8-demo.txt](https://github.com/microsoft/Terminal/files/3153810/UTF-8-demo.txt)
",miniksa,Resolution-Fix-Available;Area-Rendering;Issue-Bug;Product-Terminal,2019-05-07T17:25:49Z,2020-01-22T16:41:13Z,oising,krokofant;zadjii-msft,zadjii-msft;miniksa,miniksa;zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,5271,"Crash in ScrollConsoleScreenBuffer when destination coordinates overflow # Environment

Windows build number: Version 10.0.18362.657

# Steps to reproduce

Compile and run the following C++ code in a conhost cmd shell:
```cpp
#include <windows.h>

void main() {
    SMALL_RECT rect = {0, 0, 40, 0};
    COORD dest = {32767, 0};
    CHAR_INFO fill = {L'X', 0x07};
    HANDLE output = GetStdHandle(STD_OUTPUT_HANDLE);
    ScrollConsoleScreenBufferW(output, &rect, NULL, dest, &fill);
}
```

# Expected behavior

The first 40 characters of the first line should fill with X's.

# Actual behavior

The console crashes. 

When the `ScrollRegion` function is copying the area that is being scrolled, the `_CopyRectangle` function makes use of the `Viewport::WalkInBoundsCircular` method, and that fails when the target position goes out of bounds. See here:

https://github.com/microsoft/terminal/blob/5de9fa9cf375e9b5bdc582d8d166604eeb519844/src/types/viewport.cpp#L411


",lhecker,Product-Conhost;Resolution-Fix-Committed;Area-Server;Issue-Bug;Severity-Crash;Priority-1;Impact-Correctness;zInbox-Bug,2020-04-07T17:28:04Z,2022-03-11T21:14:07Z,j4james,j4james;DHowett-MSFT,DHowett-MSFT;zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,529,"Typing emoji breaks cursor position * Your Windows build number:  (Type `ver` at a Windows Command Prompt)

```
Microsoft Windows [Version 10.0.18362.86]
```

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)

Trying to type something like this into the new Windows Terminal

```
echo ""I棣冩寢MS""
```

When I bring up the emoji keyboard, it doesn't interact with the terminal properly at all, but after I close it, I do get the character I selected. 

The problem is that the console acts as if the emoji is double-character-width, and after the emoji, shows the cursor a character to the left of where it should be. More emoji? Further to the left. Eventually it becomes impossible to work because you can't tell where your cursor really is.

* What's wrong / what should be happening instead:

Emoji should be treated as a character and the bar/cursor should go to the right place.

NOTE: not shell-specific",DHowett-MSFT,Product-Conhost;Needs-Repro;Product-Conpty;Area-Input;Issue-Bug;Needs-Author-Feedback;No-Recent-Activity;Priority-2,2019-05-07T17:39:09Z,2020-03-27T10:00:20Z,Jaykul,oising;zadjii-msft;nizos;adiviness,zadjii-msft;adiviness;DHowett-MSFT;miniksa;cinnamon-msft,miniksa,adiviness;DHowett-MSFT,DHowett-MSFT,,
microsoft/terminal,5291,"wsl vim is horribly broken after #5181 ![image](https://user-images.githubusercontent.com/14316954/78860291-aec7f380-79e6-11ea-9ad7-90cf224a0082.png)

tap output:

```
~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K~閳垫矌K
```

no cursor movement after the EL :/",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Output;Issue-Bug;Severity-Blocking;Priority-0,2020-04-09T05:18:01Z,2020-04-15T15:52:11Z,DHowett-MSFT,zadjii-msft,DHowett-MSFT,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,5309,"Crash when attempting to compare selection endpoints with UIA <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd] 21H1 (19603.1000)
Windows Terminal version (if applicable): inbox console

Any other software? NVDA 2020.2
```

# Steps to reproduce

1. Start [the latest NVDA alpha snapshot](http://nvda-project.org/snapshots).
2. In NVDA advanced settings, enable ""use UI Automation to access the Windows Console when available"".
3. Open cmd.
4. Ssh to an Ubuntu 18.04 system.
5. Run `sudo do-release-upgrade -d`.

# Expected behavior
NVDA reads the output, and the console remains functional.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior
Windows Console crashes, and the following is written to the NVDA log:

```none
ERROR - eventHandler.executeEvent (04:42:19.980) - MainThread (21752):
error executing event: caret on <NVDAObjects.Dynamic_WinConsoleUIAEditableTextWithAutoSelectDetectionUIA object at 0x070733B0> with extra args of {}
Traceback (most recent call last):
  File ""eventHandler.pyc"", line 155, in executeEvent
  File ""eventHandler.pyc"", line 92, in __init__
  File ""eventHandler.pyc"", line 100, in next
  File ""NVDAObjects\behaviors.pyc"", line 191, in event_caret
  File ""editableText.pyc"", line 333, in detectPossibleSelectionChange
  File ""editableText.pyc"", line 340, in _updateSelectionAnchor
  File ""NVDAObjects\UIA\__init__.pyc"", line 776, in compareEndPoints
  File ""comtypesMonkeyPatches.pyc"", line 26, in __call__
_ctypes.COMError: (-2147418113, 'Catastrophic failure', (None, None, None, 0, None))
```

# Context
NVDA uses cursor changed events to detect and report selection changes to the user. It receives a cursor change event and compares the previous and current selection endpoints, which causes console to crash in this case. Is there anything I can do to help trace this on the console side?

Please push the fix for this issue to 21H1 as we'd really like to use UIA in console (especially after the excellent work in #4018 and #4495)!",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility,2020-04-10T08:49:05Z,2020-04-21T16:45:18Z,codeofdusk,codeofdusk;DHowett-MSFT;zadjii-msft;carlos-zamora,zadjii-msft,zadjii-msft;DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,536,"Selection not deselected when you press 'Esc' When there is a selection of one or more character places, pressing ""Esc"" should clear the selection as it does in vanilla cmd.exe.

The selection does clear if you press ""Esc"" and resize the window, triggering rerender.

Adding:

`if(!handled && vkey == 27)
        {
            this->_renderer->TriggerRedrawAll();
        }
`
to here:
https://github.com/microsoft/Terminal/blob/b726a3d05d35928becc8313f6ac5536c9f503645/src/cascadia/TerminalControl/TermControl.cpp#L512 fixed it, but that is just a thoughtless hack to remove the small annoyance for now.",carlos-zamora,Issue-Bug,2019-05-07T21:01:25Z,2019-05-10T18:17:18Z,jmorrill,zadjii-msft;jmorrill;carlos-zamora,zadjii-msft,,zadjii-msft,,carlos-zamora,
microsoft/terminal,5403,`copyFormatting` doesn't have the agreed-upon default in the settings template The spec for #5299 specified how we should handle the default for this setting.,carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Severity-Blocking;Priority-0,2020-04-17T23:17:29Z,2020-04-20T23:49:13Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,543,"Terminal: ANSI Underlines are rendered in the wrong color/not at all * **Your Windows build number:  (Type `ver` at a Windows Command Prompt)**
`Microsoft Windows [Version 10.0.18885.1001]`

* **What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)**
When running `colortest-16` in WSL from inside Windows Terminal, underline sequences are rendered in strange colors (if they get rendered at all). Here is a comparison between the Terminal and the classic console:
![Screenshot](https://i.imgur.com/c4xlwHD.png)

* **What's wrong / what should be happening instead:**
The Terminal should render ANSI underlines in the current foreground color.

",miniksa;DHowett-MSFT,Work-Item;Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2019-05-07T23:43:58Z,2019-08-20T23:14:27Z,dhrdlicka,zadjii-msft;miniksa;rbeesley,zadjii-msft;miniksa,miniksa,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,5470,"TSFInputControl alignment is slightly off on High DPI - [ ] - `TSFInputControl` needs to account for scaling (migrie: 閴佹棑绗)
    - miniksa 4/20@5:04pm, something's still a little off here cutting off the prev text and being a bit small...
    - DHowett 4/20, seems better after it's been opened and closed once, weirdly, for me

_Originally posted by @miniksa in https://github.com/microsoft/terminal/pull/5345#issuecomment-614127648_",zadjii-msft;leonMSFT,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-1,2020-04-22T18:31:52Z,2020-04-28T18:50:34Z,miniksa,miniksa;leonMSFT,miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,miniksa;zadjii-msft;leonMSFT,,,
microsoft/terminal,5471,"differential: selection gets struck multiple times while scrolling ![image](https://user-images.githubusercontent.com/14316954/80019741-d1e5af00-848c-11ea-8380-7e3f2670364e.png)

Sometimes when scrolling the region covered by the selection also doesn't get redrawn -- sounds racey.",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2020-04-22T18:32:15Z,2020-04-24T22:14:44Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,miniksa,,DHowett-MSFT,
microsoft/terminal,5479,"Crashes if zoom font size up and down rapidly with ctrl + scroll wheel # Environment

Win10 1909 x64

Windows Terminal version (if applicable): 0.11.1121.0

# Steps to reproduce

Increase and decrease the font size rapidly in the first tab using ctrl and mouse scroll wheel

# Expected behavior

Not to crash

# Actual behavior

Crashes

---

Crashes every time when I use Ctrl and the mouse wheel to increase and decrease the font rapidly. Only happens with the first tab and regardless of what is running in there. I have crash dumps. Doesn't crash when I try and record a video of it in Snagit.

![image](https://user-images.githubusercontent.com/11651939/80043624-22dfbc80-84fa-11ea-8725-1b62874966cf.png)

",leonMSFT,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Product-Terminal;Priority-1,2020-04-22T23:27:02Z,2020-04-30T00:05:30Z,guyrleech,skyline75489;zadjii-msft,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,5481,"UIA in conhost: issues with visible ranges <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd] next (19613.1000).
Windows Terminal version (if applicable): Inbox console

Any other software? NVDA
```

# Steps to reproduce
<!-- A description of how to trigger this bug. -->

1. Download [this list of domains](https://github.com/microsoft/terminal/files/4519753/domains.txt).
2. Start Windows Console and NVDA (with UIA in Windows Console enabled in advanced preferences).
3. Run a python interpreter: `python`.
4. Run:

    fin=open(""domains.txt"")
    fin.readlines()

# Expected behaviour
<!-- What's actually happening? -->
Like in pre-21H1 conhost and Windows Terminal 0.11, NVDA reads current output immediately.

# Actual behaviour
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
At this point, NVDA's auto-read lags far behind the actual output in the buffer. Quitting Python with `quit()` continues reading very old output.

# Context
When a text change event is received, NVDA takes a diff of the old and new text and reads only the changed portion of the text. Maybe there's a bug in our diffing algorithm (implemented [here](https://github.com/nvaccess/nvda/blob/master/source/NVDAObjects/behaviors.py), in `LiveText._calculateNewText`)?",carlos-zamora,Product-Conhost;Issue-Bug;Area-Accessibility;Needs-Tag-Fix,2020-04-23T01:40:57Z,2020-08-16T07:12:57Z,codeofdusk,codeofdusk;carlos-zamora,zadjii-msft,DHowett-MSFT,carlos-zamora,,codeofdusk,
microsoft/terminal,550,"Specifying a font to be used in profile that does not exist causes the app the crash I added a new profile to the profiles.json specifying a font that is not installed on my system.  When attempting to start the profile the app crashes with the following:

> The program '[15980] WindowsTerminal.exe' has exited with code -1073741819 (0xc0000005) 'Access violation'.



Specifying a font that is installed causes the problem to not occur. 

The profile definition looks like this:

```
    {
      ""guid"": ""{e2f9d7d6-369b-4841-9429-61f5b38474cf}"",
      ""name"": ""Bash"",
      ""colorscheme"": ""Campbell"",
      ""historySize"": 9001,
      ""snapOnInput"": true,
      ""cursorColor"": ""#FFFFFF"",
      ""cursorShape"": ""bar"",
      ""commandline"": ""bash.exe"",
      ""fontFace"": ""Fira Code"",
      ""fontSize"": 12,
      ""acrylicOpacity"": 0.5,
      ""useAcrylic"": false,
      ""closeOnExit"": true,
      ""padding"": ""0, 0, 0, 0""
    }

```",miniksa,Resolution-Fix-Committed;Area-Fonts;Issue-Bug;Severity-Crash;Product-Terminal,2019-05-08T02:13:50Z,2019-07-30T21:32:24Z,nshanny,ryzngard;DHowett-MSFT,DHowett-MSFT;miniksa,DHowett-MSFT;miniksa,miniksa,,miniksa,
microsoft/terminal,5502,"New 0.11 VT colors bug, background color isn't applied to "" "" (space) cells In Windows Terminal 0.11.1121.0, a new VT colors bug has been introduced.

When output contains VT escape sequences to set the background color, they are handled properly while the output is in the visible buffer viewport, but stops being applied to cells containing spaces when the output has to scroll to show the result.

The command used for repro is the following:
`echo -e ""\e[m\r\n\e[44;32m    #         \e[m#""`
(4 spaces before first #, and 9 spaces after, GitHub HTML rendering swallows the extra spaces)

It reliably works fine until you reach the last line of the viewport, then the background color stops after the first # character:
![WT 0 11 VT colros bug](https://user-images.githubusercontent.com/25664275/80131257-3e9a9f80-859a-11ea-9f00-4094399239a3.png)

Just make sure you repeat the command until you reach the bottom of the viewport.",zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Product-Conpty;Issue-Bug,2020-04-23T17:41:37Z,2020-04-30T15:01:04Z,PhMajerus,zadjii-msft;DHowett-MSFT;PhMajerus;jdebp,zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,5525,"Ctrl+Alt+'char' generates other chars then 'AltGr' (Germany Layout) v0.11.1121.0 <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows NT 10.0.19041.0
Windows Terminal version (if applicable): v0.11.1121.0
```

# Steps to reproduce
In german keyboard layout type `Ctrl+Alt+<` (or any other key that has a 3rd char on it).

# Expected behavior
Shows the same as `AltGr+<`
the pipe char: `|` 

# Actual behavior
Shows the `#` hash sign.

# Additional remarks
This started on v0.11 till the fixing of AltGr months ago, this didn't happen till today.
On german keyboard layout at least, AltGr+key and Ctrl+Alt+key always return the same char.

some other examples on pwsh:
| Key  | AltGr  | Ctrl+Alt  |
|---|---|---|
| <  | Pipe  | # |
| q | @ | "" |
| e | 閳 | 閳 |
| 7 | { | ^[ |
| 8 | [ | ^[ |
| 9 | ] | + |
| + | ~ | & |

cmd in terminal returns also different chars but other (mostly `^]` or `^\`)
wsl doesn't support Ctrl+Alt at all, but I don't need it there and I'm not sure, if it worked there till v0.11,

I mostly recognized this problem while typing PowerShell, cause its way faster to create the `|` (pipe) using `Ctrl+Alt+<` on the left side of the keyboard then `AltGr+<` cause this would require two hands.",lhecker,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-04-24T06:36:57Z,2020-04-28T22:27:44Z,Ztarbox,zadjii-msft;lhecker;mintty;vuori;DHowett;Ztarbox,zadjii-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,5564,"Reordering tabs still crashes when running elevated <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19041.0
Windows Terminal version: 0.11.1133.0

Any other software?
```

# Steps to reproduce

Launch Windows Terminal as administrator.  Create a couple of tabs.  Use the mouse to click and drag one of the tabs.

# Expected behavior

Nothing should happen

# Actual behavior

Windows Terminal crashes


#4874 was supposed to prevent tab reordering while elevated and it either doesn't work (can't remember if I tested this when it first released) or some later change broke it again.
",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Needs-Tag-Fix,2020-04-25T14:24:46Z,2020-04-27T16:17:20Z,DJackman123,Sandra2001;DJackman123;DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,5626,"Start selection from padding # Description of the new feature/enhancement

This is just a minor UX issue, but I'd intuitively expect that text selection is also possible if I start dragging with mouse from the padding (i.e. the margin between the content and window border). Were it possible, it would also make selection from the beginning of a line much easier.

In most of the text editors starting to drag from the left padding also selects full lines. That is maybe not needed in a terminal, but it's perhaps still something to consider, whether it'd be beneficial and expected. Most of those work so that the selection stays in the full line mode even if you drag onto the content area, but I also started to think whether it'd make sense in a terminal to only select full lines if the drag stays on the left padding, and select normally (last line is selected up to the mouse position) if the drag moves onto the content. In any case, this full-line selection from left padding is not as expected a functionality than the possibility to start normal selection from padding (any side of the padding).",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Issue-Task,2020-04-28T18:32:29Z,2020-07-07T23:42:43Z,synchronos-t,zadjii-msft;DHowett-MSFT;synchronos-t;carlos-zamora;DHowett,synchronos-t;zadjii-msft;DHowett-MSFT,zadjii-msft;DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,5691,"""git log --pretty=oneline"" at the bottom of the buffer line-wraps wrong The pager prints one screen-width of line, then enters deferred EOL mode, then prints more. When we were in the `newBottomLine` state (or whatever it is now), we fail to re-wrap it properly.

![image](https://user-images.githubusercontent.com/14316954/80832075-d99a0780-8ba0-11ea-8ad4-871e469bea7a.png)
",zadjii-msft,Resolution-Fix-Committed;Product-Conpty;Area-Server;Area-VT;Issue-Bug;Priority-1,2020-05-01T18:42:59Z,2020-05-08T21:22:10Z,DHowett-MSFT,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,,
microsoft/terminal,5738,"Crash while closing a tab (among many) Not sure if anywhere are more detailed logs.

Windows Logs -> Application:

```
Faulting application name: WindowsTerminal.exe, version: 0.11.2004.28001, time stamp: 0x5ea883f8
Faulting module name: Windows.UI.Xaml.dll, version: 10.0.18362.752, time stamp: 0x458b530d
Exception code: 0xc000027b
Fault offset: 0x00000000007132e0
Faulting process id: 0x4a0
Faulting application start time: 0x01d61ee69fecf55f
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_0.11.1191.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\Windows\System32\Windows.UI.Xaml.dll
Report Id: 27fc6f47-a52b-4370-819d-51599ad1dd61
Faulting package full name: Microsoft.WindowsTerminal_0.11.1191.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: APP
```",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-05-04T19:10:22Z,2020-05-05T16:16:10Z,vadimkantorov,DHowett-MSFT;vadimkantorov,zadjii-msft;DHowett-MSFT,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,5759,"Rendering problem, blurry text <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment
Microsoft Windows [Version 10.0.18363.778]

# Steps to reproduce

I got this bug on last update!

# Expected behavior

Text should be clear.

# Actual behavior

I get blurry text then renders good then bad, weird rendering!
As you see first 5 lines are good, the rest are blurry. the good lines came after scrolling.
Mean the whole screen goes blurry then when scrolling it renders good!
![WindowsTerminal](https://user-images.githubusercontent.com/5483584/81126668-b1196100-8f44-11ea-97a5-befc24d9137f.jpg)

I use CMD by the way I don't know about PS",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-0,2020-05-05T23:54:42Z,2020-05-11T21:54:04Z,fahadabdulaziz,zadjii-msft;fahadabdulaziz;DHowett-MSFT;sbwiecko;msopko81;miniksa;bazilious;LuKePicci;mic345;DHowett;reli-msft,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,miniksa,
microsoft/terminal,5766,"""shift extend selection"" feature doesn't work in the click->shift-click case because single-cell selection is gone <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [19041.208  wsl ]
Windows Terminal version (if applicable): 0.11.1251.0

Any other software?
```

# Steps to reproduce
1. Single click.
2.  Hold SHIFT and single click an unselected region.


# Expected behavior

 Region between two click should be selected.

# Actual behavior

region between two click hasn't been selected.
I remeber this feature has been released in ""Windows Terminal Preview v0.9.433.0"", said: ""You can now hold down Shift and click to extend your selection (#4404)"". But in recent releases, it gone.",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-3,2020-05-06T13:34:03Z,2020-12-18T17:16:46Z,ymkun,DHowett-MSFT;ymkun;Don-Vito;DHowett,DHowett-MSFT,DHowett-MSFT,carlos-zamora,,,
microsoft/terminal,5773,"tooltips are not localized <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19041.0
Windows Terminal version (if applicable):0.11.1251.0

Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
- set windows to a language other than English
- verify that win term changed it's language
![image](https://user-images.githubusercontent.com/43626415/81226601-77d30680-8fc1-11ea-9fac-58c9713072f6.png)

- hover mouse over a button on app bar


# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
- tooltips are displayed in system language

# Actual behavior

<!-- What's actually happening? -->
- tooltips are displayed in English
![image](https://user-images.githubusercontent.com/43626415/81226585-71448f00-8fc1-11ea-8d44-555c7b2e7f47.png)
",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-Localization,2020-05-06T20:40:04Z,2020-05-13T19:04:43Z,LuanVSO,DHowett-MSFT;LuanVSO;zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,5780,"Tab close button doesn't color properly when changing tab color <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): Built from master, latest commit: 1d72e77

Any other software?
```

# Steps to reproduce

Color the tab using the tab color picker (right click and select Color...).
Choose a light color (when using the dark Terminal theme).

# Expected behavior

The ""X"" on the tab should be the same color as the tab title text.
![image](https://user-images.githubusercontent.com/48369326/81257514-50dbfb00-8fe8-11ea-9e14-e3e3a9f874fe.png)

# Actual behavior

The ""X"" doesn't change color depending on the tab color.
![image](https://user-images.githubusercontent.com/48369326/81257493-4457a280-8fe8-11ea-99fc-353d34e8b711.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2020-05-07T05:25:59Z,2020-06-05T19:12:29Z,cinnamon-msft,,cinnamon-msft;zadjii-msft,DHowett-MSFT,zadjii-msft,,,
microsoft/terminal,5799,"Terminal freezes after tab close <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 18363
Windows Terminal version (if applicable): 0.11.1251.0

I'm running Terminal with Powershell Core 7.1.0 preview2
```

# Steps to reproduce
1. Run Terminal
1. Activate fullscreen
1. Open new tab
1. Switch to previous tab
1. Close tab (I use a `Ctrl+W` binding to close tab)

# Expected behavior

Tab closes and focus goes to recently opened tab.

# Actual behavior

Sometimes the whole terminal will freeze and the only way to continue is to kill Terminal process

",DHowett-MSFT;zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Severity-DataLoss;Priority-1,2020-05-07T21:05:22Z,2020-05-08T18:53:35Z,victoralvesp,DHowett-MSFT;zadjii-msft;MohammatMajken;victoralvesp,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,5819,Parallel Build occasionally breaks because dx doesn't produce IBoxDrawingEffect_h.h from idl before Win32Interactivity needs it Most of this is just in the title.,miniksa,Resolution-Fix-Committed;Help Wanted;Area-Rendering;Issue-Bug;Area-Build;Product-Meta;Needs-Tag-Fix;Area-CodeHealth;Priority-2,2020-05-08T23:00:46Z,2020-05-11T22:09:15Z,DHowett-MSFT,,DHowett-MSFT,DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,5822,"Card suite Unicode characters are the wrong width # Environment

Windows build number: Version 10.0.18362.657
Windows Terminal version (if applicable): Commit 7ae34336da0be8428738df5e13dfc4c5f1df6f75

# Steps to reproduce

1. Build commit 7ae34336da0be8428738df5e13dfc4c5f1df6f75
2. Open a bash shell
3. Execute `printf ""\u2660\u2663\u2665\u2666\n""`

# Expected behavior

This should print our the four card suite Unicode characters, each being one cell wide. Here's what it used to look like in conhost:

![image](https://user-images.githubusercontent.com/4181424/81461502-39e20800-91a4-11ea-8944-c878ad4c8499.png)

# Actual behavior

Each characters occupies two cells now.

![image](https://user-images.githubusercontent.com/4181424/81461517-45cdca00-91a4-11ea-8b37-5da63e426a9e.png)

I wouldn't be too concerned if these were some recently invented emoji like crying kitten, or dancing monkey with umbrella. But these characters are from the default cmd shell code page ([CP437](https://en.wikipedia.org/wiki/Code_page_437)), and they've been narrow characters for going on 40 years now. They're even included in the [WGL4](https://en.wikipedia.org/wiki/Windows_Glyph_List_4) character repertoire. Changing their width is almost guaranteed to break things.

I'm sorry I didn't bring this up before PR #5795 was merged, but I wasn't paying attention to the actual characters that were being changed. I only noticed now when I was testing some of my own code and found that this broke _Vttest_ (it uses the diamond character in a couple of the tests).",leonMSFT,Product-Conhost;Resolution-Fix-Committed;Area-Server;Issue-Bug;Needs-Triage;Product-Terminal;Priority-0;Impact-Compatibility;Impact-Correctness,2020-05-09T02:26:51Z,2020-05-12T19:38:11Z,j4james,j4james;DHowett-MSFT;leonMSFT,DHowett-MSFT,,leonMSFT,,,
microsoft/terminal,5839,"[REGRESSION >0.11.1251] Backward-kill-word after line wrapping in powershell doesn't clear exited line properly I typed ""eeeeeeee.. dddddddddd.."" until the line wrapped, then hit <kbd>Ctrl+Backspace</kbd>

## Before, both:

![image](https://user-images.githubusercontent.com/14316954/81533956-fdd1b300-931b-11ea-8af1-5924bdfe7031.png)

## After, 0.11.1251.0:

![image](https://user-images.githubusercontent.com/14316954/81533890-e0044e00-931b-11ea-8c5e-95745ca121ef.png)


## After, 0.11.1294.0:

![image](https://user-images.githubusercontent.com/14316954/81533929-edb9d380-931b-11ea-9d8e-53e340af8a56.png)
",zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Product-Conpty;Issue-Bug;Needs-Tag-Fix;Priority-1,2020-05-11T07:12:15Z,2020-05-12T22:02:16Z,DHowett-MSFT,zadjii-msft,DHowett-MSFT;zadjii-msft,DHowett-MSFT,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,5936,"Opening a new tab with ctrl+shift+1 provides no spoken feedback with NVDA # Environment

```none
Windows build number: 10.0.19041.264
Windows Terminal version (if applicable): latest 0.11 preview
NVDA: latest master snapshot alpha-20220,1c4519a6
```

# Steps to reproduce

1. With NVDA running, open terminal. Press ctrl+shift+1 to open a new tab.

# Expected behavior

NVDA informs me about the newly opened tab. Output from subsequent commands in this new tab are automatically read out by NVDA.

# Actual behavior

Silence. No feedback is provided. Additionally, new text is not read until tabbing away and back into terminal (i.e, it needs to regain focus).",carlos-zamora,Resolution-Fix-Available;Help Wanted;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1,2020-05-16T09:24:01Z,2022-02-16T00:00:47Z,Neurrone,codeofdusk;DHowett;carlos-zamora;Neurrone,DHowett;carlos-zamora,DHowett,carlos-zamora,,carlos-zamora,
microsoft/terminal,5941,"Retroactively recategorized emoji that require variation selection are the wrong size <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Versione 10.0.18363.836]
Windows Terminal version (if applicable): 0.11.1333.0

Any other software?
git bash
```

# Steps to reproduce
1. Open the terminal
2. Open a bash shell
3. Execute `printf ""\u2654\u2655\u2656\u2657\u2658\u2659\u265A\u265B\u265C\u265D\u265E\u265F\n""`

# Expected behavior
All the characters should be the same size

![immagine](https://user-images.githubusercontent.com/8383704/82122183-5082f300-9792-11ea-85a5-7370b7d9bbab.png)


# Actual behavior
The black pawn is larger than the other pieces

![immagine](https://user-images.githubusercontent.com/8383704/82122275-dbfc8400-9792-11ea-854f-06050bebddcd.png)


The codepoint for the black pawn is U+265F
",DHowett,Area-Rendering;Area-Server;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-0,2020-05-16T14:33:45Z,2020-05-17T20:32:47Z,giuseppeM99,j4james;DHowett,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,5949,"Tabs leak GDI handles on tab title resizes # Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): 0.11.1333.0
```

# Steps to reproduce

1. In the preferences, set `""tabWidthMode"": ""titleLength""` or any other configuration that allows for variably-sized tab titles (to trigger this bug)
2. Run the following  in a powershell tab (or anything similar in any type of tab) to trigger lots of tab title resizes
```powershell
for ($i=0;;++$i) { $host.UI.RawUI.WindowTitle = ""oops "" + @(Get-Random -Minimum 0.0 -Maximum 100000000.3) + @(Get-Random) + @(Get-Random) + "" oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooops""; }
```
# Expected behavior

Windows Terminal should keep running, keep updating the tab title, without leaking GDI handles.

# Actual behavior

Windows Terminal keeps allocating new GDI handles (as seen in Task Manager/ProcessHacker) and will eventually crash and just vanish.

The leaked GDI handles will be retained even when the corresponding tab is closed

![term resource ex](https://user-images.githubusercontent.com/9981466/82151292-1c273980-985b-11ea-9c3f-82612b135f37.png)

# Please note
It is *not* enough to just update the title when tabs are in `equal` mode/are not resized.",miniksa,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Priority-1,2020-05-17T14:37:31Z,2020-06-01T22:29:06Z,RealDolos,miniksa;WSLUser;DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,6020,"Japanese translation issue: Should use ""Y"" or ""y"" instead of ""楠"" I've tried Azure Cloud Shell on Windows terminal in Japanese. It works well but I've found a following translation issue.

娴犲﹤绶﹂妵閵夐妶鑸鍋嗛妷鐐戒紕閵囩喆鍊庨妵閵嗕降浜鹃妶灞诲濋妵閹恒儳绋撶懛鐎规哎鍊版穱婵嗙摠閵囨ぜ浼ㄩ妵娆嶄罕? [楠/n]
-> ""楠"" is incorrect - ""楠"" means ""year"" in English
-> Large ""Y"" or small ""y"" is preferable.

![image](https://user-images.githubusercontent.com/42795291/82411485-ce097480-9aac-11ea-8f85-af99b08a6437.png)

<!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment
- Windows build number: Version 10.0.19041.264
- Windows Terminal version: 1.0.1401.0

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]
Windows Terminal version (if applicable):

Any other software?
```

# Steps to reproduce
1. Switch Windows display language to Japanese
2. Open Windows Terminal
3. Open Azure Cloud Shell in Windows Terminal
4. Open https://microsoft.com/devicelogin and enter the code
5. Select appropriate Azure AD tenant number

And then the message contains incorrect character will be displayed.

<!-- A description of how to trigger this bug. -->

# Actual behavior & Expected behavior
The message ""娴犲﹤绶﹂妵閵夐妶鑸鍋嗛妷鐐戒紕閵囩喆鍊庨妵閵嗕降浜鹃妶灞诲濋妵閹恒儳绋撶懛鐎规哎鍊版穱婵嗙摠閵囨ぜ浼ㄩ妵娆嶄罕? [楠/n]""
-> ""楠"" is incorrect - ""楠"" means ""year"" in English
-> Large ""Y"" or small ""y"" is preferable.",DHowett,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-AzureShell;Area-Localization,2020-05-20T06:24:13Z,2020-07-15T23:36:12Z,nakazax,DHowett,zadjii-msft;DHowett,DHowett,zadjii-msft,,DHowett,
microsoft/terminal,610,"Font rendering issues in Terminal I have Terminal up and running under 18362.0, but it seems to have problems with certain types of fonts.

Here it is working fine with the font set to ""SF Console"":

![image](https://user-images.githubusercontent.com/606923/57429087-a7093900-71f0-11e9-9a6c-d731f674b0ce.png)

But it breaks when the font is changed to ""SF Console Medium"" (but not because the font isn't found or anything). The app doesn't crash but the text is rendered... let's just say extremely incorrectly:

![image](https://user-images.githubusercontent.com/606923/57429137-ca33e880-71f0-11e9-9ed0-7f0974df108e.png)


If you focus *extremely* well and zoom in all the way, you can see that text *is* being rendered.. just very oddly so. Change the font back and it redraws correctly to what it used to contain.

Here's the same screenshot from conhost with the font set to ""SF Console Medium"" via the registry:

![image](https://user-images.githubusercontent.com/606923/57429184-e3d53000-71f0-11e9-8172-4845be3bb203.png)

It's not just an issue with setting a variant of a font, or this particular font. Here's how the default (free) ""Roboto Slab"" is rendered, but I'm not sure if it's the same problem (it doesn't look like it):

![image](https://user-images.githubusercontent.com/606923/57429290-3282ca00-71f1-11e9-848f-a84e7d152f1b.png)


",miniksa,Area-Rendering;Area-Fonts;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2019-05-09T05:32:55Z,2020-04-24T22:30:50Z,mqudsi,zadjii-msft;miniksa;mqudsi;vsalvino;bmo-at;offero;BinaryInk;danieldjewell;horseinthesky;MartinSGill;austinwagner;johnwildes;DHowett-MSFT;shanselman;gitfool;iKlsR;mdtauk,zadjii-msft;miniksa,miniksa,zadjii-msft,,miniksa,
microsoft/terminal,6184,"Vim/Neovim/tmux scroll way too fast with trackpads <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Platform ServicePack Version      VersionString
-------- ----------- -------      -------------
 Win32NT             10.0.18362.0 Microsoft Windows NT 10.0.18362.0
```

Windows Terminal version `1.0.1401.0`.

I'm curious whether or not this is trackpad-related, so FWIW I'm using a Surface Book and scrolling with the trackpad.

EDIT: I tried with a normal mouse plugged into the USB port instead of the trackpad, and it's definitely trackpad-related: regular mouse wheels work just fine.

# Steps to reproduce

`tmux` set up with:

```tmux
set -g mouse on
bind -n WheelUpPane if-shell -F -t = ""#{mouse_any_flag}"" ""send-keys -M"" ""if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'""	
bind -n WheelDownPane select-pane -t= \; send-keys -M
```

And/or Neovim (or just plain old Vim) with:

```vim
set mouse=a
```

# Expected behavior

The above snippets make `vim`, `nvim`, and `tmux` able to be scrolled with the mouse/trackpad on macOS and Linux. They also work in WSL... If I use Xming to run an X server, and use urxvt as my terminal emulator. So, I'd expect that they'd also work for Windows Terminal.

They work in all of the above either alone (e.g. Vim/Neovim not nested inside `tmux`), or nested (e.g. running Neovim inside `tmux`).

# Actual behavior

For some reason with the Windows Terminal, when I scroll in vim/nvim/tmux (with the editors either nested in `tmux` or un-nested) they all go absolutely nuts and scroll at like 10x speed, which is kind of unusable. FWIW I'm using a Surface Book and scrolling with my trackpad, if that makes a difference? It looks like it's just sending way more scroll events to the terminal than it should be.

Windows Terminal is otherwise dope and I'd love to be able to replace my janky Xming + urxvt setup for coding on Windows.

Here's a video I captured of the behavior in `tmux` 閳 I tried to scroll a very small amount, and instead it scrolled 78 rows:


![ezgif com-video-to-gif](https://user-images.githubusercontent.com/803092/82804985-196aac80-9e38-11ea-8735-4dbda484a168.gif)

",DHowett,Resolution-Fix-Committed;Help Wanted;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-3,2020-05-25T10:32:46Z,2020-07-09T23:24:18Z,reissbaker,reissbaker;zadjii-msft;DHowett,zadjii-msft,zadjii-msft,DHowett,,,
microsoft/terminal,6227,"Korean IME suggestions don't appear # Environment

```none
Windows build number: Microsoft Windows [Version 10.0.18363.836] (1909 rtm + patches)
```

# Steps to reproduce
1. Start Korean IME
2. Turn it into IME entry mode, not English.
3. Type 'dks'

# Expected behavior
We should see each piece get composed at a time. The D representation combined with the K one then combined with the S one. On enter, it should fully commit.

![notepad](https://user-images.githubusercontent.com/18221333/83061652-34911400-a012-11ea-9941-71b572baef24.gif)

# Actual behavior
We see nothing until the final commit is hit with the enter key.
![conhost](https://user-images.githubusercontent.com/18221333/83061546-06133900-a012-11ea-8b25-efa7af87df08.gif)
",MycroftKang,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Needs-Tag-Fix,2020-05-27T19:05:19Z,2021-01-04T21:05:25Z,miniksa,miniksa,miniksa,zadjii-msft,miniksa,,,
microsoft/terminal,6245,"Shell extension displays an error when you launch it from the root of a drive ![image](https://user-images.githubusercontent.com/189190/83201470-62ea1e80-a0fa-11ea-9ab0-20ca4581ec97.png)
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-ShellExtension,2020-05-28T22:46:55Z,2020-06-08T21:35:40Z,DHowett,zadjii-msft;DHowett;greg904,DHowett,DHowett;zadjii-msft,DHowett,,,
microsoft/terminal,633,"OhMyPosh themes with arrows render gaps before arrow character * Your Windows build number:  (Type `ver` at a Windows Command Prompt)
Windows 10 18362.30 (Enterprise)
oh-my-posh 2.0.263 - `agnoster` theme
posh-git 0.7.3
Screenshots taken using Nerd Fonts `Inconsolata NF`, also tried using `FuraCode NF` with same results.
I am using a build from master as of ~11am PDT today.

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
**Windows Terminal**
![image](https://user-images.githubusercontent.com/10136407/57481005-03527400-7256-11e9-995e-d1f91f5663a9.png)
**Fluent Terminal** (expected result)
![image](https://user-images.githubusercontent.com/10136407/57481119-41e82e80-7256-11e9-86bd-fbd21c09298c.png)

* What's wrong / what should be happening instead:
Arrow characters on powerline should be getting rendered a few pixels to the left, so colour gaps aren't visible (see Fluent Terminal screenshot). Screenshots taken using agnoster theme, but the same happens on other themes utilising those arrows - Paradox and Fish. No issues noticed on themes that don't render this arrow character.
https://github.com/JanDeDobbeleer/oh-my-posh#themes

Edit: removed ohmyposh disabled screenshot, as that doesn't relate to this issue but to the other one I just opened.",miniksa,Resolution-Fix-Committed;Area-Rendering;Area-Fonts;Issue-Bug;Product-Terminal,2019-05-09T19:48:16Z,2019-11-22T21:52:56Z,hchokshi,zadjii-msft;miniksa;brantburnett;krokofant;utybo;hchokshi;es50678;fle108;ofarukcaki;MuktadirHassan;wenbozzz;efelippe;JayXon;VectorWpl;ctolkien;arnydo;DHowett-MSFT,zadjii-msft;miniksa,miniksa,miniksa,,miniksa,microsoft/terminal#8341;
microsoft/terminal,635,"OhMyPosh agnoster theme causes command to snap back on typing third character * Your Windows build number:  (Type `ver` at a Windows Command Prompt)
Windows 10 18362.30 (Enterprise)
oh-my-posh 2.0.263 - `agnoster` theme
posh-git 0.7.3
Screenshots taken using Nerd Fonts `Inconsolata NF`, also tried using `FuraCode NF` with same results.
I am using a build from master as of ~11am PDT today.

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
**Windows Terminal**
![image](https://user-images.githubusercontent.com/10136407/57481005-03527400-7256-11e9-995e-d1f91f5663a9.png)
**Fluent Terminal** (expected result)
![image](https://user-images.githubusercontent.com/10136407/57481119-41e82e80-7256-11e9-86bd-fbd21c09298c.png)
**Windows Terminal** (oh-my-posh disabled, posh-git enabled)
![image](https://user-images.githubusercontent.com/10136407/57481689-80321d80-7257-11e9-84d6-04c28a97733e.png)

**Windows Terminal** with agnoster - the problematic theme
![image](https://user-images.githubusercontent.com/10136407/57482363-4c57f780-7259-11e9-91da-2406dff60231.png)

In this case, I typed `test` then backspaced the 4 characters and typed `cd`.  The `e` from `test` is still rendered in its original position, while the other characters erased as expected.

Typing `tes`, the `te` is rendered in its original position and moved position:
![image](https://user-images.githubusercontent.com/10136407/57482444-80331d00-7259-11e9-9c49-76aaf5540600.png)

Typing further works as expected, removing those characters from the screen: 
![image](https://user-images.githubusercontent.com/10136407/57482498-9f31af00-7259-11e9-8dc4-33c87dbab5c2.png)

* What's wrong / what should be happening instead:
Typing the third character should not cause the command to move its rendering (see `cd ~` and `Get-Command` in first screenshot - first character gets covered, no issues with one or two character commands.

There is no theme with ohmyposh disabled (poshgit still enabled), or with different ohmyposh themes including the others that render those arrows. Only agnoster causes this moving to occur.",miniksa,Resolution-Duplicate;Area-Rendering;Product-Conpty;Issue-Bug,2019-05-09T19:55:21Z,2019-08-16T04:18:10Z,hchokshi,zadjii-msft;miniksa;ksiazkowicz;DHowett-MSFT,zadjii-msft;miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,miniksa,,DHowett-MSFT,
microsoft/terminal,637,"alt+letter sends ^[ and capitalized letter (alt shift letter) instead of lowercase alt+letter sends ^[ and capitalized letter (alt shift letter) instead of lowercase

From MSFT: 21450985",zadjii-msft,Area-Input;Area-VT;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2019-05-09T20:44:04Z,2019-06-14T22:00:47Z,miniksa,atwok;zadjii-msft;HBelusca,miniksa,miniksa,miniksa,,adiviness,
microsoft/terminal,6402,"Narrator scan mode crashes terminal <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

Windows build number: Microsoft Windows [Version 10.0.18363.836]
Windows Terminal version (if applicable): 1.0.1401.0

Any other software?: Narrator, the version which comes with this windows build

# Steps to reproduce

* Start Narrator using Win+Ctrl+Enter
* Open the Windows Terminal app
  * Make sure the Narrator cursor (blue box) is on the terminal cursor, and/or that Narrator says ""editing"" as part of the information when you navigate to the terminal window (if Narrator is not focused on the correct place in the terminal window, alt-tabbing away and back should fix it).
* Activate scan mode with Caps+Space (Narrator will say ""scan"")
* Press the down arrow key (Narrator will say ""title bar"")
  * If Narrator does not announce ""title bar"", it may be further down in the UI tree. Keep pressing the down arrow until you reach it
* Press the up arrow key, and the Windows Terminal app crashes

# Expected behavior

I would expect the terminal app not to crash, and for Narrator focus to return to the edit box.

# Actual behavior

The terminal app crashes.

# Feedback hub link

https://aka.ms/AA8mlsm
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Product-Terminal,2020-06-07T22:01:19Z,2020-07-20T23:10:56Z,binyomen,binyomen,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,6421,"[Win32 Input] Application does not receive ALT Release When I press and release <kbd>Control</kbd>:

`閳垫矌17;29;0;1;8;1_ ... 閳垫矌17;29;0;0;0;1_`

When I press and release <kbd>Alt</kbd>

`閳垫矌18;56;0;1;2;1_`",zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2020-06-08T23:35:09Z,2020-06-11T22:41:17Z,DHowett,zadjii-msft,DHowett,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,6423,[Win32 Input] Modifiers are considered input for the purposes of snapOnInput and selection dismissal This means that pressing <kbd>Ctrl</kbd> to do a <kbd>Ctrl+C</kbd> will clear your selection (!),zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Severity-Blocking;Priority-0;Area-WPFControl,2020-06-08T23:52:31Z,2020-06-09T21:49:39Z,DHowett,DHowett;carlos-zamora;zadjii-msft,DHowett,zadjii-msft,zadjii-msft,,,
microsoft/terminal,6438,"[Win32 Input] F7 generates DOWN UP UP ```
UNICODE. ^Z TO EXIT
--
  REP   VK  VSC CHAR          CTRL
- --- ---- ---- ---- ---- --------
v 001 0076 0000 0000 ^@   00000000
^ 001 0076 0000 0000 ^@   00000000
^ 001 0076 0041 0000 ^@   00000000
```

The second Up has a scancode, which is interesting!",zadjii-msft,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2020-06-09T18:07:15Z,2020-06-09T23:16:39Z,DHowett,zadjii-msft,DHowett,DHowett,zadjii-msft,,,
microsoft/terminal,6444,[wpf] WM_KEYUP crashes on x64,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1;Area-WPFControl,2020-06-09T22:36:17Z,2020-06-11T18:05:44Z,DHowett-MSFT,,DHowett,DHowett,zadjii-msft,,,
microsoft/terminal,6445,[wpf] WM_KEYUP generates wrong value in Win32 input mode,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-WPFControl,2020-06-09T22:36:41Z,2020-06-11T18:05:44Z,DHowett-MSFT,,DHowett,DHowett,zadjii-msft,,,
microsoft/terminal,6446,[wpf] WPF control crashes on startup trying to render cursor As in title,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-WPFControl,2020-06-09T22:37:05Z,2020-06-11T18:05:44Z,DHowett-MSFT,zadjii-msft,DHowett,DHowett,zadjii-msft,,,
microsoft/terminal,6466,[wpf] every character generates DOWN DOWN UP in win32 input mode This may be because `WM_KEYDOWN` _and_ `WM_CHAR` both get the key.,zadjii-msft,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-WPFControl,2020-06-11T16:09:11Z,2020-07-20T21:47:51Z,DHowett,DHowett,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,6476,"Paste not work correctly when running vim on remote machine <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd]
Windows Terminal version (if applicable):

Any other software?
```
Windows version: 10.0.18363.0
Windows Terminal version: 1.0.1401.0
Ssh client version: OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5
Powershell Core version: 7.0.1

# Steps to reproduce

1. Ssh to a remote machine
2. Copy some data
3. Start an editor in the remote machine using `vim` and enter insert mode
4. Right click to paste the data copied at step 2.

# Expected behavior

Data copied at step 2 shows up in terminal.
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

<!-- What's actually happening? -->
Nothing shows up.

Just using powershell core without Windows Terminal work as expected. Using Windows Terminal but using nano instead of vim, it also works.",DHowett,Resolution-Fix-Committed;Product-Conpty;Area-Input;Issue-Bug;Product-Terminal,2020-06-12T12:03:25Z,2020-06-15T13:04:39Z,BusyJay,WSLUser;BusyJay;DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,6481,"[Win32 Input] PrintScreen counts as 'input' and forces a snap; bad for screenshooting the terminal When you take a screenshot, input snaps.

**This is also true for <kbd>Win+Shift+S</kbd>**

I think we need to snap only on CharacterHandler, or something? When a key _actually generates a character_.",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2020-06-12T17:38:59Z,2020-06-15T19:55:21Z,DHowett,zadjii-msft,DHowett,zadjii-msft,zadjii-msft,,,
microsoft/terminal,6486,"ctrl+alt+, is bound to openSettings defaultFile (not defaultsFile) The binding doesn't work because it's not set to `defaultsFile`. Note the `s`.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-06-13T00:56:53Z,2020-06-15T22:35:16Z,DHowett,DHowett,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,6488,"Text between box drawing characters is rendered aliased (???) When I run this in PowerShell (7),

```
""`e[30;47m`u{2500} What `u{2500}`e[m""
```

the text comes out without antialiasing. It looks like it's being drawn with FillGeometry just like a box drawing glyph.

![image](https://user-images.githubusercontent.com/189190/84561566-4e18a800-ad02-11ea-89b8-fe4cc58127bb.png)

If I flip the colors, it comes out antialiased.

![image](https://user-images.githubusercontent.com/189190/84561569-58d33d00-ad02-11ea-83c0-56b763950ae4.png)

To verify my theory that `What` was becoming part of the box drawing run, I put together a debug tool that turns glyph runs into graphviz documents.

![image](https://user-images.githubusercontent.com/189190/84561756-ff6c0d80-ad03-11ea-8e76-447cafa1dc83.png)

Unfortunately, it doesn't look like it's so simple.",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2020-06-13T06:15:13Z,2020-06-24T22:24:19Z,DHowett,DHowett;miniksa;wackoisgod;skyline75489;reli-msft,DHowett,DHowett,zadjii-msft,,DHowett,
microsoft/terminal,656,"WSL emjoy is 閿涚噦绱甸敍 
# I jumped to kaili in the wsl system (ubuntu) of windwos10, I got emjoy expression turned into? ?
![image](https://user-images.githubusercontent.com/26197815/57510589-cd86bb80-7339-11e9-9617-10b72b4b171f.png)
At the same time, any of my input will be invalid.
![image](https://user-images.githubusercontent.com/26197815/57510706-0a52b280-733a-11e9-93dc-8b08cee755d3.png)

",DHowett-MSFT,Product-Conhost;Resolution-Fix-Committed;Area-Interop;Issue-Bug,2019-05-10T07:41:17Z,2019-06-27T21:48:30Z,liode1s,zadjii-msft;DHowett-MSFT,zadjii-msft;miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,6586,"wt split-pane (multiple copies) seems to have occasional focus issues <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number:  10.0.18363.0
Windows Terminal version (if applicable): 1.1.1671.0

Any other software? No
```

# Steps to reproduce

Run a command line which opens multiple tabs, and some split panes. Supply a name for each tab using `--title`.

Example command line:

`wt.exe -p ""Command Prompt"" -d . --title Cmd1 ; split-pane -H -p Cmd -d . ; new-tab -p ""Windows PowerShell"" -d . --title Posh1 ; new-tab -p ""Windows PowerShell"" -d . --title Posh2 ; split-pane -H -p ""Windows PowerShell"" -d . ; split-pane -H -p ""Windows PowerShell"" -d . ; new-tab -p ""Windows PowerShell"" -d . --title Posh3 ; split-pane -V -p ""Windows PowerShell"" -d .`


# Expected behavior

Each tab gets the name you assigned it.

# Actual behavior

Tabs sometimes get the names you supplied, and sometimes not. Since this problem is intermittent, I suspect it's a threading bug. I would guess you are using the same string variable to parse parts of the command line successively and passing each to a thread. The variable is getting clobbered.

Also of note, this is likely the same problem that is causing #6340, because they also describe it happening intermittently.

Thanks.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-2;Area-Commandline,2020-06-19T03:22:08Z,2021-08-24T09:49:47Z,mfeemster,DHowett;mfeemster,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,660,"Padding breaks mouse selection Adding padding to a profile (e.g. `""padding"": ""20, 20, 20, 20""`) breaks selecting text with your mouse. The selection is offset with the padding.

![terminal](https://user-images.githubusercontent.com/16590775/57524702-dc18a700-7328-11e9-9c82-86577d1ba0aa.gif)

edit: Windows build 10.0.18890.1000, just in case that's relevant",carlos-zamora,Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-05-10T11:38:46Z,2019-05-22T16:34:21Z,ghvanderweg,mwidmann;zadjii-msft;carlos-zamora,zadjii-msft;miniksa,miniksa,zadjii-msft,,DHowett-MSFT,
microsoft/terminal,666,"Some UTF-8 characters take two placeholders in render buffer Microsoft Windows [Version 10.0.18894.1000]

Reproduce. In both WSL and CMD consoles create files with UTF-8 in name or content. Try to display this content by using either MC or FAR. The character takes two placeholders in render buffer (unexpected), but it should take only one (expected). Here are some examples with RU language in UTF-8 (chcp 65001).

FAR:

![Capture](https://user-images.githubusercontent.com/144776/57538502-3594cc00-7351-11e9-8aa9-da85d91ab6e1.PNG)

MC:

![Capture2](https://user-images.githubusercontent.com/144776/57538505-37f72600-7351-11e9-9217-c475b736478f.PNG)

",miniksa,Area-Rendering;Area-Fonts;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2,2019-05-10T15:31:23Z,2020-04-22T22:35:47Z,5HT,zadjii-msft;PhMajerus;miniksa;joe5saia,zadjii-msft;miniksa;cinnamon-msft,miniksa,DHowett-MSFT,,miniksa,
microsoft/terminal,6668,"Reintroduce simple text analysis escape without crash or box drawing issue Notes from bugs:

From #6488

> When I run this in PowerShell (7),
> 
> ```
> ""`e[30;47m`u{2500} What `u{2500}`e[m""
> ```
> 
> the text comes out without antialiasing. It looks like it's being drawn with FillGeometry just like a box drawing glyph.
> 
> ![image](https://user-images.githubusercontent.com/189190/84561566-4e18a800-ad02-11ea-89b8-fe4cc58127bb.png)
> 
> If I flip the colors, it comes out antialiased.
> 
> ![image](https://user-images.githubusercontent.com/189190/84561569-58d33d00-ad02-11ea-83c0-56b763950ae4.png)

> Okay, this is because we're not populating `_glyphClusters` when text is ""simple"". When we go to split the run later (**we split runs for things other than text analysis!**), we try to remap the glyph clusters around the split.
> 
> Inevitably, we end up falling into DrawGlyphRun with `run.glyphCount` = 0 because `_SplitCurrentRun` stomped the glyphCount because there was no glyph cluster mapping.
> 
> Somehow _magically_ we end up doing a ""get raw geometry, draw"" for the entire string which very handily hides the glyph clustering bug!
> 
> This fix _works_ but I do not believe it is correct:
> 
> ```diff
> diff --git a/src/renderer/dx/CustomTextLayout.cpp b/src/renderer/dx/CustomTextLayout.cpp
> index d19d2d0c3..395a58224 100644
> --- a/src/renderer/dx/CustomTextLayout.cpp
> +++ b/src/renderer/dx/CustomTextLayout.cpp
> @@ -336,6 +336,7 @@ CustomTextLayout::CustomTextLayout(gsl::not_null<IDWriteFactory1*> const factory
>              for (size_t i = glyphStart; i < _glyphAdvances.size(); i++)
>              {
>                  _glyphAdvances.at(i) = (float)_glyphDesignUnitAdvances.at(i) / designUnitsPerEm * _format->GetFontSize() * run.fontScale;
> +                _glyphClusters.at(i) = static_cast<UINT16>(i);
>              }
> 
>              run.glyphCount = textLength;
> ```
> 
> I'm worried about that ""magical"" rendering fallthrough. With this fix, are we striking the text twice -- once as a geometry and once as a glyph run?
> 
> (I commented out the glyph run drawing, and I think the answer is _no_.)

From #6664


> Terminal crashed. In debug configuration raised exception in ""vector"" include file in
> function void _Verify_offset(const difference_type _Off) const at line 113
> **""cannot seek vector iterator after end""**
> 
> Call stack:
> ...
> problem at
> src\renderer\dx\CustomTextLayout.cpp at line 867:
> const auto postOriginX = std::accumulate(_glyphAdvances.begin() + run.glyphStart,
> _glyphAdvances.begin() + run.glyphStart + run.glyphCount,
> mutableOrigin.x);
> 
> _glyphAdvances.size(): 0x000000000000001f
> run.glyphStart: 0x00000001
> run.glyphCount: 0x0000ffff
> 
> Same problem in wsl2 (Ubuntu or CentOS not matter) with Midnight Commander... start ok (in user's home directory) but Terminal crashes when trying cd to /home directory with mouse double click under .. or with cd .. in command line.
> @igorkuzuro",miniksa,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Severity-Crash;Product-Terminal;Priority-1,2020-06-24T22:22:32Z,2020-06-29T20:27:32Z,DHowett,DHowett,DHowett;miniksa,DHowett,DHowett,,,
microsoft/terminal,6669,"Powerline glyphs hidden and some characters scaled improperly on re-rendering /cc @miniksa

# Environment

```none
Windows build number: 10.0.20156.1000
Windows Terminal version: 1.2.1751.0
```

# Steps to reproduce

1. Open Terminal (my default profile is PowerShell 7 w/ Powerline theme, Cascadia Code PL font)
2. Open new tab (CMD)
3. Switch back to first tab
4. Switch back to second tab

# Expected behavior

Text looks consistent and all of it is present

# Actual behavior

![Repro Gif](https://user-images.githubusercontent.com/11050425/85638331-7c6b8100-b63a-11ea-8038-6ed1ca1a9bd7.gif)",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Severity-Blocking,2020-06-24T23:52:42Z,2020-06-29T20:27:32Z,carlos-zamora,DHowett;miniksa,carlos-zamora,carlos-zamora,miniksa,,,
microsoft/terminal,6740,"Block copy with the ALT+MOUSE unexpectedly wraps the copied text into a single string # Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): 1.1.1671.0

Any other software?

- WSL Ubuntu 20.04 LTS
```

# Steps to reproduce

1. Use the default WT settings.
2. Use the `""copyOnSelect"": true`.
3. Select a rectangular text block.
4. Paste the selection.

![image](https://user-images.githubusercontent.com/7956686/86185533-35502500-bb3f-11ea-8b87-add769c00f56.png)

# Expected behavior

The block copy should leave a block as is (including the whitespace). There is an existing default setting in the schema (`""singleLine"": false`), but, it seems, it applies for keyboard shortcuts solely.

![image](https://user-images.githubusercontent.com/7956686/86185588-5c0e5b80-bb3f-11ea-93aa-64feb77934b3.png)

# Actual behavior

The block copy wraps everything to a single string.

![image](https://user-images.githubusercontent.com/7956686/86185568-4d27a900-bb3f-11ea-9248-99e7ba3fbf12.png)",carlos-zamora;Don-Vito,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2020-06-30T23:08:26Z,2020-12-14T23:32:45Z,vblazhkun,DHowett;carlos-zamora;vblazhkun;Don-Vito,DHowett,DHowett,carlos-zamora,,,
microsoft/terminal,6776,"Windows/tabs created with ""wt new-tab COMMAND"" start with the title of the default Terminal profile, not the COMMAND name ### Environment

**Windows build number:** Windows 10 ver. 2004 build 19041.329
**Windows Terminal version (if applicable):** 1.1.1812.0

### Steps to reproduce

1. While Terminal is closed, delete or rename your `settings.json` file, causing Terminal to revert to the default settings under which the built-in Windows PowerShell profile for Terminal `{61c54bbd-c2c6-5271-96e7-009a87ff44bf}` is the default one.
1. Run this command: `wt.exe C:\Windows\System32\robocopy.exe`

### Expected behavior

The title of the Terminal tab created is ""C:\Windows\System32\robocopy.exe"" or similar.

### Actual behavior

The title of the Terminal tab created is ""Windows PowerShell"".
(If you watch Task Manager or another process listing, you can see that no PowerShell process was ever started.)",DHowett,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-Commandline;this-will-be-a-breaking-change,2020-07-03T17:20:08Z,2021-08-23T19:42:21Z,metathinker,DHowett;metathinker;zadjii-msft,DHowett;zadjii-msft,DHowett;zadjii-msft,zadjii-msft,zadjii-msft,DHowett,
microsoft/terminal,6814,"Window title is inconsistently updated with tab rename # Environment

```none
Windows build number: 10.0.19041.329
Windows Terminal version (if applicable): d350a8932485f618b1658353a0573ac2422a3c36 and also repros in 1.1.1812.0
```

# Steps to reproduce

1. Launch Terminal
2. Create a 2nd tab
3. Rename the inactive tab to anything, like ""bananas""
4. Switch to the inactive tab
5. Check the top-level window's title text (e.g., by looking at the label in the ALT+TAB experience)

# Expected behavior

I'd expect the top-level window's title text to always match the active tab's title (`_runtimeTabText`).

# Actual behavior

The top-level window's title text is just the default tab title.  If you rename the tab while it's the *active* tab, then the top-level window title is updated... until you switch away from the tab.  Once you return back to the tab, the top-level window has returned to the default title for the tab.


This is the console:
![image](https://user-images.githubusercontent.com/10259764/86709258-9c059080-bfce-11ea-92fa-e81f288898a7.png)

But this is what ALT+TAB thinks it's titled -- I'd expect it to say ""bananas"" at the top, not ""PowerShell"":
![image](https://user-images.githubusercontent.com/10259764/86709196-8db77480-bfce-11ea-9bd3-ffbc7300bb9a.png)
",PankajBhojwani,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-3;good first issue,2020-07-07T04:26:05Z,2020-07-30T18:58:29Z,jtippet,DHowett;JakubKoralewski;zadjii-msft,DHowett,DHowett,DHowett,,PankajBhojwani,
microsoft/terminal,6862,"Error 0xd0000022 when launching any shell (PS, cmd, git bash, PS7, Azure Cloud Shell) in WT # Environment

```
Windows build number 10.0.18363.0

Windows Terminal (Unpackaged)
Version: 1.0.200629001-release1.0
```

# Steps to reproduce

Run the terminal without admin privileges and open any cli (powershell, cmd, git bash - whatever)

# Expected behavior

Terminal opens shells

# Actual behavior

[error 0xd0000022 when launching `powershell.exe']
[error 0xd0000022 when launching `cmd.exe']
[error 0xd0000022 when launching `""%PROGRAMFILES%\git\usr\bin\bash.exe"" -i -l']
[error 0xd0000022 when launching `C:\Program Files\PowerShell\7\pwsh.exe']

# Additional info
I tried to open with full path to powershell, to shortcut, created the profile, none of that worked. 
Actually, any of the programs I tried to run in WT - did not work. 
I have read/write access to the folder I have WT in. 
I have access to the folder the powershell starts in
I am now using unpacked version instead of installed - both of them not working.
To open the shell you need to run WT as admin and this is actually not acceptable for me.

I was about to move to WT, but ConEmu still wins with it, for now. It's opening any shell like a charm.
I attached ConEmu that runs powershell without admin rights and Windows Terminal that runs the same command and doesn't work. 
![image](https://user-images.githubusercontent.com/28461795/87147129-63a2d280-c2ac-11ea-8089-7782c01f59f6.png)",DHowett,Needs-Repro;Resolution-External;Product-Conpty;Area-Server;Issue-Bug;Resolution-No-Repro;Priority-2,2020-07-10T10:54:35Z,2020-11-25T19:10:10Z,quadzz,quadzz;zadjii-msft;randyridge;eryksun;DHowett;madrum,zadjii-msft;DHowett,zadjii-msft;DHowett,,,DHowett,
microsoft/terminal,6866,"Extra IntelliSense errors caused by include paths and precompiled headers # Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): master branch, commit fc083296b98a2c45126da7a0a61a2ccb37786e48
Visual Studio 2019, 16.6
```

# Steps to reproduce

* Clone the project as described in the README.
* Open `OpenConsole.sln` in Visual Studio, switch the platform from ""Any CPU"" to ""x64,"" and build the TerminalAppLib project.
* Open `TerminalPage.cpp` (under `controls/TerminalPage.xaml` in the solution explorer).

# Expected behavior

IntelliSense should not show any errors/red squiggles, given that the build succeeded.

# Actual behavior

IntelliSense finds the wrong `pch.h` file and goes on to produce a few hundred errors about missing definitions.

Specifically, it finds `src\cascadia\TerminalApp\pch.h` instead of `src\cascadia\TerminalApp\lib\pch.h`. You can confirm this by using Go To Definition/F12 on the `#include ""pch.h""` at the top of `TerminalPage.cpp`. Changing this to `#include ""lib/pch.h""`, or making an equivalent change to the project include paths, lets IntelliSense find the right header and all the errors disappear.

The build succeeds because the compiler does not use the usual include path search for this header when PCH is enabled, while IntelliSense fails because its PCH implementation does not work this way.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Terminal;Priority-2,2020-07-10T21:39:09Z,2020-08-20T22:44:38Z,rpjohnst,DHowett;mpela81,DHowett,zadjii-msft,zadjii-msft,,,
microsoft/terminal,6870,"Translation error when current process ends <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [version 10.0.19041.329]
Windows Terminal version (if applicable): 1.0.1811.0

Any other software?
```

# Steps to reproduce
- open a WSL terminal
- from another terminal, shutdown the WSL instance

When current Terminal process ends, a message with the exit code is shown. This is what appears in French:

> [processus termin鑼卐 avec le code 1]

There's a little typo, this should be;

> [processus termin鑼 avec le code 1]

How is handled localization in Windows Terminal? Maybe I could make a PR myself?

![image](https://user-images.githubusercontent.com/199648/87218479-58ef4880-c353-11ea-8171-068850f8e852.png)
",DHowett,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-Localization,2020-07-11T06:49:46Z,2020-07-15T23:35:59Z,warpdesign,DHowett,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,696,"unbroken runs containing ligatures occasionally cause font size flickering * Your Windows build number: 
10.0.18362.86
* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
I'm using [Fixedsys Excelsio](https://github.com/kika/fixedsys) font, and this happened:
![issue](https://user-images.githubusercontent.com/14933408/57565021-565c3080-73e8-11e9-92e4-acfa178b011f.gif)

* What's wrong / what should be happening instead:

The text turned to small text after typing ""--"" with Fixedsys Excelsio font

This font in VSCode
![QQ閹撮崶20190511122906](https://user-images.githubusercontent.com/14933408/57565025-6411b600-73e8-11e9-9bfc-a3099a23f217.jpg)

",miniksa,Resolution-Fix-Committed;Area-Rendering;Area-Fonts;Issue-Bug;Product-Terminal,2019-05-11T04:31:32Z,2020-03-02T19:21:08Z,GEEKiDoS,zadjii-msft;DHowett-MSFT;thomazmoura;miniksa,oising;zadjii-msft;miniksa,miniksa,DHowett-MSFT,,,
microsoft/terminal,7056,"Azure Cloud Shell keeps resulting in ""Key not found"" error I keep seeing the following behavior:

```
Tenant 0: Default Directory (brillfoxyahoo.onmicrosoft.com)
Tenant 1: Microsoft (microsoft.onmicrosoft.com)
Please enter the desired tenant number.
Enter n to login with a new account
Enter r to remove the above saved connection settings.
> 1
Requesting a cloud shell instance...
Succeeded.
Key not found
[process exited with code 1]
```

This issue seems persistent.",DHowett;Don-Vito,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-AzureShell,2020-07-24T07:03:54Z,2020-11-09T22:55:46Z,rajhimanshu,Javanite;DHowett;wbpluto;Don-Vito;ChadLevy;homotechsual;iAmSaugata;zadjii-msft;coujean99;yiigy;csijake;markashleybell;jamesdecourcy,zadjii-msft,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,714,"Arrows don't have consistent width * **Your Windows build number:** (Type `ver` at a Windows Command Prompt): Microsoft Windows [Version 10.0.18894.1000]
* **What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots):** Arrows in the [arrow unicode block](https://en.wikipedia.org/wiki/Arrows_(Unicode_block)) have different widths and sizes. Some take twice the width and  some appear bigger than the others

    I checked with the command `for ($i = 0x2190; $i -le 0x21F0; $i += 16) { for ($j = 0; $j -lt 16; $j++) { Write-Host -NoNewline $([char]($i + $j)); }; echo """" }` and here's the output

    ![image](https://user-images.githubusercontent.com/9285512/57579664-8f200680-74c9-11e9-869c-24051fe708a9.png)

    As you can see, some vertical arrows take 2 cells and some horizontal arrows lie in a single cell width. That breaks the table layout like this

    ![wttr in](https://user-images.githubusercontent.com/9285512/57579534-86c6cc00-74c7-11e9-97be-e12bd1913885.png)

* **What's wrong / what should be happening instead:** They should have at least the same point size and width. I think all of them should be in a square (i.e. double width)

FWIW here's the above wttr.in output on Linux

![image](https://user-images.githubusercontent.com/9285512/57579713-2a18e080-74ca-11e9-8767-19c6af6a105f.png)
",miniksa,Resolution-Fix-Available;Area-Rendering;Issue-Bug;Product-Terminal;Priority-2,2019-05-12T08:31:54Z,2020-02-20T20:14:59Z,phuclv90,oising;zadjii-msft;DHowett-MSFT,oising;miniksa;zadjii-msft;cinnamon-msft;DHowett-MSFT,miniksa,miniksa,,DHowett-MSFT,
microsoft/terminal,7222,"Output should not keep scrolling down when manually scrolled up <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement
For example, when tailing/following a log, and cursor is at the bottom. I expect the output to be scrolled down automatically.

However, if I manually scroll up to certain spot (e.g., looking at a test failure), I don't want my current view keep getting scrolled down. It should lock in place when user manually scrolls up. When user scrolls all the way to the bottom, then it should resume tailing.

<!-- 
A clear and concise description of what the problem is that the new feature would solve.
Describe why and how a user would use this new functionality (if applicable).
-->

",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Needs-Triage;Product-Terminal;Priority-2,2020-08-07T21:33:39Z,2020-08-11T19:57:46Z,sozercan,50Wliu;sozercan;zadjii-msft,sozercan;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,7232,"Vim output getting skewed and duplicated chaotically when increasing the font size or resizing the window <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18363.0
Windows Terminal version (if applicable): 1.1.2021.0

Any other software?
Vim, version 8.1
```

# Steps to reproduce

Open Windows Terminal and, in a powershell tab, launch vim with a file containing text.
Change the font size with CTRL+MouseWheelScroll.
Resize the terminal window by draging one of the sides.

# Expected behavior

The output of vim should stay stable, i.e. simply get bigger or smaller, with CTRL+MouseWheelScroll, and not budge when resizing the window.

# Actual behavior

As the title implies, the output gets skewed and spread over the screen in a chaotic fashion, lines fall out of allignment with each other and get duplicated upwards when resizing the font ; resizing the windows after that does the same. This is illustrated in [this](https://imgur.com/a/SX25111) mp4 screen capture (I had troubles recording a gif, so I had to make an mp4 file).

Note that, right after starting vim, resizing the windows does not affect the output the same way if the font size was not changed with CTRL+MouseWheelScroll before. Instead, as the window is being resized, the lines flicker as they get dragged horizontally accross the window. When the resizing motion is stopped, they fall back into their intended positions and the output stabilizes, but lines of the file still get duplicated above chaoticaly, which can be seen by scrolling up. This is illustrated in [this](https://imgur.com/a/M695jOz) mp4 screen capture.

This is an issue with the display of the text output when using vim, I have not tested it with other software, and while the displayed text gets skewed and duplicated, the actual contents of the file being viewed don't get modified by this.

Finaly, note that the abnormal behaviours described above do *not* occur in a regular powershell window, i.e. an instance of powershell created with the powershell start menu icon. They only occur in Windows Terminal.
",DHowett,Resolution-Duplicate;Issue-Bug;Product-Terminal,2020-08-10T13:02:59Z,2020-08-19T21:07:35Z,Tompouce-onGit,zadjii-msft;Tompouce-onGit;Axedyson;waf;DHowett,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,7234,"Providing an int value for `padding` will hyperexplode the Terminal on launch Add the following to a profile:

```jsonc
  ""padding"": 0
```


Prior to #6590, I think this worked. However now we're forcing the typecheck, and that's somehow causing us to entirely fail to load the user settings, which causes the app to crash on launch.

",DHowett,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Severity-Blocking;Priority-0,2020-08-10T16:20:54Z,2020-08-10T19:48:34Z,zadjii-msft,,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,7254,"Command palette no longer shows ""no matching commands"" This is a likely regression from #6732 

![image](https://user-images.githubusercontent.com/189190/89968277-442efa80-dc08-11ea-9784-ecf76dc56c52.png)
",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Severity-Blocking,2020-08-12T02:24:07Z,2020-08-12T23:25:51Z,DHowett,,DHowett,zadjii-msft,DHowett,,,
microsoft/terminal,7278,"Tab switcher gets confused when tabs are closed in a certain order 1. Launch (tab 1)
2. New tab (tab 2)
3. Close first tab (tab 1)
4. New tab (tab 3)
5. Use switcher

It will select tab 3 (index 1).

![ats_wrap_what](https://user-images.githubusercontent.com/189190/90179129-d565b480-dd61-11ea-8bc7-c3c87f3f26fd.gif)
",leonMSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Severity-Blocking;Priority-1,2020-08-13T19:38:32Z,2020-08-13T20:35:29Z,DHowett,,DHowett,DHowett,DHowett,,,
microsoft/terminal,7342,"UIA: degenerate text ranges not degenerate after move <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd] Latest master of OpenConsole
Windows Terminal version (if applicable):

Any other software? NVDA
```

# Steps to reproduce

```Python console
>>> # In the NVDA Python console (NVDA+control+z)
>>> # In a Microsoft Word document (using UIA for access, enable in advanced settings), caret positioned on the first ""C"" in ""Cactus"".
>>> start = nav.makeTextInfo(""caret"")
>>> end = start.copy()
>>> end.move(""character"", 2) # move to the second ""c"".
2
>>> marker=start.copy()
>>> marker.setEndPoint(start, ""startToStart"") # Calls MoveEndpointByRange for UIA controls.
>>> marker.setEndPoint(end, ""endToEnd"")
>>> marker.text
'Ca' # GOOD

>>> # Now, in conhost with UIA enabled
>>> start = nav.makeTextInfo(""caret"")
>>> end = start.copy()
>>> end.move(""character"", 2)
2
>>> marker=start.copy()
>>> marker.setEndPoint(start, ""startToStart"")
>>> marker.setEndPoint(end, ""endToEnd"")
>>> marker.text
'Cac' # BAD
```

# Expected behaviour
Conhost matches Microsoft Word when calling `MoveEndpointByRange`.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behaviour
See above.

<!-- What's actually happening? -->
",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1,2020-08-19T08:52:18Z,2020-09-04T20:59:39Z,codeofdusk,codeofdusk,carlos-zamora;zadjii-msft,carlos-zamora;zadjii-msft,zadjii-msft,,,
microsoft/terminal,7367,"Scroll via click in scroll bar? When I click in terminal's vertical scroll bar, above or below the slider, the window scrolls 4 lines.  In most other places, including the Window's console, such a click results in the window scrolling 1 page.  Is this by design?  Do I have any control over it?   - Vince
",DHowett,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Needs-Tag-Fix;Priority-3,2020-08-21T15:49:58Z,2020-08-24T22:54:03Z,vefatica,DHowett;vefatica,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,7372,"Setting 'altGrAliasing' to 'false' disables AltGr <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19041.0
Windows Terminal version (if applicable): 1.1.2233.0

Any other software? No
```

# Steps to reproduce

1. Open Windows Terminal
1. Edit its settings and set `altGrAliasing` to `false` in `profiles/default`
1. Switch back to Windows Terminal and try to enter a character via `AltGr+...`

# Expected behavior

The appropriate character should appear.

# Actual behavior

Nothing is written.

",lhecker,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal,2020-08-22T10:19:24Z,2020-08-25T18:04:24Z,skrysmanski,DHowett;skrysmanski;zadjii-msft;lhecker,DHowett;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,7418,"Terminal Preview 1.3 breaks Windows PowerShell 5 (32-bit x86)'s history save and view and its command line colors ### Environment

**Windows build number:** Microsoft Windows [Version 10.0.19042.422] for x64
**Windows Terminal version (if applicable):** 1.3.2382.0

Using the default Terminal settings.json file and without any PowerShell profile files.

### Steps to reproduce

1. Make sure that Windows Terminal Preview is registered to be run as `wt.exe` in Settings -> Apps -> Apps and features -> App execution aliases, and log out and log in if needed to make the setting fully take effect.
1. Run this command from Start -> Run: `wt.exe ""C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe""`
1. Type `get-help gv -ful` with one L, press Tab.
1. Observe `get-help gv -Full` with 2 letters L, and the colors of that string.
1. Press Enter to run the command.
1. Exit Terminal and restart it using the same command you previously used in Start -> Run.
1. Press the up arrow key repeatedly.

### Expected behavior

* In the `get-help` command you ran, `get-help` was in yellow and `-Full` was in a darker shade of gray than the other text.
* After relaunching Terminal, you could use the up arrow key to see your command history, including the `get-help` command you just ran.

### Actual behavior

* In the `get-help` command, all the text was the same color.
* The command history was not accessible.
* If you now run PowerShell (x86) using the old console window, you see that the `get-help` command and other commands you ran in PowerShell within Terminal were not recorded in the history.",DHowett,Product-Powershell;Resolution-Fix-Committed;Issue-Bug;Area-TerminalConnection;Product-Terminal;Priority-1,2020-08-26T21:11:18Z,2022-01-12T04:37:54Z,metathinker,DHowett;paulomorgado;iSazonov;zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,7422,"1 pixel gap around window prevents mouse from interacting with control buttons (minimize, maximize, close) # Environment

```none
Windows build number: Win32NT, 10.0.19042.0 Microsoft Windows NT 10.0.19042.0
Windows Terminal version (if applicable): 1.1.2233.0
```

# Steps to reproduce

1. Maximize the window.
2. Move the mouse to the very top right corner of the screen and click to close the window.

# Expected behavior

Correct/typical behavior (e.g. for File Explorer, Edge, UWP apps, etc...) is that the mouse interacts with the window control buttons (minimize, maximize, close) when touching the top edge of the screen, or the top right corner. Meaning, the mouse can be put into the very top right corner of the screen, and when clicking, the close button is engaged and the window closes. For the Windows Terminal, there seems to be a 1pixel ""gap"" along the top/sides of the window that prevents this from working.

# Actual behavior

The close button does not go into a hover state with the mouse located there and the window does not close.

See example where mouse cursor is at top right corner of the screen but the close button is not ""lit up"" red:

![mouse-cursor-in-top-right-corner](https://user-images.githubusercontent.com/650202/91360208-468f7800-e7f6-11ea-9a9d-9405730bea29.png)

I see this on some apps here and there -- Nitro PDF is another example.",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2020-08-26T21:46:36Z,2021-07-28T22:15:22Z,chrismarts,DHowett;chrismarts;devhl-labs;zadjii-msft;itshoro;xnoreq;Don-Vito;bazzilic;avanishsubbiah;SpitFire-666;KalleOlaviNiemitalo,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,7438,"The keyboard shortcut: ""ctrl + j = 閳"", ""ctrl + i = 閳"", ""ctrl + l = 閳"", ""ctrl + k = 閳"" is broken. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.20201.0 Microsoft Windows NT 10.0.20201.0
Windows Terminal version: 1.2.2381.0

Any other software?
```

# Steps to reproduce

I have set up the replacement of keyboard shortcuts in ""PowerToys"" using the ""Keyboard Manager"" option: 

```
ctrl+j = 閳 
ctrl+i = 閳 
ctrl+l = 閳 
ctrl+k = 閳
```

This is very convenient 閳 it will allow you to hold both hands in the center of the keyboard without having to often use the arrows on the side of the working area on the keyboard. 

In v1.2.2381.0 version these key combinations are broken. 

But the combination: ""ctrl + h = Backspace"" works.

I had to roll back to v1.2.2234.0 where the keyboard shortcuts work. 

There is also a problem with keyboard shortcuts in Windows Terminal Preview v1.3.2382.0.

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# What I expect

By pressing the key combination ctrl+j I expect to get the command ""閳"". 

By pressing the ctrl+i key combination I expect to get the ""閳"" command. 

By pressing the ctrl+l key combination I expect to get the command ""閳"". 

By pressing the ctrl+k key combination, I expect to receive the command ""閳"". 

<!-- What's actually happening? -->

# What happening actually

By pressing ""ctrl+j"", ""ctrl+i"", ""ctrl+l"", ""ctrl+k"", Windows Terminal does not react in any way 閳 nothing happens. In other programs, the specified keyboard shortcuts work correctly. In the Windows Terminal v1.2.2234.0 version, the specified keyboard shortcuts also worked correctly.",zadjii-msft;lhecker,Resolution-Fix-Committed;Area-Input;Issue-Bug;Product-Terminal;Priority-1,2020-08-27T21:47:11Z,2020-10-27T19:06:30Z,haosmos,zadjii-msft;DHowett;mathiasringhof;lesleyrs,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,744,"Shift-Tab through powershell window goes back one command then switches outside of window This bug-tracker is monitored by Windows Console development team and other technical types.  **We like detail!**

If you have a feature request, please post to [the UserVoice](https://wpdev.uservoice.com/forums/266908).  

> **Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**. Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible

* Your Windows build number:  Microsoft Windows [Version 10.0.18895.1000]

* What you're doing and what's happening: entering get- and hitting shift-tab to cycle through available options

* What's wrong / what should be happening instead: should be cycling through available commands, instead only cycles back one command then focus leaves window. Regular tab cycling works as expected.

![image](https://user-images.githubusercontent.com/49215683/57638958-80425e00-7574-11e9-88c1-1e72d0939a85.png)
",zadjii-msft,Resolution-Fix-Available;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal,2019-05-13T16:45:46Z,2019-05-24T20:04:01Z,mtquigley,zadjii-msft;LukeDearden,zadjii-msft;miniksa,miniksa;zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,7539,"Default bound key combinations are not working as expected on international keyboard layouts <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.19041.450]
Windows Terminal version (if applicable): 1.2.2381.0

```
+ *Swedish* keyboard layout

# Steps to reproduce

invoke the Font Size Increase command <kbd>ctrl</kbd>+<kbd>=</kbd> on a *Swedish* keyboard layout.

(hint: that would be <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>0</kbd>)

# Expected behaviour

Font size increases one step.

# Actual behaviour

Nothing happens.

# Reflections

- The new Command Palette (that I am already a huge fan of, despite it's flaws) insists that Increase Font Size is bound to <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>0</kbd> (bonus bug?)

- Referring to the **Modifier keys** section in http://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#key-binding-properties it appears that all the characters that are <kbd>shift</kbd>:ed on an American keyboard layout are invalid bindings. This theory is also widely supported by the fact that Windows Terminal binds <kbd>ctrl</kbd>+<kbd>shift</kbd>+*numeral* to *newTab* and <kbd>ctrl</kbd>+<kbd>alt</kbd>+*numeral* to *switchToTab*.

- International keyboards often move the special characters around on the keyboard. (In the case with the Swedish keyboard layout, to fit in the three extra vowels in our 29 letter alphabet.)

- It appears that the problem is how Terminal deals with characters that are bound to the numeric keys.",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Product-Terminal;Impact-Correctness,2020-09-05T08:12:39Z,2021-07-20T22:34:52Z,pstaag,MiHondo2020;DHowett;lhecker,DHowett,,lhecker,,,
microsoft/terminal,7597,"An empty OSC8 followed by an SGR 0 fails to terminate hyperlink over ConPTY at the bottom of the screen (!) Behavior:

![image](https://user-images.githubusercontent.com/189190/92791945-f837b880-f361-11ea-85d7-51a0212dbbed.png)

There might be something in conpty that should be calling the new `SetDefaultMeta...` method.",PankajBhojwani,Resolution-Fix-Committed;Product-Conpty;Area-VT;Issue-Bug;Needs-Tag-Fix;Severity-Blocking;Priority-1,2020-09-10T19:34:44Z,2020-09-11T18:00:32Z,DHowett,DHowett;PankajBhojwani,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,760,"Microsoft.UI.Xaml causes an exception when any flyout menus are generated After modifying Cascadia project to debug in ""Native Only"" mode, I come across this exception, when clicking dropdown menu (to open a new tab in the terminal):

![image](https://user-images.githubusercontent.com/19501248/57662896-f4443b00-7634-11e9-81bd-c4bd3af09aff.png)

File: src/cascadia/WindowsTerminal/main.cpp
Win Version: 10.0.18362.86
VS19: 16.0.3

I would like to investigate if anyone can point me in the right direction.",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-05-14T00:47:26Z,2019-10-15T05:41:45Z,finesse-fingers,DHowett-MSFT;drekryan;fghzxm,DHowett-MSFT;miniksa,miniksa,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,7650,"conhost can take over keyboard keys when launched from .exe symbolic link You're going to think this is crazy talk, but hear me out.

Using Vb (19041) conhost, do this:

### cmd

```
mklink %USERPROFILE%\cmd_link.exe c:\windows\system32\cmd.exe
```

Open up File Explorer to `%USERPROFILE%` and _double-click `cmd_link.exe`_.

If you have a repro, any time you press <kbd>L</kbd> that console window will come to the foreground.

Wild, right?

It looks like the shell invokes `cmd_link.exe` with `STARTF_TITLEISLINKNAME` and an `lpTitle` of `...\cmd_link.exe`.

> **`STARTF_TITLEISLINKNAME`**: The `lpTitle` member contains the path of the shortcut file (.lnk) that the user invoked to start this process. This is typically set by the shell when a .lnk file pointing to the launched application is invoked. Most applications will not need to set this value.

It turns out that this [excerpt from the documentation](https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa) is a fabrication, and `lpTitle` might point to an `.exe` file.

Anyway, when the title is the ""link name"", conhost uses the title to find the `.lnk` file. It gets in here:

https://github.com/microsoft/terminal/blob/f91b53d5fdc5b20387e297357668f5f14a795d4c/src/interactivity/win32/SystemConfigurationProvider.cpp#L94-L106

This fails. `s_GetLinkValues` attempts to get an `IShellLink...` for what is clearly not a `.lnk` file. However, check out that last parameter.

It's never cleared. It's filled with stack garbage.

Moments later, we do this:

https://github.com/microsoft/terminal/blob/f91b53d5fdc5b20387e297357668f5f14a795d4c/src/interactivity/win32/SystemConfigurationProvider.cpp#L114-L115

...which sets up the hotkey that will later be used to activate the window, down here:

https://github.com/microsoft/terminal/blob/f91b53d5fdc5b20387e297357668f5f14a795d4c/src/interactivity/win32/window.cpp#L350-L353

We should probably zero-initialize `wHotKey`.",miniksa,Product-Conhost;Resolution-Fix-Committed;Area-Server;Issue-Bug;Priority-2,2020-09-17T01:20:11Z,2021-01-06T12:03:46Z,DHowett,DHowett;miniksa;gerardog;dmex;eryksun;zadjii-msft;xxbiohazrdxx,DHowett,DHowett,miniksa,,,
microsoft/terminal,7663,conhost crash in narrator scan mode when jumping to heading 1 open conhost. enter scan mode. press `1` to navigate to the first heading,carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Priority-1,2020-09-18T01:52:10Z,2020-09-23T20:06:19Z,DHowett,DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,7664,"conhost crash (unknown cause) with UIA text range at {0, -1}  x |  x |  x | x  | x  | x  |  x |x  |  x| xz
-- | -- | -- | -- | -- | -- | -- | -- | -- | --
8 | conhost!Microsoft::Console::Types::Viewport::WalkInBoundsCircular | 鑱 | 0x0000000000000031 | 鑱 | 鑱 | 鑱 | viewport.cpp | 鑱 | 411
9 | conhost!Microsoft::Console::Types::Viewport::WalkInBounds | 鑱 | 0x0000000000000019 | 鑱 | 鑱 | 鑱 | viewport.cpp | 鑱 | 383
10 | conhost!TextBuffer::_GetWordEndForAccessibility | 鑱 | 0x0000000000000092 | 鑱 | 鑱 | 鑱 | textbuffer.cpp | 鑱 | 1141
11 | conhost!Microsoft::Console::Types::UiaTextRangeBase::ExpandToEnclosingUnit | 鑱 | 0x00000000000001C0 | 鑱 | 鑱 | 鑱 | uiatextrangebase.cpp | 鑱 | 271
12 | uiautomationcore!ProviderCallouts::ExpandToEnclosingUnit | 鑱 | 0x0000000000000043 | 鑱 | 鑱 | 鑱 | ProviderCallouts.h | 鑱 | 1362
13 | uiautomationcore!RemotePatternStub::TextRange_ExpandToEnclosingUnit

",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Priority-1,2020-09-18T01:53:19Z,2020-09-23T20:06:19Z,DHowett,,DHowett,DHowett,DHowett,,,
microsoft/terminal,7698,"Hyperlinks with the same ID and different URIs collide when they shouldn't In Windows Terminal Preview 1.4.2652.0.
Hyperlinks support is a great addition, but from my understanding there is a bug with how links IDs are parsed and handled.

> Character cells that have the same target URI and the same nonempty id are always underlined together on mouseover.
> The same id is only used for connecting character cells whose URIs is also the same. Character cells pointing to different URIs should never be underlined together when hovering over.
(Source: https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda#hover-underlining-and-the-id-parameter )

But testing the same ID with different URIs shows Windows Terminal is grouping them together and using the URI of the last one for both :
`echo -e '\e]8;id=a;http://www.microsoft.com/\aMicrosoft\e]8;;\a \e]8;id=a;http://www.google.com/\aGoogle\e]8;;\a'`

![image](https://user-images.githubusercontent.com/25664275/93923654-f8499800-fd13-11ea-9db5-ab3a93860485.png)

Even different IDs are grouped together if they are not numbers:
`echo -e '\e]8;id=a;http://www.microsoft.com/\aMicrosoft\e]8;;\a \e]8;id=b;http://www.google.com/\aGoogle\e]8;;\a'`

While the page about hyperlinks explicitely shows and states that these IDs are strings, not numbers:

> params is an optional list of key=value assignments, separated by the : character. Example: id=xyz123:foo=bar:baz=quux.

> Complex apps that display data that might itself contain OSC 8 hyperlinks (such as terminal multiplexers, less -R) should do the following: If the encountered OSC 8 hyperlink already has an id, they should prefix it with some static string, or if multiple windows/panes are supported by the app, a prefix that's unique to that window/pane to prevent conflict with other windows/panes.",DHowett,Resolution-Fix-Committed;Area-VT;Issue-Bug;Product-Terminal;Priority-2,2020-09-22T18:41:34Z,2020-10-16T22:09:00Z,PhMajerus,DHowett;PhMajerus;PankajBhojwani,DHowett,DHowett,,,,
microsoft/terminal,7710,"Terminal gets extremely sluggish after a day of use I'm finding that if I use Windows Terminal for more than a day, it starts to get extremely sluggish: there is a lag in opening and closing new tabs and a lag in switching between tabs and a lag in typing. This problem immediately resolves itself if I close the application and restart it.

I'm not sure how to give a more detailed bug report. I tried downloading WPR, but it errored out when I tried to make a recording.

My setup is as follows: I'm using the beta version of Terminal, running WSL2 with ubuntu 20.04. I'm on the insider branch of Windows 10 with CUDA support for WSL2 enabled. My laptop is a Razer Blade advanced 2019 4K with an nvidia 2080 mobile graphics card. 
",lhecker,Resolution-Fix-Committed;Area-Performance;Issue-Bug;Product-Terminal;Priority-2,2020-09-23T16:45:06Z,2021-04-06T19:07:50Z,lminer,zadjii-msft;mehgcap;stedaniels;RoyLi-Pvt;kyuyeonpooh;NeilMacMullen;MikeRixWolfe;Blaok;Don-Vito;alexandermalfait;djsavvy;JohnLukeBentley;rebane2001;lminer,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,773,"Fix AuditMode for BufferOut project I went to turn on the `AuditMode` solution configuration and it appears to do half-past-nothing for the one project I had it enabled on: `BufferOut`.

I want to get this proven again on the `BufferOut` project (and clean up the warnings) so we can roll out the static code analysis checks of `AuditMode` further to the other projects (and probably in some sort of CI build that runs less frequently but still runs because static analysis is expensive time-wise relative to the standard CI build).",adiviness,Product-Conhost;Issue-Bug;Area-Build;Product-Terminal;Needs-Tag-Fix,2019-05-14T15:53:09Z,2019-05-24T21:48:11Z,miniksa,,miniksa,miniksa,miniksa;adiviness,adiviness,adiviness,
microsoft/terminal,7742,"UIA: incorrect move to previous word Since #7677 was merged:

In the NVDA Python console (NVDA+control+z):

### Word

```python console
>>> # In a Word document (accessed VIA UIA, positioned on the start of the text ""My name is Carlos""):
>>> ti=nav.makeTextInfo(""caret"")
>>> ti.expand(""word"")
>>> ti.text
'My '
>>> ti.collapse() # Make a degenerate range (move end to start)
>>> ti.move(""word"", 1)
1
>>> ti.expand(""word"")
>>> ti.text
'name '
>>> ti.collapse()
>>> ti.move(""word"", -1)
-1
>>> ti.expand(""character"")
>>> ti.text
'M' # GOOD
```

### conhost

```python console
>>> # Now, in Conhost
>>> ti=nav.makeTextInfo(""caret"")
>>> ti.expand(""word"")
>>> ti.text
'C:\\Users\\codeofdusk>My '
>>> ti.collapse() # Make a degenerate range (move end to start)
>>> ti.move(""word"", 1)
1
>>> ti.expand(""word"")
>>> ti.text
'name '
>>> ti.collapse()
>>> ti.move(""word"", -1)
-1
>>> ti.expand(""character"")
>>> ti.text
' ' # BAD
```

Cc @carlos-zamora.",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Product-Terminal;Priority-1,2020-09-25T21:28:31Z,2020-09-30T18:13:23Z,codeofdusk,codeofdusk;DHowett,carlos-zamora;DHowett,carlos-zamora;DHowett,carlos-zamora,,,
microsoft/terminal,7754,"Unable to drag/drop a file to terminal with UAC turned off Windows Version
10.0.19042.0
Terminal Version
1.3.2651

Any other software?
None open at the time

# Steps to reproduce

Run windows terminal as administrator.
Try to drag a file/folder into the terminal to copy its path to the terminal window.
Does not work.

# Expected behavior

I expected drag and drop for files/folders into the terminal window to behave the same as a command prompt or powershell window, both behave as expected in non-admin or administrator permission instances of the aforementioned programs.

# Actual behavior

Path does not get copied during drag and drop into the terminal window, I just get the ""deny"" ""not allowed"" cursor icon when trying, unsure if this is related to the ongoing issue of being unable to rearrange _tabs_ while in an admin window or not as seen in #6661",zadjii-msft,Resolution-By-Design;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2020-09-27T02:58:19Z,2021-09-16T17:13:11Z,Genesis-Nova,DHowett;Genesis-Nova;zadjii-msft,DHowett;zadjii-msft,DHowett;zadjii-msft,,,DHowett,
microsoft/terminal,7771,"UIA: crash at very end of buffer In the NVDA Python console (NVDA+control+z):

``` python console
>>> from NVDAObjects.UIA import UIATextInfo
>>> ti=UIATextInfo(nav, ""last"")
>>> ti.move(""character"", 1)  # conhost crashes
Traceback (most recent call last):
  File ""<console>"", line 1, in <module>
  File ""NVDAObjects\UIA\__init__.pyc"", line 752, in move
  File ""comtypesMonkeyPatches.pyc"", line 26, in __call__
_ctypes.COMError: (-2147220991, 'An event was unable to invoke any of the subscribers', (None, None, None, 0, None))
```

Note: fixing this bug may result in strange behaviour from NVDA (see [here](https://github.com/nvaccess/nvda/blob/master/source/NVDAObjects/UIA/winConsoleUIA.py#L53), around line 53). I'll remove the offending workaround once a fix is merged to master.

I suspect #6986 would fix this bug, but I think the root cause of this crash should be investigated before then. Cc @carlos-zamora.",carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Needs-Tag-Fix;Priority-0,2020-09-28T23:49:01Z,2020-10-05T22:11:48Z,codeofdusk,DHowett;codeofdusk;carlos-zamora,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,7803,"UIA: GetVisibleRanges() returning text beyond the visible range <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd] OpenConsole (relaese build of #7792 )
Windows Terminal version (if applicable):

Any other software? NVDA
```

# Steps to reproduce
1. Call `GetVisibleRanges`.
2. Make a degenerate range at the end of this range.
3. Expand the degenerate range to line.
<!-- A description of how to trigger this bug. -->

# Expected behaviour
The last visible line is contained in the range.
<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behaviour
An empty line is contained in the range.
<!-- What's actually happening? -->
",carlos-zamora,Product-Conhost;Issue-Bug;Area-Accessibility;Needs-Triage,2020-10-02T01:01:11Z,2020-10-02T22:34:25Z,codeofdusk,codeofdusk;carlos-zamora;DHowett,carlos-zamora,carlos-zamora,carlos-zamora,,codeofdusk,
microsoft/terminal,7820,"Performance: slow first run and slow new tab opening when lot of profiles 
# Environment

```
Windows build number: 10.0.19041.508
Windows Terminal version): 1.4.2652.0
```

# Steps to reproduce

Add lot of profiles. At least 200. (my case is 190)

# Expected behavior

Opening of WT and opening new tabs should be fast.

# Actual behavior

Opening WT takes like 2-3sec. Opening the new tab also takes 2-3sec. The same with closing tabs. 
When I have few profiles everything is super fast.

Hardware config if someone thinks its question of power: Ryzen 7 4800H, 32GB RAM.
",PankajBhojwani,Help Wanted;Area-Performance;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-3,2020-10-03T17:39:10Z,2020-12-10T20:15:08Z,kszymukowicz,zadjii-msft;kszymukowicz;kczx3;DHowett;ghost;Don-Vito,zadjii-msft,zadjii-msft;DHowett,zadjii-msft,,kszymukowicz,
microsoft/terminal,7839,narrator scan mode [ctrl+end] crashes conhost _ut supra_,carlos-zamora,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Priority-0,2020-10-06T17:48:07Z,2020-10-09T20:27:14Z,DHowett,DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,7907,"[Screen Reader-Command Palette]:-Screen reader is not announcing the suggestions when user searches for the commands. **User Experience:**
Users who rely on screen reader will not be able to get the suggestions info displayed on searching for commands..

**Test Environment:**
App: Windows Terminal Preview
Feature: Command Palette
Screen Reader: Narrator
OS: Win 10 2004 Build (19041.508)

**Repro Steps:**
1.Open Windows terminal Preview app
2.Open Command Palette using shortcut (Ctrl+shift+p)
3.Search for any in command in the search field
4.Observe whether screen reader is providing any announcements or not after searching for commands.

**Actual:**
Screen reader is not announcing the suggestions info when user searches for the commands. Screen reader remains silent on searching.

**Expected:**
Screen reader should provide the results info on searching commands like 10 results found or suggestions available when there are any search results and if there are no search results then it should announce as No commands found . 

**MAS Reference:**
https://microsoft.sharepoint.com/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc={54f28d1f-a2d1-4dcd-84e1-5c9b87e8aba4}







",DHowett,Issue-Bug;Area-User Interface;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-2;Impact-Compliance;HCL-E+D;Area-CmdPal;A11yWCAG;HCL-WindowsTerminal;A11ySev2,2020-10-13T11:11:23Z,2022-02-19T04:41:27Z,DasaradhaKamjula,carlos-zamora;v-rpundir;zadjii-msft;DHowett,zadjii-msft;DHowett;cinnamon-msft;Chandresh1007;awalia13,DHowett;Priyanka-Chauhan123;cinnamon-msft;zadjii-msft,,,v-rpundir,
microsoft/terminal,7969,"Close Menu, ""Close other tabs"" and ""Close tabs to right"" always operate on tab index 0, are always enabled I'm not sure if this is an issue in main or an issue in feature/settings-ui.

/cc @mpela81 ",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-10-19T23:13:45Z,2020-11-04T18:15:05Z,DHowett,mpela81;DHowett;zadjii-msft,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,7994,"Opening a hyperlink can cause the Terminal to hang I originally posted this in #7691, but it turns out the hang wasn't even introduced there - it was already in `main` before that.

<hr>

Blocking based off the hang discussion we're currently having on teams. Turns out the main thread is grabbing the write lock twice:

Once in 
```
[0x4f] TerminalControl!winrt::Microsoft::Terminal::TerminalControl::implementation::TermControl::_PointerPressedHandler + 0x593
```

then again in
```
[0x6]   TerminalControl!winrt::Microsoft::Terminal::TerminalControl::implementation::TermControl::_TrySendKeyEvent + 0x116   
```

because WinUI somehow routes a `KeyDownEvent` to TermControl _during the `PointerPressed`???_


<hr>

Suggested fix:

```c++
if (point.Properties().IsLeftButtonPressed())
{
    const auto cursorPosition = point.Position();
    const auto terminalPosition = _GetTerminalPosition(cursorPosition);
    {
        // handle ALT key
        auto lock = _terminal->LockForWriting();
        _terminal->SetBlockSelection(altEnabled);
        // Release the write lock
    }
    // Re-grab the read lock
    auto lock = _terminal->LockForReading();
    ...
}
```",miniksa,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Severity-Blocking;Priority-0,2020-10-21T17:00:44Z,2020-10-29T14:03:31Z,zadjii-msft,DHowett;miniksa,zadjii-msft,zadjii-msft,zadjii-msft;DHowett,DHowett,,
microsoft/terminal,810,"Text Indicator Disappears When Using Chinese in Command Prompt Ported from internal issue MSFT: 21008771

> I don't use command prompt in Chinese, but my computer is with Chinese IME (PinYin). If I occasionally type a Chinese word inside the prompt, and switch back to US English IME (Usually when typing first few word and start+space to switch), the text indicator will disappear forever. This is really painful and freaking annoying, please fix this bug. Thanks.

This might be related to #803 ",j4james,Product-Conhost;Resolution-Fix-Committed;Area-Input;Area-Interaction;Issue-Bug;Priority-1,2019-05-14T23:45:11Z,2020-05-27T16:31:10Z,miniksa,,miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,miniksa,,,
microsoft/terminal,8146,"No profiles display when we load the defaults on first launch ![image](https://user-images.githubusercontent.com/189190/98027329-5eb8e000-1dc1-11eb-8bb7-4fb37ff79321.png)


This is likely because we're not populating the active/all lists when we fall back to the defaults.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal;Severity-Blocking;Priority-0,2020-11-03T18:43:27Z,2020-11-04T23:57:16Z,DHowett,,DHowett,DHowett,DHowett,,,
microsoft/terminal,819,"Alt-* makes a bell noise > This makes a bell noise everytime I switch to a tab via alt+1, alt+2 etc.

_Originally posted by @krokofant in https://github.com/microsoft/terminal/issues/573#issuecomment-491463293_

Test shows alt-number/letter/punctuation all will produce a bell.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Area-TerminalControl;Product-Terminal,2019-05-15T12:03:15Z,2019-05-24T21:43:48Z,bef178,zadjii-msft,zadjii-msft;miniksa,miniksa;zadjii-msft,zadjii-msft,,zadjii-msft,
microsoft/terminal,8243,"Cannot preinstall WT package 1.4.3141.0 Windows10_PreinstallKit.zip on Windows Server 10.0.20251.1000 <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: [run `[Environment]::OSVersion` for powershell, or `ver` for cmd] Windows Server 10.0.20251.1000
Windows Terminal version (if applicable): N\A

Any other software?
```

# Steps to reproduce
<!-- A description of how to trigger this bug. -->
1) Open elevated Powersell
Downloaded provided package zip, unblocked and expanded to C:\WT
Run Add-AppxProvisionedPackage -Online -FolderPath C:\WT
Add-AppxProvisionedPackage : No applicable main package was found for this platform.
The directory must contain an applicable package with a .main file extension. For more information, see the help.
Same result when specifying the msixbunde file with -PackagePath and the  license file with -License.
Using -FolderPath also doesn't work on W10 20H2, but specifying the files specifically does
# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

# Actual behavior

<!-- What's actually happening? -->
Installs WT for all users should work on Windows Server vNext?",DHowett,Issue-Bug;Area-Build;Product-Terminal;Needs-Tag-Fix;Priority-3;Tracking-External,2020-11-12T15:41:05Z,2021-10-11T18:08:15Z,PGomersall,zadjii-msft;WSLUser;PGomersall;DHowett,zadjii-msft;DHowett,zadjii-msft;DHowett,zadjii-msft,,PGomersall,
microsoft/terminal,8283,"Memory leak with several ANSI sequences <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19042.508
Windows Terminal version (if applicable): 1.5.3142.0

Any other software?
Node v15.2.0
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

+ Save the following content in a file, say, name it with `test.js`
```js
var readline = require('readline'),count = 0;
setInterval(() =>
{
	console.log(++count,new Date)
	readline.moveCursor(process.stdout,0,-1)
},10)
```
+ Open the cmd.exe in the terminal
+ Run the script saved above with `path\to\node.exe path\to\test.js`

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
No significant memory increasing should be observed

# Actual behavior

<!-- What's actually happening? -->

To compare with, another cmd.exe is also directly started by `Win+R` and run the same script.
Here is the initial memory usage
![Initial memory usage](https://user-images.githubusercontent.com/7867810/99187506-f7703800-2791-11eb-90ca-ca0daf64e6bf.png)
Also, reported by `Process Explorer`, the `WS Private` and `Working Set` are
```
WindowsTerminal.exe	36976 K	101816 K
```

Then, leave them run for hours, and here is the memory usage after the counter hit 400k+.
![Memory usage after 400k+](https://user-images.githubusercontent.com/7867810/99187576-5b92fc00-2792-11eb-8b2c-9f930be7f8a7.png)

Next, `Ctrl+C` to end both node processes, and wait for 5min.
![Memory usage after node killed](https://user-images.githubusercontent.com/7867810/99187598-81200580-2792-11eb-865e-37f21c5f1a0e.png)
```
WindowsTerminal.exe	96444 K	157840 K
```

It seems that it memory leaked.
And by roughly counting during the progress, the memory usage grow about 0.1 MB / 10 sec.
",zadjii-msft;miniksa,Resolution-Fix-Committed;Area-Performance;Issue-Bug;Product-Terminal;Priority-2,2020-11-15T14:39:00Z,2021-01-04T17:14:09Z,ZEDCWT,DHowett,DHowett,zadjii-msft,zadjii-msft,,,
microsoft/terminal,8291,"Incorrect Shift / Meta / Control bits set in xterm mouse mode # Environment
* **Windows build number:** Microsoft Windows [Version 10.0.19042.630]
* **Windows Terminal version (if applicable):** 1.4.3141.0
  * (This also applies to the legacy Windows Command Prompt app.)
* **Debian version (cat /etc/debian_version):** 10.6

# Steps to reproduce
1. Run debian.
2. Enable xterm mouse tracking mode: 
    ```bash
    $ echo -e '\e[?1000h'
    ````
3. Click on the upper right-most character with the left mouse button. Try doing this with a mix of Ctrl, Alt, and/or Shift held down.

# Expected behavior
Per https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking, we should get back six characters on a mouse button down event followed by an additional six characters on a mouse button up event. The first three characters (`ESC` `[` `M`) will not be displayed, only the last three characters per event get displayed - this is not a bug, it is just important to understand.

* A mouse button 1 down event with no modifiers held should display the following three characters: `Space` `!` `!`
* A mouse button 1 down event  with control held should display the following three characters: `0` `!` `!`
* A mouse button 1 down event with alt held should be treated as meta and display the following three characters: `(` `!` `!`
* A mouse button 1 down event with shift held should display the following three characters: `$` `!` `!`
* A mouse button 1 down event with control and alt held should display the following three characters: `8` `!` `!`

# Actual behavior

* With control held, you get `(` `!` `!` as if meta is held.
* With alt held, you get `Space` `!` `!`, as if nothing is held. 
* With shift held, you select characters (This is likely not a bug, just an override that I did not disable.)
* With control and alt held, you get `(` `!` `!`, as if only meta is held.",DHowett,Product-Conhost;Resolution-Fix-Committed;Area-VT;Issue-Bug;Product-Terminal;Priority-2;Impact-Correctness,2020-11-16T18:52:33Z,2020-11-30T03:45:54Z,chaosemer,DHowett;chaosemer;jdebp,DHowett,DHowett,DHowett,,,
microsoft/terminal,832,"Vim background color renders incorrectly * Your Windows build number:  (Type `ver` at a Windows Command Prompt)
Microsoft Windows [Version 10.0.18362.86]

* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
In conhost or Windows Terminal, using both Vim.exe and WSL Vim, background color rendering becomes broken if a background color >16 or true colors is used.

With an example file, e.g. https://github.com/GilbertsHub/web-utils/blob/master/cgibinIntercept.sh:
```bash
vim -u NONE cgibinIntercept.sh +""hi Normal ctermbg=17"" # for Windows: +""set t_Co=256""
# scroll down with CTRL-D
```

In general it is much easier to reproduce in WSL than Vim.exe, because it doesn't seem to occur after the initial scroll on Vim.exe and the effects are a bit different as described below. I can reproduce with any combination of conhost/terminal and Vim 8.1.883 on Ubuntu/8.0 on Debian/8.1 on Win32. Does not reproduce with neovim (v0.4.0-430-g8698830cb).

A few cases of example behavior:
   - Debian with conhost, Vim from official repository
```bash
$ sudo apt install vim
$ vim --version
VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Sep 30 2017 18:21:38)
Included patches: 1-197, 322, 377-378, 550, 703, 706-707
```
![vim-bg](https://user-images.githubusercontent.com/7876996/57801234-26729d00-7708-11e9-8006-c1adc1bbbbcf.png)
Same behavior in the new terminal.

   - Vim.exe on conhost cmd.exe installed from https://github.com/vim/vim-win32-installer/releases/download/v8.1.1099/gvim_8.1.1099_x64.exe
![vim-bg-conhost](https://user-images.githubusercontent.com/7876996/57803566-959ec000-770d-11e9-8c95-8a0ee6c13ef8.png)
Background color is wrong on the text part but correct otherwise (purple, although this seems to depend on active colorscheme) but is fixed after a Ctrl-L redraw.

   - Vim.exe on Terminal cmd.exe, same as above
![vim-bg-terminal](https://user-images.githubusercontent.com/7876996/57802546-13ad9780-770b-11e9-88c6-1cba57e4fa9d.png)
Background color is again wrong, but the background highlight completely disappears after a Ctrl-L redraw.

* What's wrong / what should be happening instead:
Background rendered the whole width of the window, e.g. in wsltty:
![vim-bg-wsltty](https://user-images.githubusercontent.com/7876996/57802542-101a1080-770b-11e9-93dd-338d8410e04f.png)

The effect is very similar to the issue https://github.com/microsoft/terminal/issues/375, however that one happens with bg color set to <16 (`darkBlue`). However I cannot reproduce that issue anymore, including the terminal bg change.

The issues for Win32 and Linux versions might be separate, since their effects are pretty different as described above.

I also haven't been able to reproduce this using VT sequences, but I hope the bug report is still useful.",zadjii-msft,Product-Conhost;Resolution-Fix-Committed;Area-VT;Issue-Bug;Product-Terminal;Priority-2,2019-05-15T19:39:08Z,2019-09-09T15:06:51Z,caksoylar,xtremeperf;caksoylar;leftbones;zadjii-msft;zeroxia;dibotak;gosukiwi;brentpfister;j4james;kshji;kazucmpt;jasper-zanjani,DHowett-MSFT;miniksa;carlos-zamora,miniksa,DHowett-MSFT,,,
microsoft/terminal,8341,"Spaces added to prompt on shell launch (PowerShell/pwsh) # Environment

```none
Win32NT 10.0.19042.0 Microsoft Windows NT 10.0.19042.0
Windows Terminal Version: 1.4.3141.0

https://github.com/justjanne/powerline-go

```

# Steps to reproduce

Add the following to your PowerShell $PROFILE (adjust the path to the powerline-go exectuable to your local environment)

```PowerShell
Function global:prompt {
    $pwd = $ExecutionContext.SessionState.Path.CurrentLocation
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = ""$ENV:OneDriveConsumer\Util\powerline-go.exe""
    $startInfo.Arguments = ""-shell bare""
    $startInfo.Environment[""TERM""] = ""xterm-256color""
    $startInfo.CreateNoWindow = $true
    $startInfo.StandardOutputEncoding = [System.Text.Encoding]::UTF8
    $startInfo.RedirectStandardOutput = $true
    $startInfo.UseShellExecute = $false
    $startInfo.WorkingDirectory = $pwd
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start() | Out-Null
    $standardOut = $process.StandardOutput.ReadToEnd()
    $process.WaitForExit()
    $standardOut
}
```

Start a PowerShell (classic) or PowerShell terminal window via Windows Terminal. The first time the prompt function is called there are spaces inserted between the different prompt parts. Pressing `Enter` makes these disappear and the prompt works fine.

If I use the same profile without Windows Terminal launching PowerShell.exe directly it works fine. So I suspect this is related to Windows Terminal.

Here's an animated GIF that shows what is going on:

![powerline-spaces](https://user-images.githubusercontent.com/862546/99776375-013ac800-2b11-11eb-8c05-48a7c3f953ed.gif)


# Expected behavior

I expect to see the prompt formatted correctly as follows:
<img width=""720"" alt=""powerline-go-expected"" src=""https://user-images.githubusercontent.com/862546/99776755-9c33a200-2b11-11eb-9cbe-441844632c51.png"">


# Actual behavior

This is what the prompt looks like when the PowerShell is first started:

<img width=""720"" alt=""powerline-go-actual"" src=""https://user-images.githubusercontent.com/862546/99776660-70182100-2b11-11eb-963f-c907c4c9ffa0.png"">
",DHowett;zadjii-msft,Resolution-Fix-Committed;Area-Rendering;Product-Conpty;Issue-Bug;Priority-3,2020-11-20T08:23:50Z,2022-08-08T11:48:05Z,yooakim,zadjii-msft;DHowett;brunovieira97;wu-yue-yu;ayalon;chevtek;singh-ramanpreet;chevsunrun;PilotBob;floatingrain;OldWorldOrdr;yooakim;ntaken;ghost,zadjii-msft;DHowett,DHowett;zadjii-msft,,,,
microsoft/terminal,8358,"Windows terminal attempts to start but then crashes without showing main window. <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.20226.0
Windows Terminal version (if applicable): 1.4.3243.0

Any other software? **please tell me how to gather that info and I'll send it to you**
```

# Steps to reproduce

I've just noticed this today. Whenever I start terminal (either by gui or wt command line - admin or not) Terminal shows an icon in the taskbar but then crashes without showing window. I was able to use windows terminal earlier this week with no problem. The issue happened on the version v1.3.2651.0, which is where I noticed the error. I did an upgrade to the current version to ensure I had the latest binaries.

# Expected behavior

Windows Terminal should start normally

# Actual behavior

Terminal shows an icon in the taskbar but then crashes without showing window.

```Faulting application name: WindowsTerminal.exe, version: 1.4.2011.19003, time stamp: 0x5fb70b02
Faulting module name: ucrtbase.dll, version: 10.0.20226.1000, time stamp: 0x88427a69
Exception code: 0xc0000409
Fault offset: 0x000000000007cb9e
Faulting process id: 0xba20
Faulting application start time: 0x01d6c0640a4832d1
Faulting application path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.4.3243.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
Faulting module path: C:\WINDOWS\System32\ucrtbase.dll
Report Id: 9108696c-1d8c-4343-bceb-6f75db8896c7
Faulting package full name: Microsoft.WindowsTerminal_1.4.3243.0_x64__8wekyb3d8bbwe
Faulting package-relative application ID: App``

````Fault bucket 2267956675769727742, type 5
Event Name: MoBEX
Response: Not available
Cab Id: 0

Problem signature:
P1: Microsoft.WindowsTerminal_1.4.3243.0_x64__8wekyb3d8bbwe
P2: praid:App
P3: 1.4.2011.19003
P4: 5fb70b02
P5: ucrtbase.dll
P6: 10.0.20226.1000
P7: 88427a69
P8: 000000000007cb9e
P9: c0000409
P10: 0000000000000007

Attached files:
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.67b2bbd3-7759-427e-9dfb-3c43cf740504.tmp.mdmp
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.e6c5fb30-ec96-4745-8fec-20cfda4ee56e.tmp.WERInternalMetadata.xml
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.0b74bb08-4be0-437a-840c-e872736cc6c0.tmp.xml
WPR_initiated_DiagTrackMiniLogger_OneTrace User Logger 20201119 1 Event Collector_0_inject.etl
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.5c351159-c0bc-4eea-a4ed-51b4cc7bb056.tmp.etl
WPR_initiated_DiagTrackMiniLogger_WPR System Collector_inject.etl
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.747a5642-aeff-4533-a0e4-35c385bb3111.tmp.etl
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.9de3551d-1f3c-47fd-995f-ece2da088de9.tmp.csv
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER.a91c7939-254c-4ea0-a814-9d17053b2b94.tmp.txt

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportArchive\AppCrash_Microsoft.Window_9caf26d4a58d33ffb8b9fb72dfc83bbe1722d_b0038913_d0e460cc-ff68-4dae-8ee6-0df080fced91

Analysis symbol: 
Rechecking for solution: 0
Report Id: 9108696c-1d8c-4343-bceb-6f75db8896c7
Report Status: 2147487744
Hashed bucket: f34e6a2b8b76f1998f796694993afafe
Cab Guid: 0
```

**Have uploaded the contents of  `C:\ProgramData\Microsoft\Windows\WER\ReportArchive\AppCrash_Microsoft.Window_9caf26d4a58d33ffb8b9fb72dfc83bbe1722d_b0038913_d0e460cc-ff68-4dae-8ee6-0df080fced91` to secure@microsoft.com referenceing this  issue. I cannot find the other files listed in the above error log event. I've repeated this a few times an each time the other files are not present.**",DHowett,Resolution-Fix-Available;Issue-Bug;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1,2020-11-22T00:19:13Z,2021-08-19T19:54:47Z,PreetSangha,DHowett;PreetSangha;KalleOlaviNiemitalo;greg-hammond;watfordsuzy;SpitFire-666;Simran-B;x86txt;riprwwa;NeKJ;zadjii-msft,DHowett,DHowett,DHowett,,zadjii-msft,
microsoft/terminal,8365,"Tab title stop changing dynamically after rename textbox is dismissed # Environment
```none
Windows Terminal version (if applicable): current main branch
```

# Steps to reproduce
- Open WSL in a new tab (the tab title reflects the current working dir)
- Double-click tab header to rename
- Dismiss the rename text box (e.g. press Esc)
- Change the current working directory in WSL

# Expected behavior
The tab title reflects the new current working directory

# Actual behavior
The tab title does not change, as if it was overridden by the rename operation

Maybe related to changes in #8227?",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal,2020-11-22T18:28:16Z,2020-11-26T00:20:13Z,mpela81,Don-Vito;DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,8458,"Sequence CTRL+\ is not detected in some keyboard layouts <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment
```none
Windows build number: 10.0.19041.0
Windows Terminal version (if applicable): Windows Terminal Preview v1.5.3242.0
```

**Edit**: I've updated the description.

<details>
<summary>Here is the old one.</summary>

# Steps to reproduce
1. Try to use a mapping containing `CTRL+\` in an application: for instance `CTRL+\ CTRL+n` in Neovim to quit the built-in terminal or by adding a new mapping in *tmux*.

# Actual behavior
Nothing happens. It seems the `CTRL+\` sequence is completely ignored by Windows Terminal. I'm using WSL1 with Ubuntu 20.04 but I've tried in Powershell and same issue. I've also tried with another terminal emulator (kitty) and `CTRL+\` works fine there.

I found maybe related issues: #1288, #521 but they are marked resolved and I'm still getting the bug. Any idea why?
</details>

# Steps to reproduce
1. Change your keyboard layout to the [UK extended layout](https://en.wikipedia.org/wiki/QWERTY#United_Kingdom_(Extended)_Layout)
2. Launch the Terminal and run `showkey -a` (I'm using Ubuntu 20.04 in WSL)
3. Press CTRL-\

# Actual behavior
Nothing happens. The CTRl-\ sequence goes undetected by the terminal. I've tried different layouts (US and French) and it works fine, so this issue seems tied to the choice of the keyboard layout.

# Expected behavior
CTRL-\ is correctly detected. Maybe related issues: #1288, #521.",lhecker,Resolution-Fix-Committed;Area-Input;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2020-12-02T08:32:31Z,2021-02-02T17:26:49Z,ojroques,zadjii-msft;ojroques;DHowett;sasha-glv;lhecker,zadjii-msft;DHowett,DHowett,,,,
microsoft/terminal,8463,"[Screen Reader - LS command]: Narrator stays silent and does not announce any information after entering LS command. **User Experience:**
Users who rely on screen reader would be impacted and not able to get the information as narrator stays silent and does not announce any information after entering LS command.

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0

**Repro Steps:**
1. Open Windows terminal app.
2. Launch Narrator.
3. Type ""LS"" and press enter
4. Directory list gets open.
5. Observe the issue.

**Actual Result:**
Narrator stays silent does not announce any information after entering LS command.

**Expected Result:**
Narrator should announce the proper information about the directory list getting open after entering LS Command.

**Note:** Issue does not repro with NVDA. NVDA announces the information after entering LS Command.

**Guideline Reference:**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/Doc.aspx?sourcedoc=%7BF98F4235-B6BD-47D3-8DA4-F28B9B6FBFA8%7D&file=Guideline%20101%20%E2%80%93%20Recommended%20Assistive%20Technology%20Tools%20for%20MAS%20Testing%20of%20Microsoft%20Digital%20Properties.docx&action=default&mobileredirect=true&cid=9ec86a2d-7fab-4e44-810c-950ae86b7a69

[Narrator_Usable_LS Comman_No info by narrator.zip](https://github.com/microsoft/terminal/files/5629546/Narrator_Usable_LS.Comman_No.info.by.narrator.zip)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;HCL-E+D;A11yUsable;HCL-WindowsTerminal;A11yCO;A11yTTValidated,2020-12-02T13:25:32Z,2022-05-17T09:41:29Z,Chandresh1007,zadjii-msft;carlos-zamora;v-rpundir,Chandresh1007;zadjii-msft;awalia13,DHowett;Priyanka-Chauhan123;zadjii-msft,zadjii-msft,,v-rpundir,
microsoft/terminal,8473,"[Screen Reader - Open and close New Tab]: Same name as ""Windows Powershell"" is defined for all the tabs. **User Experience:**
Users who rely on screen reader would be impacted and not able to get which tab is open as same name ""Windows Powershell"" is defined for all the tabs.

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0
Tool: Accessibility Insights for Windows

**Repro Steps:**
1. Open Windows terminal app.
2. Press ""Ctrl+Shift+T""  to open multiple tabs.
3. Now run accessibility insight tool on the application.
4. Observe the issue.

**Actual Result:**
Same name as ""Windows Powershell"" is defined for all the tabs. So when screen reader focus navigates to any tab then narrator just announces it as ""**Windows powershell editing space**"".

**Expected Result:**
Unique name should be defined for each tabs. 
For e.g. **Name should be defined as ""Windows powershell 1"" for 1st tab item and so on**.

**MAS Reference:**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7B248054a6-5e68-4771-9e1e-242fb5025730%7D&cid=e71aec14-4173-423e-aecb-2472bbc751e8

![MAS4 1 2_AI_Tabs_same name defined_Details](https://user-images.githubusercontent.com/53220700/100990886-67dfcd00-3578-11eb-9d8b-720991bb98e5.png)
![MAS4 1 2_AI_Tabs_same name defined_How to fix](https://user-images.githubusercontent.com/53220700/100990894-6910fa00-3578-11eb-955c-4e972ad4f06c.png)
[MAS4.1.2_Same name defind for each tab.zip](https://github.com/microsoft/terminal/files/5635053/MAS4.1.2_Same.name.defind.for.each.tab.zip)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-2;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev2,2020-12-03T09:32:34Z,2021-02-23T12:18:40Z,Chandresh1007,zadjii-msft;DHowett;Chandresh1007;akashk077,Chandresh1007;zadjii-msft;cinnamon-msft;DHowett,cinnamon-msft;DHowett,zadjii-msft,,Chandresh1007,
microsoft/terminal,8474,"[Screen Reader - Open and close New Tab]: Screen reader does not announce position number for the tabs navigating via ""Ctrl+Tab"" or ""Ctrl+Shift+Tab"" key. **User Experience:**
If the correct  information and relationships are not provided, it would be difficult for people with different disabilities as the information and relationships that are implied by visual or auditory formatting will not be preserved when the presentation format changes.
Having these structures and these relationships programmatically determined or available in text ensures that information important for comprehension will be perceivable to all. 

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0

**Repro Steps:**
1. Open Windows terminal app.
2. Launch Narrator.
3. Press ""Ctrl+Shift+T"" to open multiple tabs.
4. Now press ""Ctrl+Tab"" or ""Ctrl+Shift+Tab"" key to navigate between tabs.
5. Observe the issue.

**Actual Result:**
Screen reader **does not announce position number for the tabs** navigating via ""Ctrl+Tab"" or ""Ctrl+Shift+Tab"" key.

**Expected Result:**
Screen reader should announce the position number for the tabs navigating via ""Ctrl+Tab"" or ""Ctrl+Shift+Tab"" key.
For e.g. **If total 5 tabs are present and currently the focus is at 3rd tab then narrator should announce it as ""3of 5"".**

**Note:** Same issue repro with NVDA.

**Observation:**  In scan mode narrator announces position number.

**MAS Reference:**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7B54f28d1f-a2d1-4dcd-84e1-5c9b87e8aba4%7D&cid=a7f80d30-34d6-4e03-af19-fa3c97a5bf31

[MAS1.3.1_Position no does not get announced for tabs.zip](https://github.com/microsoft/terminal/files/5635199/MAS1.3.1_Position.no.does.not.get.announced.for.tabs.zip)

![Tab item_code snippet](https://user-images.githubusercontent.com/53220700/100993542-8b584700-357b-11eb-8904-555315469b07.png)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-3;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev3,2020-12-03T09:54:11Z,2021-02-25T12:02:10Z,Chandresh1007,zadjii-msft;akash07k;carlos-zamora;DHowett;Chandresh1007,Chandresh1007;zadjii-msft;DHowett;cinnamon-msft,DHowett,zadjii-msft,,Chandresh1007,
microsoft/terminal,8476,"[Screen Reader - Open and close New Tab]: Same name as ""Close Tab"" is defined for all the close button present at each tab. **User Experience:**
Users who rely on screen reader would be impacted and not able to get on which tab close button focus is present as same name ""Close Tab"" is defined for all the tabs close button.

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0
Tool: Accessibility Insights for Windows

**Repro Steps:**
1. Open Windows terminal app.
2. Press ""Ctrl+Shift+T"" to open multiple tabs.
3. Now check the name defined for close button of each tab using accessibility insight tool.
4. Observe the issue.

**Actual Result:**
**Same name as ""Close Tab"" is defined for all the close button present at each tab**. So when screen reader focus navigates to any tab close button then narrator announces it as ""Close tab button"".

**Expected Result:**
**Descriptive and unique name** should be defined for each tab close button like **""Close Tab 1""**.

**MAS Reference:**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7B248054a6-5e68-4771-9e1e-242fb5025730%7D&cid=e71aec14-4173-423e-aecb-2472bbc751e8

[MAS4.1.2_Close tab button name should be descriptive.zip](https://github.com/microsoft/terminal/files/5635316/MAS4.1.2_Close.tab.button.name.should.be.descriptive.zip)

![MAS4 1 2_Close tab_AI code snippet](https://user-images.githubusercontent.com/53220700/100995527-e9862980-357d-11eb-9d76-9488ba96afcd.png)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-2;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev3,2020-12-03T10:11:02Z,2021-02-23T12:15:50Z,Chandresh1007,zadjii-msft;DHowett;Chandresh1007,Chandresh1007;zadjii-msft;DHowett;cinnamon-msft;awalia13;Priyanka-Chauhan123,DHowett;Priyanka-Chauhan123,zadjii-msft,,Chandresh1007,
microsoft/terminal,8477,"[Screen Reader - Windows Powershell]: User is not able to navigate in edit area of powershell in scan mode of the narrator. **User Experience:**
User who rely on screen reader will be affected if the the screen reader focus does not navigate to the edit area of windows powershell as the screen reader users will not able to navigate to the contents of the page .

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0

**Repro Steps:**
1. Open Windows terminal app.
2. Launch Narrator.
3. Turn on the scan mode of the narrator using ""Caps+Space"".
4. Now navigate using Up/Down arrow key.
5. Observe the issue.

**Actual Result:**
User is not able to navigate in edit area of powershell in scan mode of the narrator.

**Expected Result:**
In scan mode screen reader focus **should navigate to the edit area of powershell and read the text**. 

**Note:** NVDA browse mode is not working.

**MAS Reference:**
MAS4.2.10
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7Bb24201d1-2276-4471-8183-e1e5353031ad%7D&cid=83352b15-6eaa-4fc1-bd5a-2d857a532986

[MAS4.2.10_Scan mode_not navigating to powershell window text.zip](https://github.com/microsoft/terminal/files/5635390/MAS4.2.10_Scan.mode_not.navigating.to.powershell.window.text.zip)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-0;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev2;A11yTTValidated,2020-12-03T10:22:52Z,2020-12-15T08:46:29Z,Chandresh1007,carlos-zamora;Chandresh1007,Chandresh1007;zadjii-msft;DHowett;cinnamon-msft,DHowett,zadjii-msft,,Chandresh1007,microsoft/terminal#8463;
microsoft/terminal,8478,"[Screen Reader - Windows Powershell]: In scan mode user is not able to activate dropdown as combined focus is navigating to 'New tab' split button. **User Experience:**
If any application does not expose information and mechanisms necessary to track focus, text insertion point, and selection attributes (e.g. whether text has been selected for copy/paste) of user interface components,  it would be difficult for the platforms that provide Accessibility APIs, and would in turn affect the screen reader dependent users to determine the focus

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0

**Repro Steps:**
1. Open Windows terminal app.
2. Launch Narrator.
3. Turn on the scan mode of the narrator using ""Caps+Space"".
4. Now navigate using Up/Down arrow key to New tab split button.
5. Now try to open the flyout/dropdown using keyboard ""Alt down"" key.
6. Observe the issue.

**Actual Result:**
In scan mode user is **not able to activate dropdown** as combined focus is navigating to 'New tab' split button.

**Expected Result:**
In scan mode **user should be able to activate dropdown** by any keyboard key defined which should be announced by the narrator.
Or, **Separate focus should navigate** to 'New tab' button and dropdown button.

**Note:** NVDA browse mode is not working.

**MAS Reference:**
**MAS4.2.10**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7Bb24201d1-2276-4471-8183-e1e5353031ad%7D&cid=83352b15-6eaa-4fc1-bd5a-2d857a532986

![UI of new tab Split button](https://user-images.githubusercontent.com/53220700/100999086-4f74b000-3582-11eb-980f-8ec015b700b0.png)

[MAS4.2.10_Split button_focus navigates one time_not able to open flyout.zip](https://github.com/microsoft/terminal/files/5635488/MAS4.2.10_Split.button_focus.navigates.one.time_not.able.to.open.flyout.zip)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-2;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev2,2020-12-03T10:42:33Z,2021-02-23T12:02:24Z,Chandresh1007,zadjii-msft;carlos-zamora;Chandresh1007,Chandresh1007;zadjii-msft;cinnamon-msft;DHowett;awalia13;Priyanka-Chauhan123,DHowett;Priyanka-Chauhan123,zadjii-msft,,Chandresh1007,
microsoft/terminal,8482,"[Screen Reader - Windows Powershell]: An element of the given ControlType must support the Selection pattern. **User Experience:**
When standard controls from accessible technologies are not used and if the user interface elements are not used according to specification, Assistive Technologies (AT) will not be able to gather information about, activate(or set) and keep up to date on the status of user interface controls in the content.

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0
Tool: Accessibility Insights for Windows

**Repro Steps:**
1. Open Windows terminal app.
2. Press ""Ctrl+Shift+T"" to open multiple tabs.
3. Now run accessibility insight tool on the application.
4. Observe the issue.

**Actual Result:**
An element of the given ControlType does not support the Selection pattern.
**Narrator does not announce the state of the Tab as 'selected'**.

**Expected Result:**
An element of the given ControlType must support the Selection pattern.
**Narrator should announce the state of selected tab as 'Selected'**.

**Note:** Same issue repro with NVDA.

**MAS Reference:**
**MAS4.1.2**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7B248054a6-5e68-4771-9e1e-242fb5025730%7D&cid=e71aec14-4173-423e-aecb-2472bbc751e8

![MAS4 1 2_AI_Selection pattern_Details](https://user-images.githubusercontent.com/53220700/101023137-57d7e580-3598-11eb-9370-db4f965bb49a.png)

![MAS4 1 2_AI_Selection pattern_how to fix](https://user-images.githubusercontent.com/53220700/101023147-59a1a900-3598-11eb-8b10-ecc85f34d7f1.png)

[MAS4.1.2_State does not get announced.zip](https://github.com/microsoft/terminal/files/5636294/MAS4.1.2_State.does.not.get.announced.zip)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-3;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev2,2020-12-03T13:20:39Z,2021-02-24T08:02:45Z,Chandresh1007,carlos-zamora;DHowett;Priyanka-Chauhan123,Chandresh1007;zadjii-msft;DHowett;cinnamon-msft;awalia13;Priyanka-Chauhan123,DHowett;Priyanka-Chauhan123,zadjii-msft,,Chandresh1007,
microsoft/terminal,8483,"[Screen Reader - Windows Powershell]: A button must support one of these patterns: Invoke, Toggle or ExpandCollapse. **User Experience:**
When standard controls from accessible technologies are not used and if the user interface elements are not used according to specification, Assistive Technologies (AT) will not be able to gather information about, activate(or set) and keep up to date on the status of user interface controls in the content.

**Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0
Tool: Accessibility Insights for Windows

**Repro Steps:**
1. Open Windows terminal app.
2. Press ""Ctrl+Shift+T"" to open multiple tabs.
3. Now run accessibility insight tool on the application.
4. Observe the issue.

**Actual Result:**
A button must support one of these patterns: Invoke, Toggle or ExpandCollapse.

**Expected Result:**
Modify the button to support exactly one of the following patterns:
 璺 Support the Invoke pattern if the button performs a command at the request of the user.
 璺鑱絊upport the Toggle pattern if the button can cycle through a series of up to three states.
 璺鑱絊upport the ExpandCollapse pattern if the button shows or hides additional content.

**MAS Reference:**
**MAS4.1.2**
https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc=%7B248054a6-5e68-4771-9e1e-242fb5025730%7D&cid=e71aec14-4173-423e-aecb-2472bbc751e8

![MAS4 1 2_button must support pattern_How to fix](https://user-images.githubusercontent.com/53220700/101023812-4b07c180-3599-11eb-89fa-ee433929599c.png)

![MAS4 1 2_button must support pattern_Details](https://user-images.githubusercontent.com/53220700/101023821-4cd18500-3599-11eb-9b14-76d7118fd980.png)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-3;HCL-E+D;A11yWCAG;HCL-WindowsTerminal;A11yCO;A11ySev3,2020-12-03T13:26:56Z,2021-02-24T08:06:52Z,Chandresh1007,zadjii-msft;carlos-zamora;DHowett;Chandresh1007,Chandresh1007;zadjii-msft;DHowett;cinnamon-msft;awalia13;Priyanka-Chauhan123,DHowett;Priyanka-Chauhan123,zadjii-msft,,Chandresh1007,
microsoft/terminal,8484,"[Usable - Windows Powershell]: An onscreen element must not have a null BoundingRectangle property. **Test Environment:**
OS: Win 10 2004 Build (20262.1010)
App: Windows Terminal
App version: 1.4.3243.0
Tool: Accessibility Insights for Windows

**Repro Steps:**
1. Open Windows terminal app.
2. Now run accessibility insight tool on the application.
3. Observe the issue.

**Actual Result:**
An onscreen element must not have a null BoundingRectangle property.

**Expected Result:**
- If the element is offscreen, set its IsOffscreen property to TRUE.
- If the element is onscreen, provide a BoundingRectangle property.

![Usable_Bounding rectangle property_Details](https://user-images.githubusercontent.com/53220700/101027445-0599c300-359e-11eb-8efb-437ad4a45c31.png)

![Usable_Bounding rectangle property_How to fix](https://user-images.githubusercontent.com/53220700/101027452-07638680-359e-11eb-9a16-09ed23f249cd.png)
",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-3;HCL-E+D;Fixed;A11yUsable;HCL-WindowsTerminal;A11yCO;A11yTTValidated,2020-12-03T14:00:19Z,2021-08-11T10:31:55Z,Chandresh1007,carlos-zamora;zadjii-msft;v-rpundir,Chandresh1007;zadjii-msft;DHowett;cinnamon-msft;awalia13,DHowett;Priyanka-Chauhan123,zadjii-msft,,zadjii-msft,
microsoft/terminal,8519,"Tab Renamer appearance broken in 1.6.3371.0 Version 1.6.3371.0

Try to rename a tab:
![image](https://user-images.githubusercontent.com/18356694/101478614-8ea25880-3916-11eb-9b3a-25169a9f99c5.png)


I'm guessing this is either the upgrade to MUX 2.5 (@DHowett) or this was the TabHeaderControl (@PankajBhojwani). Thoughts?


Oh weirdly, it's only broken when the renamer is _w i d e_. Gif:
![tab-renamer-visual-bug-000](https://user-images.githubusercontent.com/18356694/101479227-7a129000-3917-11eb-83d6-5b38eded893f.gif)

",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2020-12-08T11:38:42Z,2021-01-08T02:30:06Z,zadjii-msft,Don-Vito;zadjii-msft,zadjii-msft,zadjii-msft;DHowett,DHowett,,,
microsoft/terminal,8538,"[feature/settings-ui] command palette build break on SettingsTab PR ~#8415~ #8420 removed SwitchToTabCommand and made the MRU list use tab objects directly. This poses a problem for the way we cache and re-execute the ""_switchToSettingsCommand"".

We need to retool this. Branch currently doesn't build.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Severity-Blocking;Priority-1,2020-12-10T04:36:53Z,2020-12-10T18:55:44Z,DHowett,,DHowett,DHowett,DHowett,,carlos-zamora,
microsoft/terminal,854,"Check status of TextBuffer Unit Tests in CI If the TextBuffer unit tests aren't named `.Unit.Tests.` then I'm pretty sure the CI isn't running them.

_Originally posted by @miniksa in https://github.com/microsoft/terminal/pull/843_",metathinker,Resolution-Fix-Available;Issue-Bug;Area-Build;Product-Meta,2019-05-16T15:48:16Z,2019-05-30T02:51:18Z,miniksa,metathinker;DHowett-MSFT;miniksa,miniksa;DHowett-MSFT,miniksa,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,857,"Tabs in title bar are cut off when scrolling the tabs + tabs not scrolling automatically This bug-tracker is monitored by Windows Console development team and other technical types.  **We like detail!**

Please use this form and describe your issue, concisely but precisely, with as much detail as possible

* Your Windows build number:  (Type `ver` at a Windows Command Prompt)
**Microsoft Windows [Version 10.0.18898.1000]**
* What you're doing and what's happening: (Copy & paste specific commands and their output, or include screen shots)
[Video demonstration of both issues below](https://youtu.be/SL61SMN4baI)
    - A newly created tab doesn't scroll the tab bar to the end - could possibly be a config variable
    - When using tabs in the title bar and creating a new partially hidden tab, the tab gets cut off.

* What's wrong / what should be happening instead:
    - The tab should not be cut off.",DHowett-MSFT,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix,2019-05-16T17:49:04Z,2019-10-15T05:41:45Z,futilityteam,zadjii-msft;futilityteam;krzysdz;ArtexJay,DHowett-MSFT;miniksa,miniksa,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,858,"Modifying profiles.json causes multiple settings reloads This bug-tracker is monitored by Windows Console development team and other technical types.  **We like detail!**

If you have a feature request, please post to [the UserVoice](https://wpdev.uservoice.com/forums/266908).  

> **Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**. Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible

* Your Windows build number:  Microsoft Windows [Version 10.0.18362.86]

* What you're doing and what's happening: When editing profiles.json, saving a _modified_ version of the file generates multiple app-wide settings refreshes.

* What's wrong / what should be happening instead: Modifying the settings file should only generate one app-wide settings update
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2019-05-16T17:50:39Z,2019-05-21T15:13:06Z,d-bingham,fearthecowboy;zadjii-msft;d-bingham,DHowett-MSFT;miniksa;zadjii-msft,miniksa;zadjii-msft,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,8613,"RIS does not reset mouse mode state or encoding Notes from @DHowett:
> In xterm, `RIS` disables mouse mode and (probably) resets the encoding.
> `DECSTR` _does not_

<!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.239
Windows Terminal version (if applicable): 1.5.3242.0 AND 1.4.3243.0

Debian 9.13 in WLS; RHEL7.8 on remote server
```

# Steps to reproduce
ssh connect to the remote server do some actual work there vim, gcc, gdb, the whole daily work sh**
After you're done with work, do not disconnect the remote connections, just put your windows Laptop to ""Energy saving"", remove it from the dock, put it into your bag and have a nice evening with the kids.
Next day resume the Laptop, click into the one of the still open terminal panes trying to reconnect the remote machine.
Try to scroll in the terminal

# Expected behavior
After Wakeup from standby, I'd expect to have all the normal mouse interaction. recall the ssh login command using [Cursor up] and resume work. Vim and terminal scrolling should work.

# Actual behavior
Any Mouse interaction with the terminal will spam the prompt with more or less random text (same button press creates different input in different panes) 
Wheel scrolling is impossible as just spams the promt.
Only solution: kill all the panes, have new ones. 
I could live with issues like these if they would be solvable with the bash `reset` command. 
The behavior is not always reproducible. some panes work just fine. Others show even more strange behavior like flashing on mouse interaction. 
",PankajBhojwani,Resolution-Fix-Committed;Help Wanted;Area-Input;Area-VT;Issue-Bug;Product-Terminal;Priority-2,2020-12-18T08:20:33Z,2021-07-12T18:50:06Z,amie42,skyline75489;amie42;oising;zadjii-msft;DHowett,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,864,"Dial back github bot settings It's aggressive, yo",miniksa,Resolution-Fix-Available;Issue-Bug;Area-Build;Product-Meta,2019-05-16T21:42:42Z,2019-05-17T21:35:42Z,DHowett-MSFT,miniksa,miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,DHowett-MSFT,,DHowett-MSFT,
microsoft/terminal,8695,"Assignment operators in til::spsc don't return anything # Environment

Windows build number: Version 10.0.18363.1198
Windows Terminal version (if applicable): 

# Steps to reproduce

I was trying to use the `til::spsc` class to do something like this:

```
auto channel = til::spsc::channel<QueueItem>(100);
auto producer = std::move(channel.first);
channel.first = std::move(producer);
```

# Expected behavior

The code should compile.

# Actual behavior

It fails with the error:
```
C:\terminal\src\inc\til\spsc.h(429): error C4716: 'til::spsc::producer<QueueItem>::operator=': must return a value
```

I believe the problem is that the assignment operators in the `producer` and `consumer` classes don't actually return anything. 

See here:
https://github.com/microsoft/terminal/blob/ae550e0969595f062b15c2ff5cc33d4afe8ebc3f/src/inc/til/spsc.h#L424-L428

and here:
https://github.com/microsoft/terminal/blob/ae550e0969595f062b15c2ff5cc33d4afe8ebc3f/src/inc/til/spsc.h#L542-L546

I'm assuming they should have a `return *this;` or something along those lines.",lhecker,Product-Conhost;Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-CodeHealth,2021-01-03T21:01:31Z,2021-01-19T11:41:09Z,j4james,DHowett;j4james,DHowett,zadjii-msft,lhecker,,,
microsoft/terminal,8709,"Links/URLs get offset when certain unicode characters are printed # Environment

```none
Windows build number: Windows 10 version 2004 (10.0.19041.0)
Windows Terminal version: Preview 1.5.3242.0
```

# Steps to reproduce

Print certain unicode characters like this one: `楗炬惢`

# Expected behavior

Links/URLs should be valid.

# Actual behavior

Links/URLs get offset and break with the presence of certain unicode characters.
For example, if the following text is printed:
```none
楗炬惢楗炬惢楗炬惢
https://microsoft.com/
```
![image](https://user-images.githubusercontent.com/1197915/103703785-77ec3180-4fa8-11eb-888f-536ac6a8271c.png)

The hoverable link, clickable link and opened link is `ps://microsoft.com/   `
If those unicode characters are not printed (if you scroll for example), the links work again.

https://user-images.githubusercontent.com/1197915/103703479-e54b9280-4fa7-11eb-9394-4d6bd81e952d.mp4

Note that the emoji doesn't cause the issue.
The code used in the video is:
```js
console.log(`楗炬惢楗炬惢楗炬惢楗炬惢楗炬惢楗炬惢 123 https://microsoft.com/

閴 https://google.com/
https://google.fr/
https://youtube.com/
https://aka.ms/`)
```",DHowett;comzyh,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-2,2021-01-05T21:55:25Z,2021-12-09T18:42:13Z,Entrivax,zadjii-msft;Entrivax;skyline75489;ZedG2;mas90;DHowett,zadjii-msft,DHowett,DHowett,,,
microsoft/terminal,8723,"Crash in `DxEngine::SetPixelShaderPath` Version: 1.6.3521.0

Unsure of exact repro steps. I edited the settings file and saved it. Presumably that forced an `UpdateSettings`, which is what triggered this?

```c++
void DxEngine::SetPixelShaderPath(std::wstring_view value) noexcept
try
{
    if (_pixelShaderPath != value)
    {
        // Enable shader effects if the path isn't empty. Otherwise leave it untouched.
        _terminalEffectsEnabled = value.empty() ? _terminalEffectsEnabled : true;
        _pixelShaderPath = { value }; // <---- This line right here
        _recreateDeviceRequested = true;
        LOG_IF_FAILED(InvalidateAll());
    }
}
CATCH_LOG()

```

I think making a wstring from an empty string is _bad_.

Relevant stack frames:
```

07 00000082`d4afed30 00007ffe`e8eecb17     TerminalControl!Microsoft::Console::Render::DxEngine::SetPixelShaderPath+0xd4 [E:\BA\184\s\src\renderer\dx\DxRenderer.cpp @ 978] 
08 (Inline Function) --------`--------     TerminalControl!winrt::hstring::operator class std::basic_string_view<wchar_t,struct std::char_traits<wchar_t> >+0x8e [E:\BA\184\s\src\cascadia\TerminalControl\Generated Files\winrt\base.h @ 2788] 
09 00000082`d4afed80 00007ffe`e8e73aa1     TerminalControl!winrt::Microsoft::Terminal::TerminalControl::implementation::TermControl::UpdateSettings$_ResumeCoro$1+0x5b7 [E:\BA\184\s\src\cascadia\TerminalControl\TermControl.cpp @ 313] 
0a (Inline Function) --------`--------     TerminalControl!std::experimental::coroutine_handle<void>::resume+0x9 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\include\experimental\coroutine @ 107] 
0b (Inline Function) --------`--------     TerminalControl!std::experimental::coroutine_handle<void>::operator()+0x9 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\include\experimental\coroutine @ 99] 
0c 00000082`d4afeec0 00007fff`15424684     TerminalControl!winrt::impl::resume_apartment_callback+0x11 [E:\BA\184\s\src\cascadia\TerminalControl\Generated Files\winrt\windows.ui.core.h @ 1277] 
0d 00000082`d4afeef0 00007fff`153dec9f     Windows_UI!<lambda_59517943c03487243f9bea31c6c1a784>::operator()+0x84 [onecoreuap\windows\advcore\winrt\onecoreiwindow\corewindow\common\dispatcher.cpp @ 908] 

```",DHowett,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Severity-Blocking;Priority-0,2021-01-08T12:17:23Z,2021-02-22T21:01:52Z,zadjii-msft,zadjii-msft;DHowett;carlos-zamora,zadjii-msft,DHowett,zadjii-msft,,DHowett,
microsoft/terminal,8730,"Windows Terminal (Preview) crashes with wrapped text <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

閴 N.B. This issue has also been reported via **Feedback Hub link** https://aka.ms/AAa8g4n (video/screenshots have been uploaded; posted 2 months ago, but still no resolution)

# Environment

```none
Windows build number: 10.0.19042.0
Windows Terminal version: 1.5.3242.0

Any other software?
Windows Terminal version: 1.4.3243.0
```

# Steps to reproduce

1. Open new Windows Terminal tab or window (using Windows Powershell in this case)
2. Paste a long text string WITHOUT pressing ENTER. 
    
    For example, this  string (H/T http://powershell-guru.com/): `Get-ChildItem -Path C:\Demo -Filter *.cs | Rename-Item -NewName {[System.IO.Path]::ChangeExtension($_.Name, "".kt"")}`

    Any long string of ASCII characters should also reproduce issue: `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX- `

    The text will soft wrap in a standard Windows Terminal configuration (12pt text)

3. Press backspace and begin deleting the text. 

# Expected behavior

The cursor should move up a line. Windows Terminal should not crash.

# Actual behavior

Windows Terminal crashes just before the cursor moves up a line, or in other words, just before the character where the text is wrapped.

_NOTE: This only appears to happen when there is one tab open._
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-Accessibility;Severity-Crash;Product-Terminal;Needs-Tag-Fix;Priority-1;zStable-Service-Queued-1.12;zPreview-Service-Queued-1.13,2021-01-10T08:00:42Z,2022-02-08T23:55:27Z,myabc,myabc;zadjii-msft;carlos-zamora;lhecker;j4james;miniksa;feoh;DHowett;codeofdusk,zadjii-msft;DHowett,DHowett;zadjii-msft,,,DHowett,
microsoft/terminal,8759,"FontSize setting control should only accept a number between 0 and 128 # Steps to reproduce

1. Go to ""Appearance""
2. Get into the font size box.
3. Press Ctrl+Tab and it starts inserting literal tabs. Keep doing it and it becomes a super long boi to the right instead of wrapping like the same behavior in the Font Face text block. 

# Expected behavior

non-numeric content should not be allowed. We should only accept a number between 0 and 128.

# Actual behavior

Expands to the right and tabs are inserted.

# Additional Details

~This is probably a simple fix. Just a matter of adding the wrap styling to CommonResources.xaml. Take a look at what wrap styling was already added to other controls. In fact, if any of the other control styles support wrap styling, feel free to add them there too.~
We need to look into what kind of restrictions we can put on this control. Hopefully it supports limiting content to numbers and limiting the range to 0 and 128. Some of this may have to be filed upstream.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-2;Area-Settings UI,2021-01-12T18:05:13Z,2021-01-13T00:13:29Z,carlos-zamora,DHowett;carlos-zamora;zadjii-msft,carlos-zamora,carlos-zamora,zadjii-msft,,,
microsoft/terminal,879,"Some keybindings used by PSReadLine aren't getting through <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.18362.86
Windows Terminal version (if applicable): 0.1.1361.0

Any other software?
```

# Steps to reproduce

Open a PowerShell tab in Windows Terminal. Attempt to use these PSReadLine key bindings (use the Get-PSReadLineKeyHandler command to see a list of all key bindings):

- Ctrl+Backspace (BackwardKillWord)
- Shift+Ctrl+Enter (InsertLineBelow)
- Ctrl+Space (MenuComplete)
- Shift+Tab (TabCompletePrevious)
- Alt+0 (DigitArgument) (and other digits)
- PageDown (ScrollDisplayDown)
- Ctrl+PageDown (ScrollDisplayDownLine)
- PageUp (ScrollDisplayUp)
- Ctrl+PageUp (ScrollDisplayUpLine)
- Ctrl+Alt+? (ShowKeyBindings)
- Alt+? (WhatIsKey)

# Expected behavior

Key executes the specified PSReadLine function.

# Actual behavior

Nothing happens (or the current tab changes in the case of Alt+digit)
",zadjii-msft,Issue-Feature;Resolution-Fix-Committed;Area-Input;Area-VT;Issue-Bug;Product-Terminal;Priority-0,2019-05-17T15:58:16Z,2020-06-08T22:31:29Z,DJackman123,DHowett-MSFT;oising;miniksa;ocalvo;Tyriar;j4james;factormystic;zadjii-msft;natebarkei;koron;TunerBuilder;lzybkr;yanoryuichi;awson;DJackman123,oising;miniksa;DHowett-MSFT,miniksa;DHowett-MSFT,,,,
microsoft/terminal,8791,"Win+Shift+S dismisses the selection > to take the screenshot for WT I had to use the old Capture Tool because with the new Capture and Annote the selectin goes away. This happens only with WT and not with MinTTY..

Oh well that's a real bug. Yikes.

_Originally posted by @zadjii-msft in https://github.com/microsoft/terminal/issues/8789#issuecomment-760166470_

<hr>

This has evolved into ""do not dismiss selection if key combination contains <kbd>win</kbd>""",imaginary-person,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-3;good first issue,2021-01-14T12:31:27Z,2021-02-17T17:41:25Z,zadjii-msft,Don-Vito;KalleOlaviNiemitalo;imaginary-person;zadjii-msft,zadjii-msft,DHowett,,,,
microsoft/terminal,8944,"Crash on tab context menu after a few mouse right-clicks <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
PS C:\Users\Ich> [Environment]::OSVersion

Platform ServicePack Version      VersionString
-------- ----------- -------      -------------
 Win32NT             10.0.19042.0 Microsoft Windows NT 10.0.19042.0

Windows Terminal Preview
Version: 1.6.10272.0
```

# Steps to reproduce

1. Start terminal
2. Mouse right-click on a tab
3. A few mouse right-clicks on a different context menu entries

# Expected behavior

Don't crash (silent)

# Actual behavior

unlimited of this:
![2021-01-29 13_58_02-Solution1 (Debugging) - Microsoft Visual Studio Preview](https://user-images.githubusercontent.com/17874713/106278354-e3898d80-623a-11eb-8751-a751f8af1e93.png)

When you tell me how can I get a better debug about this crash, I want to given you a better error report",DHowett,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Needs-Triage;Product-Terminal;Severity-Blocking;Priority-0,2021-01-29T13:06:48Z,2021-02-10T19:50:17Z,TobiasSekan,zadjii-msft;DHowett,zadjii-msft,,zadjii-msft,,DHowett,
microsoft/terminal,8947,"Cannot Change Tab Switcher Interface Style on Preview v1.6.10272.0 <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.19041.746]
Windows Terminal version (if applicable): Windows Terminal Preview v1.6.10272.0

Any other software? NA
```

# Steps to reproduce

1. Open Settings UI
2. Navigate to Interaction -> Tab switcher interface style
3. Try to select option other than the selected one

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

Tab switcher interface style should change to the new value

# Actual behavior

Tab switcher interface style defaults to the previous value.

![2021-01-29_19-41-26](https://user-images.githubusercontent.com/36201797/106286453-aee1fa00-626b-11eb-92f8-6e803369d622.gif)
",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Needs-Triage;Needs-Tag-Fix;Priority-1;good first issue;Area-Settings UI,2021-01-29T14:24:13Z,2021-02-01T16:38:52Z,ShubhamBelwal,zadjii-msft;carlos-zamora,zadjii-msft,,carlos-zamora,,,
microsoft/terminal,8957,"Browse buttons crash when running as admin The optional graphical settings editor worked properly when I ran Windows Terminal as a regular user. However, if I ran Windows Terminal as Administrator, the app would crash if I clicked the ""Browse..."" button for either ""Command line"" or ""Starting directory"".

_Originally posted by @huang63 in https://github.com/microsoft/terminal/issues/6800#issuecomment-769568274_",DHowett,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Priority-1;Area-Settings UI,2021-01-29T19:18:23Z,2021-04-12T13:12:08Z,carlos-zamora,carlos-zamora;DHowett;WSLUser;zadjii-msft,carlos-zamora,carlos-zamora,carlos-zamora,,,
microsoft/terminal,896,"Code Cleanup - termDispatch.hpp & adaptDispatch.hpp overrides  Minor code cleanup

The ITermDispatch overridden methods in terminal/src/terminal/adapter/termDispatch.hpp & terminal/src/terminal/adapter/adaptDispatch.hpp do not follow 
[C.128: Virtual functions should specify exactly one of virtual, override, or final guideline. ](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final)

",subhasan,Product-Conhost;Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-CodeHealth,2019-05-19T01:42:45Z,2019-05-25T19:11:44Z,dlong11,dlong11;zadjii-msft;adiviness;DHowett-MSFT,DHowett-MSFT;miniksa,DHowett-MSFT;miniksa,subhasan,,DHowett-MSFT,
microsoft/terminal,8986,"Terminal v1.5.10271.0 crashes on startup due to settings.json load bug <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19041.0
Windows Terminal version (if applicable): 1.5.10271.0
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->

Add an empty object to the `schemes` option list

As an example I've picked the default configuration and only changed `""schemes"": []` into `""schemes"": [{}]""`
```
// This file was initially generated by Windows Terminal 1.1.2021.0
// It should still be usable in newer versions, but newer versions might have additional
// settings, help text, or changes that you will not see unless you clear this file
// and let us generate a new one for you.

// To view the default settings, hold ""alt"" while clicking on the ""Settings"" button.
// For documentation on these settings, see: https://aka.ms/terminal-documentation
{
    ""$schema"": ""https://aka.ms/terminal-profiles-schema"",

    ""defaultProfile"": ""{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}"",

    // You can add more global application settings here.
    // To learn more about global settings, visit https://aka.ms/terminal-global-settings

    // If enabled, selections are automatically copied to your clipboard.
    ""copyOnSelect"": false,

    // If enabled, formatted data is also copied to your clipboard
    ""copyFormatting"": false,

    ""theme"": ""dark"",

    // A profile specifies a command to execute paired with information about how it should look and feel.
    // Each one of them will appear in the 'New Tab' dropdown,
    //   and can be invoked from the commandline with `wt.exe -p xxx`
    // To learn more about profiles, visit https://aka.ms/terminal-profile-settings
    ""profiles"":
    {
        ""defaults"":
        {
            // Put settings here that you want to apply to all profiles.
        },
        ""list"":
        [
            {
                ""guid"": ""{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}"",
                ""hidden"": false,
                ""name"": ""Ubuntu-20.04"",
                ""source"": ""Windows.Terminal.Wsl"",
                ""colorScheme"": ""Solarized Dark"",
                ""fontFace"": ""Droid Sans Mono for Powerline"",
                ""fontSize"": 11,
                ""fontWeight"": ""light"",
                ""antialiasingMode"": ""cleartype"",
                ""startingDirectory"": ""//wsl$/Ubuntu-20.04/home/baskiers/"",
                ""historySize"": 99001
            },
            {
                // Make changes here to the powershell.exe profile.
                ""guid"": ""{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"",
                ""name"": ""Windows PowerShell"",
                ""commandline"": ""powershell.exe"",
                ""hidden"": false
            },
            {
                // Make changes here to the cmd.exe profile.
                ""guid"": ""{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"",
                ""name"": ""Command Prompt"",
                ""commandline"": ""cmd.exe"",
                ""hidden"": false
            },
            {
                ""guid"": ""{b453ae62-4e3d-5e58-b989-0a998ec441b8}"",
                ""hidden"": false,
                ""name"": ""Azure Cloud Shell"",
                ""source"": ""Windows.Terminal.Azure""
            }
        ]
    },

    // Add custom color schemes to this array.
    // To learn more about color schemes, visit https://aka.ms/terminal-color-schemes
    ""schemes"": [{}],

    // Add custom keybindings to this array.
    // To unbind a key combination from your defaults.json, set the command to ""unbound"".
    // To learn more about keybindings, visit https://aka.ms/terminal-keybindings
    ""keybindings"":
    [
        // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.
        // These two lines additionally bind them to Ctrl+C and Ctrl+V.
        // To learn more about selection, visit https://aka.ms/terminal-selection
        { ""command"": {""action"": ""copy"", ""singleLine"": false }, ""keys"": ""ctrl+c"" },
        { ""command"": ""paste"", ""keys"": ""ctrl+v"" },

        // Press Ctrl+F to open the search box
        { ""command"": ""find"", ""keys"": ""ctrl+f"" },

        { ""command"": { ""action"": ""newTab"", ""index"": 0 }, ""keys"": ""ctrl+t"" },
        // Press Alt+Shift+D to open a new pane.
        // - ""split"": ""auto"" makes this pane open in the direction that provides the most surface area.
        // - ""splitMode"": ""duplicate"" makes the new pane use the focused pane's profile.
        // To learn more about panes, visit https://aka.ms/terminal-panes
        { ""command"": { ""action"": ""splitPane"", ""split"": ""auto"", ""splitMode"": ""duplicate"" }, ""keys"": ""ctrl+shift+d"" },

        // Unbound
        { ""command"": ""unbound"", ""keys"": ""alt+shift+esc"" }
    ]
}
```

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Terminal starts up.

The schema does validate on the JSON Schema definition (https://aka.ms/terminal-profiles-schema). If this configuration is invalid the schema definition should reflect that.

# Actual behavior

<!-- What's actually happening? -->
The terminal instantly crashes on startup.

I've used this configuration for around half a year without issues.
This issue could be a subset of #8358, although I started experiencing this bug only in the latest version of the Terminal.
",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Severity-Crash;Product-Terminal;Priority-1,2021-02-01T07:52:56Z,2021-02-02T06:50:32Z,BasKiers,zadjii-msft;DHowett,zadjii-msft;DHowett,DHowett,carlos-zamora;zadjii-msft,carlos-zamora,,
microsoft/terminal,8992,"Simplified Chinese translation issue: ""娑撴瑧鍎婚柊"" should be replaced with ""娴滄艾鍘犻崝"" <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

I've tried latest Windows terminal in Simplified Chinese. It works well but I've found a following translation issue. 

![1](https://user-images.githubusercontent.com/12065395/106480070-f5428d80-64e5-11eb-8755-e78c4188f2ff.png)


# Environment

```none
Windows build number: 10.0.19042.746
Windows Terminal version: 1.6.10272.0
```

# Steps to reproduce

1. Open Settings UI
2. Switch to ""Profiles""-""Base Layer""-""Appearance""
3. Scroll down. 
 
Then you will find the inappropriate translation of ""Acrylic"", which is translated as ""娑撴瑧鍎婚柊"". 
In addition to the ""Base Layer"" setting page, there is also this error in the setting pages of other types of terminals. Such as cmd, Windows PowerShell, etc. 

<!-- A description of how to trigger this bug. -->

# Expected behavior & Actual behavior
""娑撴瑧鍎婚柊"" should be replaced with ""娴滄艾鍘犻崝"". In the context of Simplified Chinese, if ""Acrylic"" means an UI effect, it should be translated as ""娴滄艾鍘犻崝""(or ""娴滄艾鍘犻崝娑欐櫏閺""), which will be more appropriately. 

",DHowett,Resolution-Fix-Available;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-3;Area-Localization,2021-02-01T15:51:41Z,2021-06-23T22:17:09Z,KenwayDai,zadjii-msft;skyline75489;lhecker,zadjii-msft;lhecker,DHowett,zadjii-msft,,lhecker,
microsoft/terminal,900,"Certain ""emoji"" are still half-sized # Environment

```none
Windows build number: 10.0.18899.1000
Windows Terminal version: 0.1.1361.0
```
# Steps to reproduce

Setup a standard PowerLine using FiraCode in WSL(2) and navigate to a git repository that contains edits. Note if you 
`printf '閴' ` that the pencil is double the size of the one in the Powerline prompt. 

![image](https://user-images.githubusercontent.com/2892/57987034-02c59480-7a31-11e9-8321-eefed5231e0f.png)


# Expected behavior

I expect emojis in the prompt to appear at the same size as those later in the same line.

# Actual behavior

emoji size appears to be halved? See pic.
",leonMSFT,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Product-Terminal;Priority-2,2019-05-19T19:28:07Z,2020-05-08T22:31:10Z,shanselman,DHowett-MSFT;fcharlie;JustinGrote;miniksa;SidShetye;GTMxCode;DHowett;lainisourgod;zadjii-msft;terrywh;benc-uk,DHowett-MSFT,DHowett-MSFT,miniksa,,,
microsoft/terminal,9021,"Crash when closing a tab with multiple splits from the tab context menu 1. open two tabs
2. in the first, make two panes
3. try to close the tab from the right-click ""Close Tab"" option. 
4. Experience exception:

```
    TerminalApp.dll!std::_Throw_bad_optional_access() Line 54   C++
    TerminalApp.dll!std::optional<unsigned short>::value() Line 379 C++
    TerminalApp.dll!Pane::Id() Line 1558    C++
>   TerminalApp.dll!<lambda_1a1e553ee07ffde1f0ed98f661a0b933>::operator()<winrt::Windows::Foundation::IInspectable$_ResumeCoro$1 const &,winrt::Windows::Foundation::IInspectable$_ResumeCoro$1 const &>() Line 699 C++
    TerminalApp.dll!<lambda_1a1e553ee07ffde1f0ed98f661a0b933>::operator()<winrt::Windows::Foundation::IInspectable$_InitCoro$2 const &,winrt::Windows::Foundation::IInspectable$_InitCoro$2 const &>() Line 685 C++
    TerminalApp.dll!<lambda_1a1e553ee07ffde1f0ed98f661a0b933>::operator()<winrt::Windows::Foundation::IInspectable const &,winrt::Windows::Foundation::IInspectable const &>(const winrt::Windows::Foundation::IInspectable &) Line 707 C++
    TerminalApp.dll!winrt::impl::delegate<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>,<lambda_1a1e553ee07ffde1f0ed98f661a0b933>>::Invoke(void * sender, void * args) Line 883    C++
    TerminalApp.dll!winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>::operator()(const winrt::Windows::Foundation::IInspectable & sender, const winrt::Windows::Foundation::IInspectable & args) Line 2500    C++
    TerminalApp.dll!winrt::impl::invoke<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>,std::nullptr_t,std::nullptr_t>(const winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> & delegate, void * const & <args_0>, void * const & <args_1>) Line 5567  C++
    TerminalApp.dll!winrt::event<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>::operator()<std::nullptr_t,std::nullptr_t>(void * const & <args_0>, void * const & <args_1>) Line 5702 C++
    TerminalApp.dll!Pane::Close() Line 424  C++
    TerminalApp.dll!<lambda_4e44f426db787ef722ec55bc42fe1f5e>::operator()<winrt::Windows::Foundation::IInspectable const &,winrt::Windows::UI::Xaml::RoutedEventArgs const &>(const winrt::Windows::Foundation::IInspectable & __formal, const winrt::Windows::UI::Xaml::RoutedEventArgs & __formal) Line 754   C++
    TerminalApp.dll!winrt::impl::delegate<winrt::Windows::UI::Xaml::RoutedEventHandler,<lambda_4e44f426db787ef722ec55bc42fe1f5e>>::Invoke(void * sender, void * e) Line 4671    C++
    Windows.UI.Xaml.dll!DirectUI::CRoutedEventSourceBase<DirectUI::IUntypedEventSource,Windows::UI::Xaml::IRoutedEventHandler,IInspectable,Windows::UI::Xaml::IRoutedEventArgs>::Raise(IInspectable * pSource, Windows::UI::Xaml::IRoutedEventArgs * pArgs) Line 1041   C++
    Windows.UI.Xaml.dll!DirectUI::MenuFlyoutItem::Invoke() Line 208 C++
    Windows.UI.Xaml.dll!DirectUI::MenuFlyoutItem::PerformPointerUpAction() Line 186 C++
    Windows.UI.Xaml.dll!DirectUI::MenuFlyoutItem::OnPointerReleased(Windows::UI::Xaml::Input::IPointerRoutedEventArgs * pArgs) Line 146 C++
    Windows.UI.Xaml.dll!DirectUI::ControlGenerated::OnPointerReleasedProtected(Windows::UI::Xaml::Input::IPointerRoutedEventArgs * pE) Line 1518    C++
    Windows.UI.Xaml.dll!DirectUI::Control::FireEvent(KnownEventIndex nDelegate, DirectUI::DependencyObject * pSender, IInspectable * pArgs) Line 259    C++

```

Which has a root cause here:
```c++
        pane->Closed([weakThis, weakPane](auto&& /*s*/, auto && /*e*/) -> winrt::fire_and_forget {
        ...
                        if (*i == pane->Id()) // <---------------- This line right here, throws. The pane's ID might be nullopt!!
                        {
                            tab->_mruPanes.erase(i);
                            break;
                        }

```

Turn out, the pane's ID was `nullopt`. So when we tried to compare the mru pane ID to the pane's ID, it tried to compare against the value of the optional, which threw. 

WEIRDLY, if you add a `closeTab` action, and try doing this from the command palette, it _doesn't_ repro. It also doesn't repro if you just close the tab by middle clicking it. 

This is _not_ the same bug as the ""menu flyout crash"" - I was very sure to not hover over the nested menu entry when doing this. ",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Severity-Crash;Product-Terminal;Priority-1,2021-02-03T14:19:06Z,2021-02-04T18:13:27Z,zadjii-msft,,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,9032,"SettingsUI removes ""disabledProfileSources"" Using the SettingsUI removes my ""disabledProfileSources"" customization.  I wish it didn't do that.  Perhaps it clobbers other customizations too.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Severity-DataLoss;Priority-1;Area-Settings UI,2021-02-04T04:23:57Z,2021-02-05T00:42:54Z,vefatica,zadjii-msft;WSLUser;vefatica,zadjii-msft,,zadjii-msft,,DHowett,
microsoft/terminal,9044,"Binding enter to copy breaks Command Palette <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19042.789
Windows Terminal version (if applicable):1.6.10272.0
Any other software?
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
1. put this in actions:
```json
{""command"": {""action"": ""copy"",""singleLine"": false},""keys"": ""enter""}
```
2. try to use cmdpallet
# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
when enter is pressed in cmdpall the highlighted action is executed
# Actual behavior
nothing is executed

# Observations
regression from 1.5
",Don-Vito,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Needs-Tag-Fix;Priority-2;Area-CmdPal,2021-02-05T03:11:18Z,2021-02-10T20:35:49Z,LuanVSO,Don-Vito;zadjii-msft,zadjii-msft,DHowett,zadjii-msft,,DHowett,
microsoft/terminal,9052,"Some Unicode characters are improperly accepted or dropped <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19042.0
Windows Terminal version (if applicable): 1.5.x and 1.6.x
PowerShell: 5.1.19041.610 and 7.1.1
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
1. Run Windows Terminal built after https://github.com/microsoft/terminal/pull/8035 gets merged.
1. Input `閿涙劧绱ら敍鎺炵处閿涙棑绱╅敍鏍电船閿涙﹫绱甡 ([FULLWIDTH DIGIT](https://unicode.org/charts/PDF/UFF00.pdf)) by any methods such as right click to paste, `Ctrl + V`, or from keyboard.

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->

- `閿涙劧绱ら敍鎺炵处閿涙棑绱╅敍鏍电船閿涙﹫绱甡 is input.

# Actual behavior

<!-- What's actually happening? -->

- Only the first letter (`閿涙亝 in this case) is input.

# Detailed Explanation

The implementation of `GetQuickCharWidth` has been changed in https://github.com/microsoft/terminal/pull/8035 and affected the following invocations:

- to determine which type of width the given character has for rendering
  -  [CodepointWidthDetector::GetWidth(const std::wstring_view)](https://github.com/microsoft/terminal/blob/1df3182865fb089bd653763cd0abbea811545365/src/types/CodepointWidthDetector.cpp#L340-L376)
- to convert the given character(s) into a queue of key events for input
  - [CharToKeyEvents(const wchar_t, const unsigned int)](https://github.com/microsoft/terminal/blob/1df3182865fb089bd653763cd0abbea811545365/src/types/convert.cpp#L142-L175)

The former is totally acceptable because it falls back to looking up from Unicode table in `CodepointWidthDetector` later on; however, the latter one has been broken in this PR.

When the scanned key is considered invalid in `CharToKeyEvents`, it tries to detect character width by calling `GetQuickCharWidth` and make it process as keyboard events if the width is `CodepointWidth::Wide`. In the aforementioned PR, however, `GetQuickCharWidth` no longer returns `CodepointWidth::Wide` and instead returns `CodepointWidth::Invalid` for the characters other than ASCII, and results in `SynthesizeNumpadEvents` being called for `閿涙劧绱ら敍鎺炵处閿涙棑绱╅敍鏍电船閿涙﹫绱甡. Since this function processes the given characters as if it were typed with `Alt` key + numpad, the result becomes nondeterministic (such as some applications like cmd.exe process this normally but powershell.exe only accepts the first letter).

https://github.com/microsoft/terminal/blob/1df3182865fb089bd653763cd0abbea811545365/src/types/convert.cpp#L156

One option is to return a new value like `CodepointWidth::Unknown` when `GetQuickCharWidth` cannot detect the character width immediately,

```diff
  CodepointWidth GetQuickCharWidth(const wchar_t wch) noexcept
  {
      if (0x20 <= wch && wch <= 0x7e)
      {
          /* ASCII */
          return CodepointWidth::Narrow;
      }
+     else if (wch < 0xffff)
+     {
+         return CodepointWidth::Unknown;
+     }
      return CodepointWidth::Invalid;
  }
```

because the definition of `CodepointWidth::Invalid` is **not a valid unicode codepoint**.

https://github.com/microsoft/terminal/blob/1df3182865fb089bd653763cd0abbea811545365/src/types/inc/convert.hpp#L23-L29

In `CharToKeyEvents`, the expression should be corrected to:
```diff
- if (WI_IsFlagSet(CharType, C3_ALPHA) || GetQuickCharWidth(wch) == CodepointWidth::Wide)
+ if (WI_IsFlagSet(CharType, C3_ALPHA) || GetQuickCharWidth(wch) == CodepointWidth::Unknown)
```

and in `CodepointWidthDetector::GetWidth()`, it has to support the new value:

```diff
-         // If it's invalid, the quick width had no opinion, so go to the lookup table.
-         if (width == CodepointWidth::Invalid)
+         // If it's unknown or invalid, the quick width had no opinion, so go to the lookup table.
+         if (width == CodepointWidth::Unknown || width == CodepointWidth::Invalid)
```

I can make a PR if the way of fix I've suggested is acceptable. Thanks in advance.

## Appendix

Note that this issue is not related to the issue in PSReadLine at all because it can be reproducible in applications launched from PowerShell.",DHowett,Product-Conhost;Area-Input;Issue-Bug;Product-Terminal;Needs-Tag-Fix,2021-02-05T14:53:11Z,2021-04-27T23:24:55Z,chitoku-k,chitoku-k;zadjii-msft;miniksa;DHowett;dAu6jARL;skyline75489,zadjii-msft,,zadjii-msft,,DHowett,
microsoft/terminal,909,"Render `tig` correctly It would be great if the program [`tig`](https://github.com/jonas/tig) worked properly in Terminal.

Here is a screenshot using `tig` on this repo:
![image](https://user-images.githubusercontent.com/49821/58054288-5f9b7a80-7b17-11e9-8494-c9652faab735.png)

",bitcrazed;cinnamon-msft,Resolution-External;Area-Rendering;Issue-Bug;Product-Terminal;Tracking-External,2019-05-20T21:53:21Z,2020-11-03T16:36:57Z,decriptor,decriptor;DHowett-MSFT;bitcrazed;ToadKing;UncleInf;ffes;wjrogers;zadjii-msft;johannesherr,zadjii-msft,DHowett-MSFT,DHowett-MSFT,,zadjii-msft,
microsoft/terminal,9094,"Settings UI: Renaming default color scheme applies to each profile instead of defaults section <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows [Version 10.0.19042.746]
Windows Terminal version (if applicable): Windows Terminal Preview Version: 1.6.10272.0
```

# Steps to reproduce

1. Create a custom color scheme named 'foo'
2. In the ""Base Layer"" settings page, select 'foo' as the color scheme
3. Rename the color scheme 'foo' to 'bar'

# Expected behavior

The color scheme in the ""Base Layer"" settings should be updated to be 'bar' and changing it should affect all profiles.

# Actual behavior

The color scheme in the ""Base Layer"" settings changes to ""Campbell"" and changing it has no effect on other profiles.  Looking at the settings file you will see that each profile has had the `colorScheme` attribute added with the new name, and the `colorScheme` attribute in the `defaults` section still has the old name.
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-2;Area-Settings UI,2021-02-10T03:16:33Z,2021-02-10T22:11:56Z,mbudnek,DHowett;carlos-zamora,zadjii-msft;DHowett,zadjii-msft;DHowett,zadjii-msft,,,
microsoft/terminal,9109,"Dragging a tab makes the window slowly scroll up for a while even after not dragging the tab anymore <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19042.0
Windows Terminal version (if applicable): 1.5.10271.0
```

# Steps to reproduce

1. Have a single tab open
2. Drag that tab downward a little (starting your drag at the bottom of the tab, sometimes text in the terminal gets selected this way, but that's not necessary for this to happen)


# Expected behavior

It shouldn't scroll up forever when you do that

# Actual behavior

If the terminal can scroll up it will scroll up slowly and go on until you click in the terminal
video: https://www.youtube.com/watch?v=o0T1jeFemvQ ",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-3,2021-02-11T03:22:34Z,2021-07-28T22:27:09Z,RuurdBijlsma,zadjii-msft;leduyquang753,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9130,"Arrow keys no longer work in the Tab Switcher  This is on Preview Version: 1.7.413.0, which is basically just `main`. Usually you can open that tab switcher and use the arrow keys to navigate the list, like the command palette. Now it seems that interaction no longer works?

Might have been broken in #9056? Unsure if that made the 1.7 selfhost though.

/cc @Don-Vito as an fyi",Don-Vito,Resolution-Fix-Committed;Issue-Bug;Needs-Triage;Product-Terminal;Needs-Tag-Fix;Severity-Blocking;Area-CmdPal,2021-02-12T11:10:55Z,2021-02-13T04:00:21Z,zadjii-msft,Don-Vito;zadjii-msft,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,9141,"De-underline hyperlink on hover-out #2 Testing Windows Terminal Preview 1.6.10412.0

De-underlining now works when the mouse moves away from the link while the window doesn't have the focus (#8925).
But we have a second de-underlining scenario that doesn't work properly...

Regardless of whether the window has the focus or not, hyperlinks are properly de-underlined only if the mouse moves over another character cell within the client area.
If the link is on the top row and the mouse moves higher than the link to the tabs/titlebar area, and/or if the link starts on the leftmost column and the mouse moves left to the margin and out of the window non-client area, or if the link reaches the rightmost column and the mouse moves right over the margin, scrollbar, etc..., the hyperlink stays hot.

Basically, it seems its hover-out handler is called only when the pointer moves over a cell not part of the hyperlink, but doesn't get called when the pointer moves directly to something else than the client area.",Don-Vito,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Impact-Visual,2021-02-12T22:01:00Z,2021-02-17T21:33:54Z,PhMajerus,DHowett;Don-Vito,DHowett,DHowett,DHowett,,DHowett,
microsoft/terminal,9230,"windowingBehavior != ""useNew"" breaks `wt --help` unless you do `wt -w -1 --help` As in title. `wt --help` is eaten because the recipient window responds to it. Do we need to do commandline proposal _after_ processing non-subcommand args?",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Needs-Triage;Product-Terminal;Priority-1,2021-02-20T05:54:29Z,2021-02-22T18:50:40Z,DHowett,zadjii-msft,DHowett,,DHowett,,,
microsoft/terminal,9238,"Area-Localization: the french translation of the Settings UI is... terrible ## Brief explanation of the issue

The french translation of the settings UI is full of mistakes. I corrected a single pane  but please note the rest of the settings follow a similar pattern. Most verbs are wrongly conjugated, especially in the context of software (maybe the loc. team was not given context or something?)+ some words are just missing (see ""Alt+Click d'ouvrir votre fichier default.json"" ?!).

(The use of `-ez` indicates a polite, 2nd person plural meaning: All of those would mean ""Please re-draw the screen... (by yourself)"", ""Please open your default.json file..."" etc 棣冩)
![image](https://user-images.githubusercontent.com/10530980/108633081-9fbd2900-7472-11eb-9bb4-557c82048357.png)

I know localization are very minor issues, but it looks so dumb, it's kind of a shame. Is there a proper place to report them (likely not here.. this is a waste of your time..) ? If so, please include it in [ your .github/ISSUE_TEMPLATE/config.yml](https://github.com/microsoft/terminal/blob/main/.github/ISSUE_TEMPLATE/config.yml) file.

Meanwhile the UI works great ! Thanks for your amazing work !",DHowett,Resolution-Fix-Available;Issue-Bug;Product-Terminal;Area-Localization;Area-Settings UI,2021-02-21T17:19:43Z,2021-04-21T15:37:42Z,gpotter2,DHowett;gpotter2;sba923,DHowett,zadjii-msft;DHowett,DHowett,,DHowett,
microsoft/terminal,9255,"""Disclaimer"" text boxes are not read in narrator (not @zadjii-msft's fault, but still relevant) This text block is _not_ read by a screen reader (same with the disclaimer in base layer). I'll file a separate issue to track this one.

_Originally posted by @carlos-zamora in https://github.com/microsoft/terminal/pull/9253#discussion_r581256430_",carlos-zamora,Issue-Bug;Area-Accessibility;Product-Terminal;Needs-Tag-Fix;Priority-1;Tracking-External;Area-Settings UI,2021-02-23T20:49:51Z,2021-12-13T18:15:44Z,zadjii-msft,zadjii-msft;DHowett;carlos-zamora,zadjii-msft,DHowett,zadjii-msft,,zadjii-msft,
microsoft/terminal,9273,"Settings reload causes occasional crash in SUI It looks like manipulating the Navigation View's menu still wigs it out a bit.

```
08 (Inline Function) --------`--------     Microsoft_Terminal_Settings_Editor!winrt::check_hresult+0xb [E:\BA\271\s\src\cascadia\TerminalSettingsEditor\Generated Files\winrt\base.h @ 4825] 
09 (Inline Function) --------`--------     Microsoft_Terminal_Settings_Editor!winrt::impl::consume_Windows_Foundation_Collections_IVector<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::IInspectable>,winrt::Windows::Foundation::IInspectable>::ReplaceAll+0x4f [E:\BA\271\s\src\cascadia\TerminalSettingsEditor\Generated Files\winrt\Windows.Foundation.Collections.h @ 247] 
0a 00000068`690fefd0 00007ff8`83d99611     Microsoft_Terminal_Settings_Editor!winrt::Microsoft::Terminal::Settings::Editor::implementation::MainPage::UpdateSettings$_ResumeCoro$1+0xafd [E:\BA\271\s\src\cascadia\TerminalSettingsEditor\MainPage.cpp @ 117] 
0b (Inline Function) --------`--------     Microsoft_Terminal_Settings_Editor!std::experimental::coroutine_handle<void>::resume+0xd [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\include\experimental\coroutine @ 107] 
0c (Inline Function) --------`--------     Microsoft_Terminal_Settings_Editor!std::experimental::coroutine_handle<void>::operator()+0xd [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\include\experimental\coroutine @ 99] 
0d (Inline Function) --------`--------     Microsoft_Terminal_Settings_Editor!winrt::resume_foreground::__l2::awaitable::await_suspend::__l2::<lambda_2ab9998b3c4eacdb9b89a7a0699bc21a>::operator()+0xd [E:\BA\271\s\src\cascadia\TerminalSettingsEditor\Generated Files\winrt\Windows.UI.Core.h @ 3326] 
0e 00000068`690ff390 00007ff8`acb454a8     Microsoft_Terminal_Settings_Editor!winrt::impl::delegate<winrt::Windows::UI::Core::DispatchedHandler,<lambda_2ab9998b3c4eacdb9b89a7a0699bc21a> >::Invoke+0x11 [E:\BA\271\s\src\cascadia\TerminalSettingsEditor\Generated Files\winrt\Windows.UI.Core.h @ 1277] 
0f 00000068`690ff3c0 00007ff8`acb0505f     Windows_UI!CreateControlInput+0x1a658
```",carlos-zamora;lhecker,Resolution-Fix-Committed;Issue-Bug;Severity-Crash;Product-Terminal;Priority-1;Area-Settings UI,2021-02-24T21:09:42Z,2021-06-11T00:38:10Z,DHowett,DHowett;carlos-zamora,DHowett,DHowett,carlos-zamora,,,
microsoft/terminal,9290,"Proto-extensions ignore existing profile settings <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

If I use a proto-extension that `""updates""` an existing profile, all of the existing settings in my original profile are ignored.

Additionally, if I try to add a profile setting after a proto-extension is installed that `""updates""` that profile, the setting is instantly deleted.

Proto-extensions generate a new profile in settings.json using the same GUID, thus overriding all customizations to the original profile.

# Environment

```none
Windows build number: 10.0.21318.0
Windows Terminal version (if applicable): 1.7.543.0

Any other software?
```

# Steps to reproduce

Here's an example scenario:

My Ubuntu profile sets a background image:

```
{
    ""backgroundImage"": ""C:\\Users\\cinnamon\\Pictures\\01 gettyimages-1129788053_resized.jpg"",
    ""guid"": ""{2c4de342-38b7-51cf-b940-2309a097f518}"",
    ""hidden"": false,
    ""name"": ""Ubuntu"",
    ""source"": ""Windows.Terminal.Wsl"",
    ""fontFace"": ""Cascadia Code""
},
```

I install a proto-extension that updates Ubuntu's font weight and font size:

```
{
  // updates Ubuntu profile
  ""updates"": ""{2c4de342-38b7-51cf-b940-2309a097f518}"",
  ""fontSize"": 16,
  ""fontWeight"": ""thin""
},
```

My settings.json is modified by the extension to look like this now:

```
{
    ""backgroundImage"": ""C:\\Users\\cinnamon\\Pictures\\01 gettyimages-1129788053_resized.jpg"",
    ""guid"": ""{2c4de342-38b7-51cf-b940-2309a097f518}"",
    ""hidden"": false,
    ""name"": ""Ubuntu"",
    ""source"": ""Windows.Terminal.Wsl"",
    ""fontFace"": ""Cascadia Code""
},
{
    ""guid"": ""{2c4de342-38b7-51cf-b940-2309a097f518}"",
    ""hidden"": false,
    ""name"": ""Ubuntu"",
    ""source"": ""demo-extension""
}
```

My font face and background image are now ignored.

![image](https://user-images.githubusercontent.com/48369326/109204188-e56f3f80-7759-11eb-9fd9-07adb05cb50a.png)

I also can't update any setting after the fact.

![proto-bug](https://user-images.githubusercontent.com/48369326/109205255-33387780-775b-11eb-8bfe-7c297515b9dd.gif)

Here's my settings.json after that settings application attempt:

```
{
    ""colorScheme"": ""One Half Dark"",
    ""fontFace"": ""Cascadia Code""
},
{
    ""backgroundImage"": ""C:\\Users\\cinnamon\\Pictures\\01 gettyimages-1129788053_resized.jpg""
},
{
    ""guid"": ""{2c4de342-38b7-51cf-b940-2309a097f518}"",
    ""hidden"": false,
    ""name"": ""Ubuntu"",
    ""source"": ""demo-extension""
}
```

My original Ubuntu profile is gone..?

# Expected behavior

The proto-extension should overlay its settings on top of my original settings, rather than ignoring all of them completely. I should also be able to customize a profile that has a proto-extension updating it.

# Actual behavior

See above.
",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Needs-Triage;Needs-Tag-Fix;Priority-1,2021-02-25T19:23:10Z,2021-02-25T22:44:44Z,cinnamon-msft,cinnamon-msft,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,9317,"The Settings context menu still uses the BIG close icon The Settings context menu still uses the old icon. 
![closeicon2](https://user-images.githubusercontent.com/78622729/109518910-63fa1300-7ab3-11eb-9379-58d761410ff2.png)
Wouldn't it be better to have a single menu for all tabs?

_Originally posted by @gabrielconl in https://github.com/microsoft/terminal/issues/8419#issuecomment-788035770_

<hr> 

Originally fixed in #8424, but not for SettingsTab. Really should be fixed in `TabBase`",carlos-zamora,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Product-Terminal;Priority-3;good first issue;Area-Settings UI,2021-03-01T15:40:50Z,2021-03-04T19:31:58Z,zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,carlos-zamora,,,
microsoft/terminal,9320,"default profile menu once opened in startup settings goes above the window when scrolling  down ![image](https://user-images.githubusercontent.com/79228542/109563642-54dd8a00-7ae0-11eb-8624-b911385d7563.png)

# Environment
Windows build number: Version 10.0.19042.844
Windows Terminal version (if applicable): 1.7.572.0

Any other software?

# Steps to reproduce

Settings-Startup-Default profile (tap arrow to open) and scroll down the window using mouse (the window not in maximize mode)

# Expected behavior

selection menu (Windows PowerShell, Command Prompt, Azure Cloud Shell) - when expanded (while scrolling down) it does not move to the screen above the Windows PowerShell window (the window is not in maximize mode)

# Actual behavior

The selection menu (Windows PowerShell, Command Prompt, Azure Cloud Shell) goes beyond the top edge of the Windows PowerShell window if the window is not in maximize mode
",zadjii-msft,Resolution-Fix-Committed;Resolution-External;Issue-Bug;Product-Terminal;Priority-3;Tracking-External;Area-Settings UI,2021-03-01T21:50:32Z,2021-08-16T13:41:18Z,ppn67,zadjii-msft,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,9328,"Settings UI Simplified Chinese translation recommendation Inspired by #9238, this is the recommendation for Simplified Chinese.

| Key | Recommendation | Comment|
| -- | -- |-- |
| Globals_LaunchModeMaximized.Content | 閺堟径褍瀵 |  There should be an adjective here |
| Globals_LaunchModeFocus.Content | 娑撴挻鏁 | The translation of ""focus"" is a mistake. This term is being used widely, even inside windows (""Focus assist""). It should be used here, too. |
| Globals_LaunchModeMaximizedFocus.Content | 閺堟径褍瀵叉稉鎾存暈 | Same as above |
| Globals_LaunchMode.HelpText |  Change 閳ユ繄鍔嶉悙"" to ""娑撴挻鏁"" | Same as above |
| Globals_WindowingBehavior.Header | 閺傛澘缂撶圭偘绶ョ悰灞艰礋 or 閸掓稑缂撶圭偘绶ョ悰灞艰礋 | The current translation means ""the behavior of newly created instance"", which is confusing. It should be ""the behavior of *creating* instance. |
| Globals_AlwaysOnTop.Header | 缂冩禍搴ㄣ婄仦 | The current translation is hard to understand. This is the term used in Task Manager, which is way better. |
| Globals_CopyOnSelect.Header | 閼烽崝銊ョ殺閹甸柅澶婂敶鐎圭懓宥呭煑閸掓澘澹鐠愬瓨婢 | The current translation is very wrong. The current translation means ""can't copy the selection to clipboard"". | 
| Globals_CopyFormatNone.Content | Drop the ""閸欓悽銊ょ艾"" | |
| Globals_TabSwitcherMode.HelpText | Drop the ""缂佸牏閳 | |
| Globals_TabSwitcherModeMru.Content | 閻欑粩瀣鐛ラ崣锝忕礉閹稿嬫付鏉╂垳濞囬悽銊┿庢惔蹇撳瀼閹 | The translation is very misleading. I can't say my translation is perfect, but it's definitely better.|
| Globals_TabSwitcherModeInOrder.Content | 閻欑粩瀣鐛ラ崣锝忕礉閹稿愬愩嶉崡鈩冩▔缁娲銆庢惔蹇撳瀼閹 | Same as above. | 
| Globals_TabWidthMode.Header| Drop the ""濡鈥崇础"" |  |
| Globals_TabWidthModeEqual.Content | 缁涘 | The current translation is wrong. |
| Globals_TabWidthModeCompact.Content | 缁毖冨櫨 | The current translation is hard to understand. |
| Globals_TabWidthMode.HelpText | Change the translation of ""compat"" to ""缁毖冨櫨"" | Same as above|
| Globals_KeybindingsDisclaimer.Text | Change ""鐎靛棝鎸滈垾 to ""韫囬幑鐑芥暛閳 | The current translation is the ""keys"" as in ""SSH keys"".|
| Nav_ProfileDefaults.Content | Change ""閸ユ儳鐪伴垾 to ""鐏炲倵 | The term ""閸ユ儳鐪"" refers to the layer in image processing. |
| Profile_CursorShape.Header | Drop the ""閻"" | Simplified & cleaner. |
| Profile_CursorHeight.Header | Drop the ""閻"" | Same as above. |
| Profile_ScrollbarVisibility.Header | Drop the ""閻"" | Same as above. |
| Profile_ScrollbarVisibilityHidden.Content | Drop the ""瀹"" | There should be an adjective here. | 
| Profile_AcrylicHeader.Text | 娴滄艾鍘犻崝娑欐櫏閺 | The current translation is a chemical term. See #8992 | 
| Profile_UseAcrylic.Header | 閸氶悽銊ょ肮閸忓濮忛弫鍫熺亯 | Same as above. |
| Profile_Hidden.Header | Drop the ""娑撴禍楦跨カ閺"" | The current translation is the profile as in ""Facebook profile"". |
| Profile_CloseOnExit.Header| 閸忔娊妫寸悰灞艰礋 | This is way cleaner & easy to understand. |
| Profile_CursorShapeFilledBox.Content | Change to ""鐎圭偛绺惧"" | The current translation does not make sense. |
| Profile_CursorShapeEmptyBox.Content | Change to ""缁屽搫绺惧"" |  The current translation is a bit vague. |
| Profile_StartingDirectoryUseParentCheckbox.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip | Drop the 閳ユ繀绮犳稉"" | |
| Profile_SuppressApplicationTitle.HelpText | Drop the ""閸欓垾. Change ""缁備焦"" to ""韫囩晫鏆"" | |
| Profile_AntialiasingMode.Header | Change ""濞戝牓娅庨柨姒"" to ""閹舵呮暜姒"" | This is the more tech-savvy saying |
| Profile_AntialiasingModeAliased.Content | 閺  | The current translation is very wrong. 'Aliased' means ""do not use antialiasing"". |
| Profile_SnapOnInput.Header | Append ""娴ｅ秶鐤"" at the end | To make it less confusing.  |
| Profile_HistorySize.Header | Drop the ""鐠嬪啯鏆ｉ垾 | Same as above. |
| Profile_BellStyleVisual.Content | 鐟欏棜澶涚礄闂傞悜浣锋崲閸斺剝鐖閿 | I don't get it why ""flash"" is left as it is. |
| Profile_BellStyleAudible.Content | 婢逛即鐓 |  Just my two cents. |
",DHowett,Issue-Bug;Product-Terminal;Needs-Tag-Fix;Tracking-External;Area-Localization;Area-Settings UI,2021-03-02T04:30:12Z,2021-05-25T03:54:46Z,skyline75489,zadjii-msft;driver1998;skyline75489;DHowett;reli-msft,skyline75489;zadjii-msft,skyline75489;zadjii-msft,zadjii-msft,,skyline75489,
microsoft/terminal,9354,"Shader files not loading in 1.7 # Environment

```none
Windows build number: 10.0.19042.0
Windows Terminal version: 1.7.572.0
```

# Steps to reproduce

1. Build/Install Windows Terminal 1.7.572.0
2. Set `experimental.pixelShaderPath` on a profile (or globally) such that it points to an appropriately structured HLSL file (such as `Invert.hlsl` from the samples folder)
3. Run the terminal (with the appropriate profile if necessary)

# Expected behavior

The pixel shader is loaded and executed.

# Actual behavior

The pixel shader is not loaded.

# Comments

I have not been able to load any shader files at all in 1.7 from the official release, nor when I build it from source. Poking around in the debugger, I can see that the shader file path is definitely there when the JSON is read in:

![CascadiaSettingsSerialization.cpp 1.7 branch](https://user-images.githubusercontent.com/651955/109766645-2d063780-7c42-11eb-9724-ffde02aebf36.png)

However it seems to disappear at some point between being read and sent to `SetPixelShaderPath()`. I'm not sure if it's being deserialized correctly because I don't really understand how I'm supposed to inspect the settings object; it doesn't behave the way I'd expect it to (just C++ things, I assume).
### release-1.7
![DxRenderer.cpp 1.7 branch](https://user-images.githubusercontent.com/651955/109764925-df88cb00-7c3f-11eb-8c78-e297cf2c4382.png)

### release-1.6
![DxRenderer.cpp 1.6 branch](https://user-images.githubusercontent.com/651955/109765459-9d13be00-7c40-11eb-981a-e67a96545f29.png)

I've tried this on other machines that have never had any version of the Terminal installed and they all exhibit the same issue.

",PankajBhojwani,Resolution-Fix-Committed;Area-Rendering;Issue-Bug;Area-Settings;Product-Terminal;Priority-3,2021-03-03T07:53:47Z,2021-03-04T17:19:22Z,Nacimota,zadjii-msft;Nacimota;DHowett,zadjii-msft;DHowett,DHowett,DHowett,,,
microsoft/terminal,9369,"Focus the last tab when the param to `focus-tab` is greater than the number of tabs From releas notes
```
wt can now run commands in any window that already exists with wt -w # (#8898)

    You can specify wt -w -1 to force the creation of a new window even if you've disabled it with the Windowing Behaviors

          Specifying a window that does not exist (wt -w 1048576) will result in a new window being created with that ID (!)
```
it's great! 

but to make it actually useful it should work with same pattern for tabs so i'd to be able to

`wt -w 1048576 focus-tab -t 3`

and expected result is to focus tab with index 3

or create it if it not exists 

so for example 

if i have only one tab in this window perhaps it could fallback to

`wt -w 1048576 ; ; ; focus-tab -t 3` 

?

 

",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Product-Terminal;Priority-2;Area-Commandline;good first issue,2021-03-03T21:36:39Z,2021-07-22T13:48:37Z,ngmariusz,zadjii-msft;ngmariusz,ngmariusz;zadjii-msft,zadjii-msft;DHowett,zadjii-msft,,,
microsoft/terminal,9375,"Unable to find the selected font ""Cascadia Mono"". There is a bug in the application deployment platform on recent versions of Windows that results in the Cascadia Mono font (**the default font**) being unreadable. Terminal cannot read it, and if it tries it will _crash_.

Unfortunately, that means that _through no fault of your own_, you'll get a dialog that says we can't find Cascadia Mono or Cascadia Code.

**KNOWN SOLUTIONS**

* Either reboot or
* choose to ""Repair"" the Terminal application in the ""All apps"" list in Settings.

![repair-terminal-windows-11](https://user-images.githubusercontent.com/18356694/164486825-c6e58a0e-51d9-4e15-a6bc-0636c44054bc.gif)


**ONLY COMMENT HERE IF THE WORKAROUNDS DON'T HELP**
Since there are so many subscribers to this thread, we will lock it if it starts to accumulate unrelated commentary.

2021-06-10: we閳ユ獫e locked it as folks haven閳ユ獩 read this disclaimer. 

<details>
<summary>Original bug in Terminal 1.6</summary>

<!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: Microsoft Windows NT 10.0.19042.0
Windows Terminal version: 1.6.10571.0
```

# Steps to reproduce
This 'happens on my machine', not sure if easily reproducible.
- Start Microsoft Terminal

# Expected behavior
Microsoft terminal opens on the default terminal

# Actual behavior
A pop-up is shown with the following error message:
![screenshot of the error message](https://user-images.githubusercontent.com/8693699/109962748-dc4b1900-7ceb-11eb-8e47-3144d737b01d.png)
Transcript:  
```none
Warning

Unable to find the selected font ""Cascadia Mono"".

""Consolas"" has been selected instead.

Please either install the missing font or choose another one.
```

# Additional information
Other applications, Microsoft Word, Paint.NET, show the `Cascadia Mono` font and allow usage without any issues.

</details>",miniksa,Resolution-Fix-Committed;Area-Fonts;Issue-Bug;Product-Terminal;Priority-2,2021-03-04T12:21:06Z,2021-04-08T17:49:07Z,Flightkick,Flightkick;oskar;MuTLY;Xbuduo;yikakia;WSLUser;hawko2600;Rod-in-NM;lonelydev;kaovilai;mmanueljoao;GenZmeY;amirhosseinmoezzi;jkingsman;miniksa;zadjii-msft;grandslamjmh;fujiawei-dev;komic;eturnq,zadjii-msft,,zadjii-msft,,,
microsoft/terminal,9410,"Terminal crashes deallocating til::bitmap's vector run w/ PMR allocator (??) <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

<!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

If this is an application crash, please also provide a Feedback Hub submission link so we can find your diagnostic data on the backend. Use the category ""Apps > Windows Terminal (Preview)"" and choose ""Share My Feedback"" after submission to get the link.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->

# Environment

```none
Windows build number: 10.0.19042.844
Windows Terminal version: 1.6.10571.0
```

# Steps to reproduce

Unable to reproduce reliably but suspect it's related to split panes across numerous tabs. I can't remember the last time I saw Windows Terminal crash, but I usually don't use split planes much. This time I had numerous tabs (common) and a vertical split in most of those tabs. Probably not material but all terminals were PowerShell 7 and most had open WinRM sessions.

I was able to retrieve a crash dump which I've uploaded via Feedback Hub [here](https://aka.ms/AAbf22x). A quick analysis in WinDbg points to heap corruption. The lack of symbols though makes interpreting the stack trace of the faulting thread a bit more involved.

# Expected behavior

Not to crash :-)

# Actual behavior

Crash of Windows Terminal and the loss of all open terminals.

# Other notes

It'd be nice if symbols could be published at least for official releases. This could be as simple as uploading them in a separate Zip attached to the GitHub releases page, instead of publishing them on the official Microsoft symbol server. In turn, this would allow people like me to perform more analysis of issues themselves, hopefully leading to more detailed bug reports :-)",DHowett,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Priority-1,2021-03-08T00:57:05Z,2021-03-26T22:11:09Z,ralish,zadjii-msft;DHowett,zadjii-msft;DHowett,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9453,"[REGRESSION] Multi-click selection broken in main IN RETROSPECT: I don't think this is right. We might have lost the case where there's no selection, and you double/triple click on a word

@Don-Vito as an fyi

_Originally posted by @zadjii-msft in https://github.com/microsoft/terminal/pull/9403#r592604796_
",Don-Vito,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal;Severity-Blocking,2021-03-11T18:44:33Z,2021-03-12T03:37:58Z,zadjii-msft,DHowett;Don-Vito;zadjii-msft,zadjii-msft,DHowett,DHowett,,,
microsoft/terminal,95,"Console process order changed in 15063's v2 console making npm harder to close _From @rprichard on May 29, 2017 4:40_

In 15063's v1 console, and any console in Windows 10.0.14393 and older, Windows seems to order the processes from newest-to-oldest for `GetConsoleProcessList` (probably the opposite of the attachment order).  When a console is closed, Windows considers each process, in order, and delivers it a `CTRL_CLOSE_EVENT` event.  Windows gives the process 5 seconds to exit, after which point it terminates the process.

In 15063's v2 console, the order of the process list has reversed and is now oldest-to-newest.  Maybe the change was intentional?  Regardless, it affects npm (the node package manager), as detailed here: https://github.com/Microsoft/vscode/issues/26807#issuecomment-304503591.

The test case given on https://github.com/Microsoft/vscode/issues/26807 was fairly easy for me to reproduce, and it doesn't require VSCode.  Installing node.js adds `node.bat` and `npm.cmd` to the PATH.  Run the commands in an ordinary console, and instead of ""pressing the garbage bin button"", try to close the console window.  In my experience, the first click leaves the youngest `node.exe` process running, and the second click finishes the job.  (VSCode's ""garbage bin button"" eventually turns into winpty posting a `WM_CLOSE` message, which kills `winpty-agent.exe`.  The console window survives, but it's hidden, so the `node.exe` is leaked.)

Starting in Windows 8, when the console is delivering `CTRL_CLOSE_EVENT` events, it seems to abort the operation if a process exits on its own accord.  Windows 7, on the other hand, skips over dead processes.

The combination of the 15063 v2 change and the Win8 change breaks npm, which has a process tree like so:

 * A: node.exe (npm run, owns Job1)
    * B: cmd.exe (assigned to Job1)
       * C: node.exe (tsc --watch)

Windows delivers `CTRL_CLOSE_EVENT` to A(node.exe).  node.exe turns it into a libuv-emulated SIGHUP signal, which is sent to Node's main thread and ignored.  After 5 seconds, Windows kills A(node.exe).  Killing A(node.exe) destroys Job1, which destroys B(cmd.exe).  Apparently the console then aborts the close operation because B(cmd.exe) is missing.

Previously, Windows signaled C(node.exe) first, and after C exited, the other two processes would definitely exit.

Also: There seems to be a race condition between process cleanup (in the kernel?) and the close event signaling (in `conhost.exe`?), and sometimes the console close operation is able to skip over already-dead processes.

I wrote a test program demonstrating things discussed in this report -- `closetest.cc`, https://gist.github.com/rprichard/7ec3fe1b199f513bee82fea196a82a79.  It has notes at the top of the file and a `--help` option.

 * To see the change in signaling order (EXAMPLE 1 in `closetest.cc`), run Sysinternals `dbgview.exe`, then `closetest.exe` without arguments.

 * To create a console that's hard to close (EXAMPLE 2), run `closetest.exe -d alternate --gap -n N`.  In Windows 8 and up, you'll have to close the console N + 1 times.  In Vista or Windows 7, just once is enough.

 * To see the race condition (EXAMPLE 3), try:

    * `closetest.exe -d [backward/forward] -m job -n 10 --alloc 1`, or
    * `closetest.exe -d [backward/forward] -m job -n 50`

   On a v1 or <= 14393 console, use `-d backward`.  On the v2 15063 console, use `-d forward`.

 * The closest analog to npm's issue is `closetest.exe -d forward -m job -n 2 --alloc 100`.  With the 15063 v2 console, this command usually takes two Close clicks to destroy the console.

Windows build number:  10.0.15063.332


_Copied from original issue: Microsoft/WSL#2170_",miniksa,Work-Item;Product-Conhost;Resolution-Fix-Available;Area-Server;Issue-Bug,2018-02-16T01:11:57Z,2019-05-18T01:58:59Z,bitcrazed,bitcrazed;DHowett-MSFT,bitcrazed,,bitcrazed,,DHowett-MSFT,
microsoft/terminal,950,"Terminal selects lines when scrolling down the scroll bar and crashes when right clicked afterwards <!--
This bug tracker is monitored by Windows Terminal development team and other technical folks.

**Important: When reporting BSODs or security issues, DO NOT attach memory dumps, logs, or traces to Github issues**.
Instead, send dumps/traces to secure@microsoft.com, referencing this GitHub issue.

Please use this form and describe your issue, concisely but precisely, with as much detail as possible.

-->
Windows terminal exits with code -1073741189 (0xc000027b). When clicking on a spot in the terminal, dragging down the scroll bar, then right clicking.

# Environment

```none
Windows build number: [Version 10.0.18898.1000]  
Using powershell
```

# Steps to reproduce

<!-- A description of how to trigger this bug. -->
- Populate the terminal with ls until scroll bar is around 1/3 height of the terminal
- Scroll up top the top
- Left click within the terminal
![Capture1](https://user-images.githubusercontent.com/30029892/58218447-e2b5ff80-7cd4-11e9-9d80-fcb6ccae2c2b.PNG)

- Drag the scroll bar down
![Capture2](https://user-images.githubusercontent.com/30029892/58218452-eba6d100-7cd4-11e9-9472-2162c0898c2e.PNG)

- Right click within the terminal

# Expected behavior

<!-- A description of what you're expecting, possibly containing screenshots or reference material. -->
Expected the terminal to do nothing.

# Actual behavior
Exited with code -1073741189.
<!-- What's actually happening? -->
",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Product-Terminal,2019-05-23T01:07:51Z,2019-06-18T00:27:18Z,Kapperchino,mscodebum;zadjii-msft,zadjii-msft;DHowett-MSFT,DHowett-MSFT;carlos-zamora,carlos-zamora,,DHowett-MSFT,
microsoft/terminal,9692,"conhost.exe heap corruption in COOKED_READ_DATA::_handlePostCharInputLoop ### Windows Terminal version (or Windows build number)

Windows Terminal 1.6.10571.0
OS Build 21343.10000

### Other Software

My awful cmd wrapper (attempt at a terminal emulator) written in a weekend 3 years ago. A pyramid of hacks that seems to fuzz the new conhost enough to make it crash. Wasn't crashing before, apparently until I upgraded to Windows 10 insider dev channel.

### Steps to reproduce

Not clear yet but my cmd wrapper has multiple threads calling into ReadConsoleOutput, GetConsoleScreenBufferInfo, WriteConsoleInput many times. Looks like it's triggered by successive calls to GetConsoleScreenBufferInfo and then WriteConsoleInput.

### Expected Behavior

no crash

### Actual Behavior

Heap corruption. Attaching a debugger showed that it was crashing during a call to free which ended up in ntdll!RtlpHeapFindListLookupEntry. I then enabled app verifier for conshost.exe and then it crashed in memcpy called by COOKED_READ_DATA::_handlePostCharInputLoop. So this likely where the heap corruption happens.

",zadjii-msft,Product-Conhost;Area-Input;Issue-Bug;Severity-Crash;Needs-Tag-Fix;Priority-1,2021-04-02T07:35:58Z,2021-05-11T17:11:34Z,emmett-b,emmett-b;DHowett;zadjii-msft;WSLUser,zadjii-msft;DHowett,DHowett,zadjii-msft,,DHowett,
microsoft/terminal,9718,"[BASH] Window renamer doesn't dismiss when you click outside of it Should it?

_originated in 4/2 bug bash_",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2021-04-06T14:23:50Z,2021-04-07T00:12:41Z,DHowett,,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9719,[BASH] Window renamer OK button should be Primary styled (w/ accent color) _originated in 4/2 bug bash_,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Needs-Tag-Fix;Priority-3,2021-04-06T14:24:17Z,2021-04-06T19:25:18Z,DHowett,,zadjii-msft,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,9720,[BASH] Window renamer doesn't accept ENTER/ESC for OK/CANCEL _originated in 4/2 bug bash_,zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-User Interface;Product-Terminal;Priority-3,2021-04-06T14:24:38Z,2021-04-06T19:12:09Z,DHowett,,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9721,"[BASH] Schema doesn't seem to contain ""identifyWindow(s?)"" _originated in 4/2 bug bash_",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Area-Schema,2021-04-06T14:25:37Z,2021-04-06T19:11:30Z,DHowett,,zadjii-msft,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,9761,"New Tab does not Display the Background Image ### Windows Terminal version (or Windows build number)

Windows Build: 10.0.19042.906, Windows Terminal commit b310b1c built using Visual Studio 2019 16.9.3

### Other Software

oh-my-posh 3.133.1
posh-git 1.0.0 (Latest)
PSReadLine 2.1.0

Ubuntu WSL 20.04


### Steps to reproduce

Build Windows Terminal using visual studio. Release, x64, CascadiaPackage

1) Configure a profile to use a background.
![image](https://user-images.githubusercontent.com/802273/114227269-649b8a00-993a-11eb-9f2a-729c9f2ec738.png)

2) Exit Terminal
3) Run Terminal and the background will be solid gray and not the image selected in step 1
![image](https://user-images.githubusercontent.com/802273/114227231-52b9e700-993a-11eb-88f6-f3626e092b47.png)

5) Open Settings
6) Save Settings
7) The open tab background will show the background specified in settings
![image](https://user-images.githubusercontent.com/802273/114227305-72510f80-993a-11eb-9f9d-efcf56c1b5d4.png)

8) Start a new tab, and the background will be solid gray
![image](https://user-images.githubusercontent.com/802273/114227335-7aa94a80-993a-11eb-9a9f-fbaae50eb142.png)


The kind of shell doesn't seem to affect this. I've tried Powershell 7.1.3, Ubuntu 20.04, git bash using MINGW64.



### Expected Behavior

Opening a new Windows Terminal tab shows the background image specified in the profile. 

### Actual Behavior

Opening a new Windows Terminal tab does not show the background image specified in the profile. 

### Included Settings.json
[settings.zip](https://github.com/microsoft/terminal/files/6287896/settings.zip)

",PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Area-Settings;Product-Terminal;Severity-Blocking;Priority-0,2021-04-09T18:39:08Z,2021-04-12T18:21:57Z,dougheeren,dougheeren,DHowett,DHowett,DHowett,,,
microsoft/terminal,9768,"runxamlformat doesn't work in the tools directory ### Windows Terminal version (or Windows build number)

7f5a19b627037353fc988755ed25e6ecb5bf4675

### Other Software

_No response_

### Steps to reproduce

1. Checkout the _Windows Terminal_ source code.
2. Open a cmd shell.
3. Change to the `tools` directory.
4. Execute the `razzle.cmd` script to setup the dev environment.
5. Execute the `runformat.cmd` script to validate the source code formatting.

### Expected Behavior

The `runformat` script should execute successfully without any errors.

### Actual Behavior

I got an error generated by the xstyler utility.

```
ERROR(S):
  Option 'f, file' has no value.
```

This seems to be caused by the new `runxamlformat` script (added in PR #9589), which is now called from the `runformat` script. As far as I can tell, it only works correctly if run from the root of the project. Not a major problem, but it's more convenient to run those tools from the actual tools directory where you have easy autocomplete.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Build;Product-Meta;Needs-Tag-Fix,2021-04-10T10:15:25Z,2021-06-02T18:29:48Z,j4james,zadjii-msft,zadjii-msft,zadjii-msft,zadjii-msft,,DHowett,
microsoft/terminal,9769,"TestWindowRename unit tests are failing ### Windows Terminal version (or Windows build number)

10.0.18363.1379, 7f5a19b627037353fc988755ed25e6ecb5bf4675

### Other Software

_No response_

### Steps to reproduce

Build the app and run the unit tests (`runut.cmd`).

### Expected Behavior

All the tests should pass.

### Actual Behavior

The two `TestWindowRename` tests cause TAEF to crash.

TAEF: A crash with exception code 0xC0000005 occurred in module ""TerminalApp.LocalTests.dll"" in process ""TestHostApp.exe"" (pid:11864).
Error: TAEF: [HRESULT 0x800706BE] A failure occurred while running a test operation: 'TerminalAppLocalTests::TabTests::TestWindowRenameSuccessful'. (A crash with exception code 0xC0000005 occurred in module ""TerminalApp.LocalTests.dll"" in the process hosting the test code while invoking a test operation.)
EndGroup: TerminalAppLocalTests::TabTests::TestWindowRenameSuccessful [Failed]

TAEF: A crash with exception code 0xC0000005 occurred in module ""TerminalApp.LocalTests.dll"" in process ""TestHostApp.exe"" (pid:9296).
Error: TAEF: [HRESULT 0x800706BE] A failure occurred while running a test operation: 'TerminalAppLocalTests::TabTests::TestWindowRenameFailure'. (A crash with exception code 0xC0000005 occurred in module ""TerminalApp.LocalTests.dll"" in the process hosting the test code while invoking a test operation.)
EndGroup: TerminalAppLocalTests::TabTests::TestWindowRenameFailure [Failed]",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Area-CodeHealth,2021-04-10T13:52:46Z,2021-04-14T17:11:41Z,j4james,j4james;zadjii-msft,zadjii-msft,DHowett,zadjii-msft,,,
microsoft/terminal,979,"Touchpad scrolling not possible # Environment

Windows build number: Microsoft Windows [Version 10.0.18898.1000]
Windows Terminal version (if applicable): pulled and built today (WindowsTerminalDev_0.0.1.0_x64__8wekyb3d8bbwe)


# Steps to reproduce

Not entirely sure if this is intended behaviour or an issue to other users but I am not able to scroll through the new terminal with my touchpad on my Notebook (Alienware).

It works with my mouse but not with the touchpad. I can scroll through the native console/ poweshell though. Can somebody reproduce this?

# Expected behavior

That I can scroll through the curren window-history using two-finger-touch on the touchpad.

# Actual behavior

It wont scroll.
",zadjii-msft,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-TerminalControl;Product-Terminal;Priority-1,2019-05-24T14:45:21Z,2020-04-01T16:58:17Z,Paul-Weisser,zadjii-msft;Paul-Weisser;DHowett-MSFT;dkter;Navino16;Austin-Lamb;Escapingbug;waelkdouh;Uxorious;nishp77;joshschmelzle;pamtbaau;tu-naive;DerAlbertCom;glitch32;rehnarama,zadjii-msft;DHowett-MSFT,DHowett-MSFT,,,Paul-Weisser,
microsoft/terminal,9803,"Typing `renameWindow` key binding types into terminal prompt ### Windows Terminal version (or Windows build number)

1.8.1022.0

### Other Software

_No response_

### Steps to reproduce

Add this key binding to your actions:

```
{ ""command"": { ""action"": ""renameWindow"", ""name"": ""Foo"" }, ""keys"": ""ctrl+u"" },
```

### Expected Behavior

Nothing should be typed into the prompt.

### Actual Behavior

It's renaming the window and also typing into my prompt.

![image](https://user-images.githubusercontent.com/48369326/114634909-7e113e80-9c78-11eb-94e9-a561bfdd32ea.png)",Don-Vito,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2021-04-13T23:52:12Z,2021-04-14T20:50:50Z,cinnamon-msft,Don-Vito;zadjii-msft,cinnamon-msft,zadjii-msft,zadjii-msft,zadjii-msft,,
microsoft/terminal,9804,"Renaming the window should display confirmation ### Windows Terminal version (or Windows build number)

1.8.1022.0

### Other Software

_No response_

### Steps to reproduce

Rename the window using the `renameWindow` keybinding:

```
{ ""command"": { ""action"": ""renameWindow"", ""name"": ""Foo"" }, ""keys"": ""ctrl+u"" },
```

### Expected Behavior

Some kind of confirmation that my window has been renamed.

### Actual Behavior

Nothing appears on the screen.",zadjii-msft,Resolution-Fix-Committed;Issue-Bug;Area-Settings;Product-Terminal,2021-04-13T23:53:44Z,2021-04-22T21:15:59Z,cinnamon-msft,,cinnamon-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9847,"cannot configure starting directory in GUI when its default value is set to null ### Windows Terminal version (or Windows build number)

10.0.19042.928 1.7.1033.0

### Other Software

_No response_

### Steps to reproduce

First, Set
```
    ""profiles"":
    {
        ""defaults"":
        {
            ""startingDirectory"": null
        },
...
```

This makes the default starting directory to the parent process, which is my expected behaviour.

After that, however, the starting directory for individual shell cannot be configured in the GUI. The `Browse` button is grayed out. See the screenshot:
![image](https://user-images.githubusercontent.com/6070540/114979591-b9507f00-9ebd-11eb-9c4a-32e93e0e7145.png)


### Expected Behavior

The starting directory should be configurable in the GUI.

### Actual Behavior

See `Steps to reproduce`.",carlos-zamora;PankajBhojwani,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-1;Area-Settings UI,2021-04-16T06:14:45Z,2021-04-21T10:53:41Z,taroxd,skyline75489;taroxd;zadjii-msft;DHowett,DHowett,DHowett,DHowett,,,
microsoft/terminal,9869,"Very long `ToolTip`s get clipped  The current directory of WSLv1 tab is `/mnt/c/Users/user/Downloads`, and the tooltip just reads `/mnt`. This is not useful since it's very generic, even `/mnt/c` would be more useful. Maybe even absence of this strange path would be less confusing.

![image](https://user-images.githubusercontent.com/1041752/115111283-e9f8ed00-9f7f-11eb-9e07-2fcdee3a33b3.png)

Terminal version: `Version: 1.7.1033.0`",Don-Vito,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Area-User Interface;Needs-Triage;Product-Terminal;Priority-3,2021-04-17T11:23:32Z,2021-04-21T15:40:20Z,vadimkantorov,DHowett;vadimkantorov;zadjii-msft;Don-Vito;Korb,vadimkantorov;zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9910,"Terminal crashing when last tab is closed with `exit`, 2021 edition I'm getting constant crashes when closing the last tab. I analyzed a minidump from this crash (see below).

Due to restrictions in my corporation, I can only install Windows Terminal using the bundle file in the releases page of this repository: `Microsoft.WindowsTerminal_1.7.1091.0_8wekyb3d8bbwe.msixbundle`.

On my personal computer I use the Microsoft Store version of Windows Terminal which does NOT crash.

Let me know of anything you need to help debugging this issue 棣冩啢 

<details>
<summary>Expand for stack trace.</summary>

```
0:000> !analyze -v
*******************************************************************************
*                                                                             *
*                        Exception Analysis                                   *
*                                                                             *
*******************************************************************************


KEY_VALUES_STRING: 1

    Key  : Analysis.CPU.Sec
    Value: 11

    Key  : Analysis.DebugAnalysisProvider.CPP
    Value: Create: 8007007e on (redacted)

    Key  : Analysis.DebugData
    Value: CreateObject

    Key  : Analysis.DebugModel
    Value: CreateObject

    Key  : Analysis.Elapsed.Sec
    Value: 108

    Key  : Analysis.Memory.CommitPeak.Mb
    Value: 162

    Key  : Analysis.System
    Value: CreateObject

    Key  : Timeline.Process.Start.DeltaSec
    Value: 14


NTGLOBALFLAG:  0

PROCESS_BAM_CURRENT_THROTTLED: 0

PROCESS_BAM_PREVIOUS_THROTTLED: 0

APPLICATION_VERIFIER_FLAGS:  0

CONTEXT:  (.ecxr)
rax=0000008fcd4fc180 rbx=0000008fcd4fc0e0 rcx=0000008fcd4fc180
rdx=0000000000000000 rsi=0000000000000003 rdi=0000008fcd4fc180
rip=00007ffd08f80c0f rsp=0000008fcd4fc0a0 rbp=0000008fcd4fc770
 r8=0000000000000000  r9=0000000000000000 r10=0000026f85bd49c0
r11=5555555555555555 r12=0000000000000004 r13=0000008fcd4fca98
r14=0000000000000000 r15=0000008fcd4fd8e8
iopl=0         nv up ei pl zr na po nc
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000244
KERNELBASE!RaiseFailFastException+0xaf:
00007ffd`08f80c0f 0f1f440000      nop     dword ptr [rax+rax]
Resetting default scope

EXCEPTION_RECORD:  (.exr -1)
ExceptionAddress: 00007ffd0ab9940b (combase!RoFailFastWithErrorContextInternal2+0x000000000000050b)
   ExceptionCode: c0000602
  ExceptionFlags: 00000001
NumberParameters: 0

PROCESS_NAME:  WindowsTerminal.exe

ERROR_CODE: (NTSTATUS) 0xc0000602 - {Fail Fast Exception}  A fail fast exception occurred. Exception handlers will not be invoked and the process will be terminated immediately.

EXCEPTION_CODE_STR:  c0000602

STACK_TEXT:  
0000008f`cd4fc0a0 00007ffd`0ab9940b : 00000000`00000000 00000000`00000000 00000000`00000000 00007ffd`0ac943d0 : KERNELBASE!RaiseFailFastException+0xaf
0000008f`cd4fc670 00007ffc`b64a57df : 00007ffd`0ab99940 00007ffc`ff892519 0000008f`cd4fe370 0000008f`cd4febc0 : combase!RoFailFastWithErrorContextInternal2+0x50b
0000008f`cd4fc950 00007ffc`b648e739 : 00000000`8000ffff 00007ffd`01ab34af 00007ffc`b64ad79d 00007ffc`b6470000 : TerminalControl+0x357df
0000008f`cd4fc980 00007ffc`b6532319 : 00007ffc`ff8a5280 00007ffc`ff8a52a0 00007ffc`ff8a52b0 00007ffc`ff8a5280 : TerminalControl+0x1e739
0000008f`cd4fc9b0 00007ffd`01ab1080 : 00007ffc`b65322fa 0000008f`cd4fed90 0000008f`cd4fed90 00007ffc`ff8a5280 : TerminalControl!DllGetActivationFactory+0x82dd9
0000008f`cd4fc9e0 00007ffd`01ab26a5 : 00007ffc`b65322fa 0000008f`cd4fd8e8 0000026f`00000100 00000000`00000000 : VCRUNTIME140_1!_CallSettingFrame_LookupContinuationIndex+0x20
0000008f`cd4fca10 00007ffd`0be21336 : 00000000`00000000 00000000`00000003 00000000`00000000 0000008f`cd4febc0 : VCRUNTIME140_1!__FrameHandler4::CxxCallCatchBlock+0x115
0000008f`cd4fcaf0 00007ffc`b65247f9 : 0000026f`f6e51200 0000026f`8530a2e0 0000008f`cd4fee00 00000000`00000000 : ntdll!RcConsolidateFrames+0x6
0000008f`cd4fed90 00007ffc`b64a5531 : 0000026f`8530a2e0 0000026f`f6f9e590 0000026f`85bf73c0 00000000`00000018 : TerminalControl!DllGetActivationFactory+0x752b9
0000008f`cd4fee30 00007ffc`fb7afb51 : 0000026f`f6d60100 00000000`00000001 00000000`00000000 00000000`00000000 : TerminalControl+0x35531
0000008f`cd4fee60 00007ffd`029efbf6 : 0000026f`f6e00da0 0000026f`f6f9e590 0000026f`f6d60340 00000000`004000a0 : Windows_UI!Microsoft::WRL::Details::DelegateArgTraits<long (__cdecl Windows::System::IDispatcherQueueHandler::*)(void)>::DelegateInvokeHelper<Microsoft::WRL::Implements<Microsoft::WRL::RuntimeClassFlags<2>,Windows::System::IDispatcherQueueHandler,Microsoft::WRL::FtmBase>,<lambda_59517943c03487243f9bea31c6c1a784>,-1>::Invoke+0x71
0000008f`cd4fee90 00007ffd`029bbd46 : 0000026f`f6f078d0 0000026f`85bf73c0 0000026f`f6f078d0 0000026f`85bf73c0 : CoreMessaging!Windows::System::DispatcherQueue::DeferInvokeCallback+0x16
0000008f`cd4feec0 00007ffd`029bae8d : 00000000`00000000 0000026f`f6f07b20 0000026f`85bf73c0 0000026f`fa1377d0 : CoreMessaging!Microsoft__CoreUI__Dispatch__TimeoutHandler$CallbackThunk+0x186
0000008f`cd4fef40 00007ffd`029ba818 : 0000026f`fa1377d0 0000026f`fff644a0 0000026f`fa1377d0 00000000`00000003 : CoreMessaging!Microsoft::CoreUI::Dispatch::DeferredCall::Callback_Dispatch+0x2bd
0000008f`cd4feff0 00007ffd`029c1108 : 00000000`00000006 0000026f`f6e367c0 0000026f`f6e367c0 00000000`00000006 : CoreMessaging!Microsoft::CoreUI::Dispatch::DeferredCallDispatcher::Callback_OnDispatch+0x158
0000008f`cd4ff060 00007ffd`029c0491 : 0000026f`f6e52340 0000008f`cd4ff198 0000026f`f6f0c9b0 0000026f`f6e6a710 : CoreMessaging!Microsoft::CoreUI::Dispatch::EventLoop::Callback_RunCoreLoop+0xa68
0000008f`cd4ff140 00007ffd`029bfd99 : 0000026f`f6e6a710 0000026f`f6f13260 ffffffff`ffffffff 00007ffd`0a615aa4 : CoreMessaging!Microsoft::CoreUI::Dispatch::UserAdapter::OnUserDispatch+0x1d1
0000008f`cd4ff230 00007ffd`029bfbcb : 00000000`00000005 0000026f`f6f13260 00000000`00000000 00000000`40000c02 : CoreMessaging!Microsoft::CoreUI::Dispatch::UserAdapter_DoWork+0xe9
0000008f`cd4ff310 00007ffd`0a615c1d : 00000000`00000002 00000000`80000022 00000000`00000001 0000008f`cd4ff750 : CoreMessaging!Microsoft::CoreUI::Dispatch::UserAdapter_WindowProc+0x9b
0000008f`cd4ff340 00007ffd`0a615612 : 0000026f`f74f1f90 00007ffd`029bfb30 00000000`000f02f8 0000008f`cd4ff590 : user32!UserCallWinProcCheckWow+0x2bd
0000008f`cd4ff4d0 00007ffc`ff74150b : 00007ffd`029bfb30 0000026f`f6e26848 0000026f`f6e39f40 00007ffd`0bdc06fc : user32!DispatchMessageWorker+0x1e2
0000008f`cd4ff550 00007ffc`ff743979 : 00000000`000f02f8 0000008f`cd4ff6e8 00000000`00000000 00000000`00000000 : Microsoft_Toolkit_Win32_UI_XamlHost+0x150b
0000008f`cd4ff5e0 00007ff6`9d2e785c : 0000008f`cd4ff6e8 00000000`00000000 00000000`00000000 00000000`00000000 : Microsoft_Toolkit_Win32_UI_XamlHost+0x3979
0000008f`cd4ff610 00007ff6`9d2e57be : 00000000`00000000 00000000`00000005 00000000`00000000 00780065`002e006c : WindowsTerminal+0x785c
0000008f`cd4ff650 00007ff6`9d2f3e12 : 00000000`00000005 00000000`00000000 00000000`00000000 00000000`00000000 : WindowsTerminal+0x57be
0000008f`cd4ff800 00007ffd`0b217c24 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : WindowsTerminal+0x13e12
0000008f`cd4ff840 00007ffd`0bded721 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14
0000008f`cd4ff870 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21


SYMBOL_NAME:  terminalcontrol+357df

MODULE_NAME: TerminalControl

IMAGE_NAME:  TerminalControl.dll

STACK_COMMAND:  ~0s ; .ecxr ; kb

FAILURE_BUCKET_ID:  FAIL_FAST_EXCEPTION_c0000602_TerminalControl.dll!Unknown

OS_VERSION:  10.0.18362.1

BUILDLAB_STR:  19h1_release

OSPLATFORM_TYPE:  x64

OSNAME:  Windows 10

FAILURE_ID_HASH:  {ac27ec0d-741f-9773-6afa-117b0a1e2a8d}

Followup:     MachineOwner
---------

0:000> lmvm TerminalControl
Browse full module list
start             end                 module name
00007ffc`b6470000 00007ffc`b656e000   TerminalControl   (export symbols)       TerminalControl.dll
    Loaded symbol image file: TerminalControl.dll
    Mapped memory image file: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.7.1091.0_x64__8wekyb3d8bbwe\TerminalControl.dll
    Image path: C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.7.1091.0_x64__8wekyb3d8bbwe\TerminalControl.dll
    Image name: TerminalControl.dll
    Browse all global symbols  functions  data
    Timestamp:        Mon Apr 19 22:25:11 2021 (607DF537)
    CheckSum:         000FB1D0
    ImageSize:        000FE000
    File version:     1.7.2104.19001
    Product version:  1.7.2104.19001
    File flags:       0 (Mask 3F)
    File OS:          4 Unknown Win32
    File type:        2.0 Dll
    File date:        00000000.00000000
    Translations:     0000.04b0
    Information from resource tables:

```
</details>
",lhecker,Resolution-Fix-Committed;Issue-Bug;Area-TerminalControl;Severity-Crash;Product-Terminal;Severity-Blocking;Priority-1,2021-04-20T23:38:04Z,2021-05-04T21:17:38Z,hhromic,zadjii-msft;hhromic;DHowett;strngtn;j4james;Thomas1664;lhecker,zadjii-msft,zadjii-msft,,,,
microsoft/terminal,9962,"Sometimes, saving a setting in the UI doesn't actually apply The minimal repro:

* Install powershell core, at least one of them
* Close the Terminal.
* Delete all the settings.json files.
* Open the Terminal, go to the SUI, go to the ""Appearance"" of the Powershell Core.
* Change scrollbar state to hidden.
* Hit Save.

At this point, the SUI will reload. The scrollbar state didn't apply, and now you've got a mysterious ""Default"" profile. Also, the `setting.json` is now corrupted. It's now got 

```
{},
{
  ""scrollbarState"": ""hidden""
}
```

slammed in the profiles list, which is garbage data.

* [ ] Figure out why the setting is blasting off to space.
* [ ] Add a mitigation to ignore profile snippets without a GUID

/cc @carlos-zamora. 

Now, I'm gonna close all the threads we think are a dupe of this one.",carlos-zamora,Resolution-Fix-Committed;Issue-Bug;Product-Terminal;Priority-1;Area-Settings UI,2021-04-26T21:04:45Z,2021-04-28T17:59:05Z,zadjii-msft,Krrishdhaneja;zadjii-msft;htcfreek,zadjii-msft,zadjii-msft,zadjii-msft,,,
microsoft/terminal,9968,"Can't get fragments to work with an MSIX app ### Windows Terminal version (or Windows build number)

1.8.1032.0, 1.7.1033.0

### Other Software

A new MSIX installer for the Julia language that I'm working on (https://github.com/davidanthoff/winjulia). The installer is available for tryout at https://winjulia.david-anthoff.com/. The appx file that has the fragment in it and the JSON in the app manifest is available at https://winjulia.s3-us-west-1.amazonaws.com/JuliaApp-x64-1.0.0.32.appx.

### Steps to reproduce

Go to https://winjulia.david-anthoff.com/ and install Julia from the link on that page. That will trigger an MSIX App Installer setup and install Julia.

### Expected Behavior

I would have expected a new profile to show up in Windows Terminal for Julia automatically.

### Actual Behavior

No profile appears. I think I must be making some mistake in how I am creating the fragment, but I can't figure out what is wrong.

The appx manifest I'm using is https://github.com/davidanthoff/winjulia/blob/master/msix/appxmanifest.xml, the fragment I'm adding is https://github.com/davidanthoff/winjulia/blob/master/msix/Fragments/Julia.json, and that file is put into the folder `Public\Fragments` via https://github.com/davidanthoff/winjulia/blob/master/msix/PackagingLayout.xml#L8.",PankajBhojwani,Issue-Bug;Area-Settings;Product-Terminal;Needs-Tag-Fix;Tracking-External,2021-04-27T17:21:04Z,2021-05-23T20:23:44Z,davidanthoff,zadjii-msft;PankajBhojwani;davidanthoff;DHowett,skyline75489;zadjii-msft,zadjii-msft,zadjii-msft,,davidanthoff,
microsoft/terminal,9978,"Settings UI: bad spacing between pivot header and its content <!-- 
棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍棣冩瘍

I ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:
1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.
2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.
3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).
4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.
5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.

All good? Then proceed!
-->

# Description of the new feature/enhancement

There should be more space between the pivot tab header and its content. I'm am not sure if it is against Fluent design guidelines but IMHO the second version looks significantly better. This minor UI tweak should take less than 2 minutes to apply.

**Before:**

![before](https://user-images.githubusercontent.com/26736457/116431630-41cd0900-a848-11eb-9dc5-dffc613da147.png)

**After:**

![after](https://user-images.githubusercontent.com/26736457/116431650-44c7f980-a848-11eb-9407-aa610fc49ada.png)


# Proposed technical implementation details (optional)

`<PivotItem x:Uid=""Profile_General"" Margin=""12,12,12,0"">` or something like this. Do it for every `PivotItem` in `ProfilesPivot`
File: https://github.com/microsoft/terminal/blob/main/src/cascadia/TerminalSettingsEditor/Profiles.xaml
",cinnamon-msft;PankajBhojwani,Resolution-Fix-Committed;Help Wanted;Issue-Bug;Product-Terminal;Needs-Tag-Fix;Priority-3;Area-Settings UI,2021-04-28T15:51:52Z,2022-01-28T00:40:02Z,vinderguy,lhecker;zadjii-msft,vinderguy;DHowett,DHowett,zadjii-msft,,PankajBhojwani,
